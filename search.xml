<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中值定理</title>
      <link href="/2025/08/16/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86/"/>
      <url>/2025/08/16/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="T1">T1</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 上 $  n + 1  $ 阶可导，且 $  f^{(i)}(0)=f^{(i)}(1) = 0  $（$ i = 0,1,\cdots,n $ ）</p><p>证明：存在 $  \xi\in(0,1)  $，使得 $  f^{(n + 1)}(\xi)=f(\xi)  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>F(x)=(f(x) + f’(x) + \cdots + f^{(n)}(x))e^{-x}<br>$$<br>由 $  F(0)=F(1)=0  $，根据 <strong>Rolle 定理</strong>：存在 $  \xi\in(0,1)  $，使得 $  F’(\xi)=0  $</p><p>$$<br>\begin{align*}<br>F’(x)&amp;=\left(f’(x) + f’‘(x) + \cdots + f^{(n + 1)}(x)\right)e^{-x}-\left(f(x) + f’(x) + \cdots + f^{(n)}(x)\right)e^{-x}\<br>&amp;=\left[f^{(n + 1)}(x)-f(x)\right]e^{-x}<br>\end{align*}<br>$$<br>代入 $  x = \xi  $，因 $  F’(\xi)=0  $ 且 $  e^{-\xi}\neq0  $，故 $  f^{(n + 1)}(\xi)=f(\xi)  $</p><h3 id="T2">T2</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 可导，$  f(0)=f(1)=0  $，$  f\left(\frac{1}{2}\right)=1  $，证明：存在 $  \xi\in(0,1)  $，使得 $  f’(\xi)-\lambda\left[f(\xi)-\xi\right]=1  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>F(x)=(f(x) - x)e^{\lambda x}<br>$$<br>分析 $  F(x)  $ 取值：<br>$$<br>\begin{align*}<br>F(0)&amp;=(f(0) - 0)e^{0}=0 \<br>F\left(\frac{1}{2}\right)&amp;=\left(f\left(\frac{1}{2}\right)-\frac{1}{2}\right)e^{\frac{\lambda}{2}}=\frac{1}{2}e^{\frac{\lambda}{2}}&gt;0 \<br>F(1)&amp;=(f(1) - 1)e^{\lambda}=-e^{\lambda}&lt;0<br>\end{align*}<br>$$<br>由 <strong>零点定理</strong>：因 $  F\left(\frac{1}{2}\right)&gt;0  $ 且 $  F(1)&lt;0  $，存在 $  \theta\in\left(\frac{1}{2},1\right)  $，使得 $  F(\theta)=0  $</p><p>又 $  F(0)=F(\theta)=0  $，根据 <strong>Rolle 定理</strong>：存在 $  \xi\in(0,\theta)\subset(0,1)  $，使得 $  F’(\xi)=0  $</p><p>$$<br>\begin{align*}<br>F’(x)&amp;=\left[f’(x)-1\right]e^{\lambda x}+\lambda\left[f(x)-x\right]e^{\lambda x}\<br>&amp;=\left[f’(x) + \lambda\left(f(x)-x\right)-1\right]e^{\lambda x}<br>\end{align*}<br>$$<br>代入 $  x = \xi  $，因 $  F’(\xi)=0  $ 且 $  e^{\lambda \xi}\neq0  $，故 $  f’(\xi)-\lambda\left[f(\xi)-\xi\right]=1  $</p><h3 id="T3">T3</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 连续，$(a,b)$ 可导，$  f(a)=f(b)=0  $，$\displaystyle f\left(\frac{a + b}{2}\right)=0  $</p><p>（1）证明：$\exists \xi\in(a,b)$，使得 $ f’‘(\xi) - 3f’(\xi) + 2f(\xi)=0$</p><p>（2）证明：$\exists \eta\in(a,b)$，使得 $  f’'(\eta)=f(\eta)  $</p></blockquote><p><strong>证明</strong>：</p><p>(1)</p><p>令<br>$$<br>F(x)=\left[f’(x) - f(x)\right]e^{-2x}<br>$$<br>再令<br>$$<br>G(x)=e^{-x}f(x)<br>$$<br>由 $\displaystyle G(a)=G\left(\frac{a + b}{2}\right)=G(b)=0  $，根据 Rolle 定理，存在 $\displaystyle xi_1\in\left(a,\frac{a + b}{2}\right)  $，$ \displaystyle \xi_2\in\left(\frac{a + b}{2},b\right)  $，使得 $  G’(\xi_1)=G’(\xi_2)=0  $</p><p>计算 $  G’(x)=\left[f’(x) - f(x)\right]e^{-x}  $，代入 $  x = \xi_1,\xi_2  $，得<br>$$<br>\begin{align*}<br>\left[f’(\xi_1) - f(\xi_1)\right]e^{-\xi_1}&amp;=0\<br>\left[f’(\xi_2) - f(\xi_2)\right]e^{-\xi_2}&amp;=0<br>\end{align*}<br>$$<br>即 $  F(\xi_1)=F(\xi_2)=0  $</p><p>对 $  F(x)  $ 用 Rolle 定理，存在 $  \xi\in(\xi_1,\xi_2)\subset(a,b)  $，使得 $  F’(\xi)=0  $</p><p>$$<br>\begin{align*}<br>F’(x)&amp;=\left[f’‘(x) - f’(x)\right]e^{-2x}-2\left[f’(x) - f(x)\right]e^{-2x}\<br>&amp;=\left[f’‘(x) - 3f’(x) + 2f(x)\right]e^{-2x}<br>\end{align*}<br>$$<br>代入 $  x = \xi  $，因 $  F’(\xi)=0  $ 且 $  e^{-2\xi}\neq0  $，故 $  f’‘(\xi) - 3f’(\xi) + 2f(\xi)=0  $</p><p>(2)</p><p>令<br>$$<br>F(x)=e^x\left[f’(x) - f(x)\right]<br>$$<br>由（1）知 $  F(\xi_1)=F(\xi_2)=0  $（$  \xi_1,\xi_2  $ 同（1）中定义 ），根据 Rolle 定理，存在 $  \eta\in(\xi_1,\xi_2)\subset(a,b)  $，使得 $  F’(\eta)=0  $</p><p>$$<br>\begin{align*}<br>F’(x)&amp;=e^x\left[f’(x) - f(x)\right]+e^x\left[f’‘(x) - f’(x)\right]\<br>&amp;=e^x\left[f’‘(x) - f(x)\right]<br>\end{align*}<br>$$<br>代入 $  x = \eta  $，因 $  F’(\eta)=0  $ 且 $  e^{\eta}\neq0  $，故 $  f’'(\eta)=f(\eta)  $</p><h3 id="T4">T4</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 上二阶可导，$  f(0)=f(1)  $，证明：存在 $  \xi\in(0,1)  $，使得 $  f’(\xi)=(e^{-\xi}-1)f’'(\xi)  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>F(x)=f’(x)(1 - e^x)<br>$$<br>由 $  f(0)=f(1)  $，根据 Rolle 定理，$  \exists \eta\in(0,1)  $ 使 $  f’(\eta)=0  $，则 $  F(0)=F(\eta)=0  $</p><p>再由 Rolle 定理，$  \exists \xi\in(0,\eta)\subset(0,1)  $ 使 $  F’(\xi)=0  $</p><p>$$<br>\begin{align*}<br>F’(x)&amp;=f’‘(x)(1 - e^x)-f’(x)e^x \<br>&amp;= e^x\left[f’‘(x)(e^{-x}-1)-f’(x)\right]<br>\end{align*}<br>$$<br>因 $  F’(\xi)=0  $ 且 $  e^\xi\neq0  $，故 $  f’‘(\xi)=(e^{-\xi}-1)f’(\xi)  $</p><h3 id="T5">T5</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 二阶可导，$  f(0)=0  $，$  f(1)=1  $，证明：$  \exists \xi\in(0,1)  $ 使 $  \xi f’‘(\xi)+(1 + \xi)f’(\xi)=1 + \xi  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>F(x)=\left[f’(x)-1\right]x e^x<br>$$<br>先令<br>$$<br>G(x)=f(x)-x<br>$$<br>则 $  G(0)=G(1)=0  $，由 Rolle 定理，$  \exists \eta\in(0,1)  $ 使 $  G’(\eta)=f’(\eta)-1=0  $，即 $  F(0)=F(\eta)=0  $</p><p>再由 Rolle 定理，$  \exists \xi\in(0,\eta)\subset(0,1)  $ 使 $  F’(\xi)=0  $</p><p>$$<br>\begin{align*}<br>F’(x)&amp;=\left[f’‘(x)x e^x - (f’(x)-1)(e^x + x e^x)\right]  \<br>&amp;=\left[f’‘(x)x- (f’(x)-1)(1+ x)\right]e^x<br>\end{align*}<br>$$<br>化简后因 $  F’(\xi)=0  $，整理得 $  \xi f’‘(\xi)+(1 + \xi)f’(\xi)=1 + \xi  $</p><h3 id="T6">T6</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 二阶可导，且 $  \exists c\in(a,b)  $ 满足 $  f’©=0  $，证明：$  \exists \xi\in(a,b)  $ 使 $ \displaystyle f’(\xi)=\frac{f(b)-f(a)}{b - a}  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>F(x)=[f(x)-f(a)]e^{-\frac{x}{b - a}}  则 $  F(a)=0  $<br>$$<br>则 $  F(a)=0  $<br>$$<br>F’(x)=e^{-\frac{x}{b - a}}\left[f’(x)-\frac{f(x)-f(a)}{b - a}\right]<br>$$<br>且<br>$$<br>F’©=-\frac{1}{b - a}e^{-\frac{c}{b - a}}[f(a)-f©]<br>$$</p><ul><li>若 $  f(a)=f©  $，则 $  F©=0  $，结合 $  F(a)=0  $，由 Rolle 定理，$  \exists \xi\in(a,c)\subset(a,b)  $ 使 $  F’(\xi)=0  $，即 $\displaystyle f’(\xi)=\frac{f(b)-f(a)}{b - a}  $</li><li>若 $  f(a)&lt; f©  $，此时 $F\left(c\right)&gt;0$ 但 $F’\left(c\right)&lt;0$，则 $  \exists \delta ,,s.t. ,x\in(c-\delta,c)$ 时，有 $F\left(x\right)&gt;F\left(c\right)$，且 $x \in \left(c,c+\delta\right)$ 时，$F\left(c\right)&gt;F\left(x\right)$，故 $F\left(x\right)$的最大值只能在 $\left(a,c\right)$ 取到，由费马引理  $  \exists \xi\in(a,c)\subset(a,b)  $ 使 $  F’(\xi)=0  $，即 $\displaystyle f’(\xi)=\frac{f(b)-f(a)}{b - a}  $</li><li>若 $  f(a)&gt; f©  $，同理可得</li></ul><h3 id="T7">T7</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 二阶可导，$\displaystyle f’\left(\frac{a + b}{2}\right)=0  $，证明：$  \exists \xi\in(a,b)  $，使得 $\displaystyle |f’'(\xi)|\geq \frac{4}{(b - a)^2}|f(b) - f(a)|  $</p></blockquote><p><strong>证明</strong>：</p><p>对 $  f(a),f(b)  $ 在 $\displaystyle x = \frac{a + b}{2}  $ 处泰勒展开：</p><p>$$<br>\begin{cases}<br>\displaystyle f(a)=f\left(\frac{a + b}{2}\right)+f’\left(\frac{a + b}{2}\right)\left(a - \frac{a + b}{2}\right)+\frac{f’‘(\xi_1)}{2}\left(a - \frac{a + b}{2}\right)^2 \<br>\displaystyle f(b)=f\left(\frac{a + b}{2}\right)+f’\left(\frac{a + b}{2}\right)\left(b - \frac{a + b}{2}\right)+\frac{f’'(\xi_2)}{2}\left(b - \frac{a + b}{2}\right)^2<br>\end{cases}<br>$$<br>（$  \xi_1,\xi_2\in(a,b)  $ ）</p><p>两式相减，利用 $\displaystyle f’\left(\frac{a + b}{2}\right)=0  $，化简得：</p><p>$$<br>f(b) - f(a)=\frac{(b - a)^2}{8}\left[f’‘(\xi_1) - f’‘(\xi_2)\right]<br>$$<br>取 $  |f’‘(\xi)|=\max{|f’‘(\xi_1)|,|f’'(\xi_2)|}  $，则：<br>$$</p><p>|f(b) - f(a)|\leq \frac{(b - a)^2}{4}|f’'(\xi)|</p><p>$$<br>即<br>$$<br>|f’'(\xi)|\geq \frac{4}{(b - a)^2}|f(b) - f(a)|<br>$$</p><h3 id="T8">T8</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 上存在 $  n  $ 阶导数，且 $  f^{(i)}(a)=f^{(i)}(b)=0  $（$  i = 1,\cdots,n - 1  $ ），证明：$  \exists \xi\in(a,b)  $，使得 $\displaystyle |f^{(n)}(\xi)|\geq \frac{2^{n-1} n!}{(b - a)^n}|f(b) - f(a)|  $</p></blockquote><p><strong>证明</strong>：</p><p>对 $\displaystyle f\left(\frac{a + b}{2}\right)  $ 分别在 $  a,b  $ 处泰勒展开（到 $  n  $ 阶）：<br>$$<br>\begin{cases}<br>\displaystyle f\left(\frac{a + b}{2}\right)=f(a) + \cdots + \frac{f^{(n)}(\xi_1)}{n!}\left(\frac{b - a}{2}\right)^n \<br>\displaystyle f\left(\frac{a + b}{2}\right)=f(b) + \cdots + \frac{f^{(n)}(\xi_2)}{n!}\left(\frac{a - b}{2}\right)^n<br>\end{cases}<br>$$<br>（$  \xi_1,\xi_2\in(a,b)  $ ）</p><p>两式相减，利用 $  f^{(i)}(a)=f^{(i)}(b)=0  $（低阶项消去），化简得：<br>$$<br>f(b) - f(a)=\frac{(b - a)^n}{n! 2^n}\left[f^{(n)}(\xi_1) + (-1)^{n + 1}f^{(n)}(\xi_2)\right]<br>$$<br>取 $  |f^{(n)}(\xi)|=\max{|f^{(n)}(\xi_1)|,|f^{(n)}(\xi_2)|}  $，则：<br>$$<br>|f(b) - f(a)|\leq \frac{(b - a)^n}{n! 2^n}\cdot 2\cdot |f^{(n)}(\xi)|<br>$$<br>即<br>$$<br>|f^{(n)}(\xi)|\geq \frac{2^{n-1} n!}{(b - a)^n}|f(b) - f(a)|<br>$$</p><h3 id="T9">T9</h3><blockquote><p>设 $  f(x)  $ 二阶可导，$f’\left(0\right)=f’\left(1\right)$，|$  f’'(x)|\leq1  $，证明：</p><p>（1）当 $  x\in(0,1)  $ 时，$\displaystyle \vert f(x) - f(0)(1 - x) - f(1)x\vert\leq\frac{x(1 - x)}{2}$</p><p>（2）$\displaystyle \left|\int_{0}^{1}f(x), \mathrm{d}x- \frac{f(0) + f(1)}{2}\right|\leq\frac{1}{12}$</p></blockquote><p><strong>证明</strong>:(1)</p><p>对 $  f(x)  $ 在 $  0$ 及 $  1$ 处泰勒展开：<br>$$<br>\begin{cases}<br>\displaystyle f(x)=f(0)+f’(0)x+\frac{f’‘(\xi_1)}{2}x^2\ (\xi_1\in(0,x)) \<br>\displaystyle f(x)=f(1)+f’(1)(x - 1)+\frac{f’‘(\xi_2)}{2}(x - 1)^2\ (\xi_2\in(x,1))<br>\end{cases}<br>$$<br>构造 $  f(x) - f(0)(1 - x) - f(1)x  $，代入展开式并整理，利用 $  |f’‘(x)|\leq1  $，得：<br>$$<br>\begin{align*}<br>\left|f(x) - f(0)(1 - x) - f(1)x\right|&amp;\leq\frac{x(1 - x)}{2}\cdot |xf’‘(\xi_1)|+\frac{x(1 - x)}{2}\cdot |\left(1-x\right)f’'(\xi_2)|\<br>&amp;\leq\frac{x(1 - x)}{2}<br>\end{align*}<br>$$</p><p>(2)</p><p>对(1)中等式两边在 $[0,1]$ 积分：<br>$$<br>\left|\int_{0}^{1}\left[f(x) - f(0)(1 - x) - f(1)x\right], \mathrm{d}x\right|\leq\int_{0}^{1}\frac{x(1 - x)}{2}, \mathrm{d}x<br>$$<br>计算积分 $\displaystyle \int_{0}^{1}\frac{x(1 - x)}{2}, \mathrm{d}x=\frac{1}{12}  $，且 $\displaystyle \int_{0}^{1}[f(0)(1 - x) + f(1)x], \mathrm{d}x=\frac{f(0) + f(1)}{2}  $</p><p>故<br>$$<br>\left|\int_{0}^{1}f(x), \mathrm{d}x- \frac{f(0) + f(1)}{2}\right|\leq\frac{1}{12}<br>$$</p><h3 id="T10">T10</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 上有二阶连续导数，$  f(a)=f(b)=0  $，$ M = \max\limits_{a\leq x\leq b}|f’'(x)|$，证明：</p><p>（1）$\displaystyle \max\limits_{a\leq x\leq b}|f(x)|\leq \frac{M}{8}\cdot (b - a)^2$</p><p>（2）$\displaystyle \max\limits_{a\leq x\leq b}|f’(x)|\leq \frac{M}{2}\cdot \left(b - a\right)$</p></blockquote><p><strong>证明</strong>：(1)</p><p>设 $  |f©| = \max\limits_{a\leq x\leq b}|f(x)|  $（$  c\in(a,b)  $ ），$M&gt;0$，由费马引理，此时  $f’\left(c\right)=0$，对 $  f(x)  $ 在 $  a,c  $ 与 $  c,b  $ 处泰勒展开：<br>$$<br>\begin{cases}<br>\displaystyle 0 = f(a)=f©+f’©(a - c)+\frac{f’‘(\xi_1)}{2}(a - c)^2\ (\xi_1\in(a,c)) \<br>\displaystyle 0 = f(b)=f©+f’©(b - c)+\frac{f’'(\xi_2)}{2}(b - c)^2\ (\xi_2\in(c,b))<br>\end{cases}<br>$$<br>得：<br>$$<br>\begin{cases}<br>\displaystyle |f©|\leq \frac{(a - c)^2}{2}M\quad (\xi_1\in(a,c)) -①\<br>\displaystyle |f©|\leq \frac{(b - c)^2}{2}M\quad (\xi_2\in(c,b)) -②<br>\end{cases}<br>$$<br>当 $\displaystyle a&lt;c&lt;\frac{a+b}{2}$ 时，由①得，$\displaystyle |f\left(c\right)|\leq \frac{\left(b-a\right)^2}{8}M$</p><p>当 $\displaystyle \frac{a+b}{2}&lt;c&lt;b$ 时，由②得，$\displaystyle |f\left(c\right)|\leq \frac{\left(b-a\right)^2}{8}M$</p><p>(2)</p><p>对 $  f(x)  $ 在 $  a,b  $ 处泰勒展开，结合 $  f(a)=f(b)=0  $，设 $  |f’(x_0)| = \max|f’(x)|  $，展开式相减得：<br>$$<br>(b - a)f’(x_0)=\frac{(x_0 - a)^2}{2}f’‘(\xi_1)-\frac{(b - x_0)^2}{2}f’‘(\xi_2)<br>$$<br>整理得：<br>$$<br>\begin{align*}<br>|f’\left(x_0\right)|&amp;\leq\frac{1}{b-a}\cdot \frac{M}{2}\cdot [\left(b-x_0\right)^2+\left(a-x_0\right)^2]\<br>&amp;\leq\frac{1}{b-a}\cdot \frac{M}{2}\cdot \left(b-a\right)^2\<br>&amp;\leq \frac{M}{2}\cdot \left(b-a\right)<br>\end{align*}<br>$$</p><h3 id="T11">T11</h3><blockquote><p>设 $  f(x)  $ 有 $  n + 1  $ 阶连续导数，且 $\displaystyle f(a + \theta h)=f(a)+f’(a)h+\cdots+\frac{f^{(n-1)}\left(a\right)}{\left(n-1\right)!}h^{n-1}+\frac{f^{(n)}(a+\theta h)}{n!}h^n  $（$  0\lt\theta\lt1  $ ），$  f^{(n + 1)}(a)\neq0  $</p><p>证明：$\displaystyle \lim\limits_{h\to0}\theta = \frac{1}{n + 1}  $</p></blockquote><p><strong>证明</strong>：</p><p>对 $  f(a + h)  $ 泰勒展开到 $  n + 1  $ 阶：</p><p>$$<br>f(a + h)=f(a)+f’(a)h+\cdots+\frac{f^{(n)}(a)}{n!}h^n+\frac{f^{(n + 1)}(\xi)}{(n + 1)!}h^{n + 1} \quad (\xi\in(a,a + h))<br>$$<br>与题设 $  f(a + \theta h)  $ 展开式作差，整理得：<br>$$<br>\frac{f^n(a + \theta h)-f^n(a)}{\theta h}\cdot\theta=\frac{f^{(n + 1)}(\eta)}{n + 1} \quad (\eta\in(a,a + \theta h))<br>$$<br>令 $  h\to0  $，利用 $  f^{(n + 1)}(a)\neq0  $，取极限得<br>$$<br>f^{\left(n+1\right)}\left(a\right)\cdot\theta=\frac{f^{(n + 1)}(\eta)}{n + 1} \quad (\eta\in(a,a + \theta h))<br>$$<br>即<br>$$<br>\lim\limits_{h\to0}\theta = \frac{1}{n + 1}<br>$$</p><h3 id="T12">T12</h3><blockquote><p>设 $  f(x)  $ 在 $[-1,1]$ 二阶可导且为奇函数，证明：$  \exists \xi\in(-1,1)  $，使得 $  f’‘(\xi)-f’(\xi)+f(1)=0  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>F(x)=[f(x)-f(1)]e^{-x}<br>$$<br>因 $  f(x)  $ 是奇函数，故 $  f(0)=0  $，且 $  f(-1)=-f(1)  $</p><p>由拉格朗日中值定理，$  \exists \eta_1\in(0,1)  $，$  \eta_2\in(-1,0)  $  使<br>$$<br>\begin{align*}<br>f\left(1\right)-f\left(0\right)&amp;=f’(\eta_1)\<br>f\left(-1\right)-f\left(0\right)&amp;=-f’(\eta_2)<br>\end{align*}<br>$$<br>则 $  F(\eta_1)=F(\eta_2)=0  $</p><p>再由 Rolle 定理，$  \exists \xi\in(\eta_1,\eta_2)\subset(-1,1)  $  使得 $  F’(\xi)=0  $</p><p>$$<br>F’(x)=[f’‘(x)-f’(x)+f(1)]e^{-x}<br>$$<br>因 $  F’(\xi)=0  $ 且 $  e^{-\xi}\neq0  $，故 $  f’‘(\xi)-f’(\xi)+f(1)=0  $</p><h3 id="T13">T13</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 连续、$(a,b)$ 可导，$  f’(x)\neq0  $，证明：$\exists \xi,\eta\in(a,b)$，使 $\displaystyle \frac{f’(\xi)}{f’(\eta)} = \frac{e^b - e^a}{b - a}e^{-\eta}$</p></blockquote><p><strong>证明</strong>：</p><p>对 $  e^x  $ 和 $  f(x)  $ 用 <strong>柯西中值定理</strong>：</p><p>存在 $  \eta\in(a,b)  $，使<br>$$<br>\frac{e^b - e^a}{f(b) - f(a)} = \frac{e^\eta}{f’(\eta)}<br>$$<br>对 $  f(x)  $ 用 <strong>拉格朗日中值定理</strong>：</p><p>存在 $  \xi\in(a,b)  $，使 $  f(b) - f(a) = f’(\xi)(b - a)  $</p><p>联立两式，化简得<br>$$<br>\frac{f’(\xi)}{f’(\eta)} = \frac{e^b - e^a}{b - a}e^{-\eta}<br>$$</p><h3 id="T14">T14</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 连续、$(0,1)$ 可导，$  f(0)=0  $，$  f(1)=\frac{1}{3}  $，证明：$\exists \xi\in(0,\frac{1}{2})$，$\eta\in(\frac{1}{2},1)$，使 $  f’(\xi) + f’(\eta) = \xi^2 + \eta^2  $</p></blockquote><p><strong>证明</strong>：</p><p>令 $  F(x) = f(x) - \frac{1}{3}x^3  $</p><p>对 $  F(x)  $ 在 $[0,\frac{1}{2}]$ 用 <strong>拉格朗日中值定理</strong>：</p><p>存在 $  \xi\in(0,\frac{1}{2})  $，使 $  F(\frac{1}{2}) - F(0) = \frac{1}{2}F’(\xi)  $，即<br>$$<br>f(\frac{1}{2}) - \frac{1}{24} = \frac{1}{2}(f’(\xi) - \xi^2)<br>$$<br>对 $  F(x)  $ 在 $[\frac{1}{2},1]$ 用 <strong>拉格朗日中值定理</strong>：</p><p>存在 $  \eta\in(\frac{1}{2},1)  $，使 $  F(1) - F(\frac{1}{2}) = \frac{1}{2}F’(\eta)  $，即<br>$$<br>\frac{1}{3} - f(\frac{1}{2}) = \frac{1}{2}(f’(\eta) - \eta^2)<br>$$<br>两式相加，化简得 $  f’(\xi) + f’(\eta) = \xi^2 + \eta^2  $</p><h3 id="T15">T15</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 连续、$(0,1)$ 可导，$  f(0)=0  $，$  f(1)=1  $，证明：</p><p>（1）$\exists c\in(0,1)$，使 $  f©=1 - c  $</p><p>（2）$\exists \xi,\eta\in(0,1)$（$\xi\neq\eta$），使 $  f’(\xi)f’(\eta)=1  $</p></blockquote><p><strong>证明</strong>：</p><p>（1）令 $  F(x)=f(x)+x - 1  $，$  F(0)=-1  $，$  F(1)=1  $，由零点定理，$\exists c\in(0,1)$ 使 $  F©=0  $，即 $  f©=1 - c  $</p><p>（2）对 $  f(x)  $ 在 $[0,c]$、$[c,1]$ 用拉格朗日中值定理：</p><p>$\exists \xi\in(0,c)$ 使 $ f©-f(0)=c f’(\xi)$，即 $ 1 - c = c f’(\xi)$</p><p>$\exists \eta\in(c,1)$ 使 $ f(1)-f©=(1 - c)f’(\eta)$，即 $ c = (1 - c)f’(\eta)$</p><p>两式相乘即得 $  f’(\xi)f’(\eta)=1  $</p><h3 id="T16">T16</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 连续、$(0,1)$ 可导，$  f(0)=0  $，$  f(1)=1  $，证明：</p><p>（1）$\exists \xi\in(0,1)$，使 $  f(\xi)=2 - 3\xi  $</p><p>（2）$\exists \xi,\eta\in(0,1)$（$\xi\neq\eta$），使 $[1 + f’(\eta)][1 + f’(\xi)]=4$</p></blockquote><p><strong>证明</strong>：</p><p>（1）令 $  F(x)=f(x)+3x-2 $，$  F(0)=-2$，$  F(1)=2$，由零点定理，$\exists \xi\in(0,1)$ 使 $  F(\xi)=0  $，即 $  f(\xi)=2 - 3\xi  $</p><p>（2）对 $  f(x)  $ 在 $[0,\xi]$、$[\xi,1]$ 用拉格朗日中值定理：<br>$$<br>\begin{align*}<br>&amp;\exists \eta_1\in(0,\xi) ,s.t.  f(\xi)=\xi f’(\eta_1)\</p><p>&amp;\exists \eta_2\in(\xi,1)  ,s.t.  1 - f(\xi)=(1 - \xi)f’(\eta_2)<br>\end{align*}<br>$$<br>结合 $  f’(\xi)=2 - 3\xi  $，化简得 $[1 + f’(\eta_1)][1 + f’(\eta_2)]=4$</p><h3 id="T17">T17</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 连续、$(0,1)$ 可导，$  f(0)&gt;0  $，$  f(1)&gt;1  $，证明：$\exists \xi,\eta\in(0,1)$（$\xi\neq\eta$），使 $\displaystyle \frac{1}{f’(\xi)} + \frac{1}{f’(\eta)}&gt;2$</p></blockquote><p><strong>证明</strong>：</p><p>对 $  f(x)  $ 在 $[0,1]$ 用拉格朗日中值定理：$\exists \xi\in(0,x_0)$，$\eta\in(x_0,1)$（$  x_0  $ 满足 $  f(x_0)=\frac{1}{2}  $，由介值定理存在），使<br>$$<br>\begin{align*}<br>f(x_0)-f(0)&amp;=x_0 f’(\xi)\<br>f(1)-f(x_0)&amp;=(1 - x_0)f’(\eta)<br>\end{align*}<br>$$<br>结合 $  f(0)&gt;0  $，$  f(1)&gt;1  $，化简得 $\displaystyle \frac{1}{f’(\xi)} + \frac{1}{f’(\eta)}&gt;2  $</p><h3 id="T18">T18</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 连续、$(a,b)$ 可导，$  f(x)\neq0  $，$  f(a)=0  $，$  f(b)=2  $，证明：$\exists \xi,\eta\in(a,b)$（$\xi\neq\eta$），使 $  f’(\eta)[f(\xi) + \xi f’(\xi)] = f’(\xi)[b f’(\eta) - 1]  $</p></blockquote><p><strong>证明</strong>：</p><p>对待证结论化简得<br>$$<br>\frac{f(\xi) + \xi f’(\xi)}{ f’(\xi)}=\frac{b f’(\eta) - 1}{f’(\eta)}<br>$$<br>即证<br>$$<br>\frac{cf\left(c\right)-af\left(a\right)}{f\left(c\right)-f\left(a\right)}=\frac{[bf\left(b\right)-b]-[bf\left(c\right)-c]}{f\left(b\right)-f\left(c\right)}<br>$$<br>化简得<br>$$<br>c[1-f\left(c\right)]=b[1-f\left(c\right)]<br>$$<br>由 $  f(b)=2  $ ， $f(a)=0$ 且 $f\left(x\right)$ 在 $[a,b]$ 连续，由介值定理，$\exist c\in[a,b]\ s.t. f\left(c\right)=1$</p><p>故原式得证</p><h3 id="T19">T19</h3><blockquote><p>设 $  f(x),g(x)  $ 在 $[a,b]$ 连续、$(a,b)$ 可导，$  f(a)=g(b)=0  $，$  g’(x)&lt;0  $，证明：$\exists \xi\in(a,b)$ 使 $\displaystyle \frac{f’(\xi)}{g’(\xi)} + \frac{\int_{a}^{\xi}f(t), \mathrm{d}t}{\int_{\xi}^{b}g(t), \mathrm{d}t}=0  $</p></blockquote><p><strong>证明</strong>：</p><p>令<br>$$<br>\begin{align*}<br>u(\xi)&amp;=\int_{a}^{\xi}f(t), \mathrm{d}t\<br>v(\xi)&amp;=\int_{\xi}^{b}g(t), \mathrm{d}t<br>\end{align*}<br>$$<br>则 $  u’(x)=f(x)  $，$  v’(x)=-g(x)  $</p><p>构造 $  H(x)=u’(x)v(x)-u(x)v’(x)$，$  H(a)=H(b)=0  $，由 Rolle 定理，$\exists \xi\in(a,b)$ 使 $  H’(\xi)=0  $</p><p>$$<br>\begin{align*}<br>H’\left(\xi\right)&amp;=u’‘\left(\xi\right)v\left(\xi\right)+u’\left(\xi\right)v’\left(\xi\right)-u’\left(\xi\right)v’\left(\xi\right)-u\left(\xi\right)v’‘\left(\xi\right)\<br>&amp;=u’‘\left(\xi\right)v\left(\xi\right)-u\left(\xi\right)v’‘\left(\xi\right)\<br>&amp;=f’(\xi)\int_{\xi}^{b}g(t), \mathrm{d}t-g’(\xi)\int_{a}^{\xi}f(t), \mathrm{d}t<br>\end{align*}<br>$$<br>故<br>$$<br>\displaystyle \frac{f’(\xi)}{g’(\xi)} + \frac{\int_{a}^{\xi}f(t), \mathrm{d}t}{\int_{\xi}^{b}g(t), \mathrm{d}t}=0<br>$$</p><h3 id="T20">T20</h3><blockquote><p>设 $f(x)$ 在 $[0,1]$ 上具有连续导数，且 $f(0)=0$​ 证明：</p><p>（1）$\exists \xi\in(0,1)$，使 $\displaystyle 2\xi\int_{0}^{1}f(t), \mathrm{d}t- f(\xi)=0  $</p><p>（2）$\exists \eta\in(0,1)$，使 $\displaystyle f’(\eta)=2\int_{0}^{1}f(t), \mathrm{d}t$</p></blockquote><p><strong>（1）证明</strong>：</p><p>构造 $\displaystyle H(x)=x^2\int_{0}^{1}f(t), \mathrm{d}t- \int_{0}^{x}f(t), \mathrm{d}t$（即 $  H(x)=x^2F(1)-F(x)  $，$\displaystyle F(x)=\int_{0}^{x}f(t)dt  $ ）</p><p>因 $  f(0)=0  $，则 $  F(0)=0  $，$  H(0)=0  $；$\displaystyle H(1)=1^2\int_{0}^{1}f(t), \mathrm{d}t- \int_{0}^{1}f(t), \mathrm{d}t= 0  $</p><p>由 Rolle 定理，$\exists \xi\in(0,1)$ 使 $  H’(\xi)=0  $</p><p>求导得<br>$$<br>H’(x)=2x\int_{0}^{1}f(t), \mathrm{d}t- f(x)<br>$$<br>代入 $  x = \xi  $ 整理得 $\displaystyle 2\xi\int_{0}^{1}f(t), \mathrm{d}t- f(\xi)=0  $</p><p><strong>（2）证明</strong>：</p><p>构造 $\displaystyle G(x)=f(x) - 2x\int_{0}^{1}f(t), \mathrm{d}t$</p><p>由（1）知 $  \exists \xi\in(0,1)  $ 使 $\displaystyle f(\xi)=2\xi\int_{0}^{1}f(t), \mathrm{d}t$，即 $  G(\xi)=0  $</p><p>又 $  G(0)=f(0) - 0 = 0  $（因 $  f(0)=0  $ ）</p><p>对 $  G(x)  $ 在 $[0,\xi]$ 用 Rolle 定理，$\exists \eta\in(0,\xi)\subset(0,1)$ 使 $  G’(\eta)=0  $</p><p>求导得<br>$$<br>G’(x)=f’(x) - 2\int_{0}^{1}f(t), \mathrm{d}t<br>$$<br>代入 $  x = \eta  $ 得 $\displaystyle f’(\eta)=2\int_{0}^{1}f(t), \mathrm{d}t$</p><h3 id="T21">T21</h3><blockquote><p>设 $f(x)$ 在 $[0,1]$ 连续，且 $\displaystyle \int_{0}^{1}f\left(x\right), \mathrm{d}x=\int_{0}^{1}xf\left(x\right), \mathrm{d}x$，证明：$f\left(x\right)$ 在 $\left(0,1\right)$ 内至少存在两个零点</p></blockquote><p><strong>证明</strong>：</p><p>构造 $\displaystyle F(x)=\int_{0}^{x}f(t), \mathrm{d}t$，则 $  F(0)=0  $，$F(1)=\int_{0}^{1}f(t), \mathrm{d}t= 0$</p><p>对 $\displaystyle \int_{0}^{1}xf(x), \mathrm{d}x$ 分部积分：<br>$$<br>\int_{0}^{1}xf(x)dx = xF(x)\big|<em>{0}^{1} - \int</em>{0}^{1}F(x), \mathrm{d}x= 0 - \int_{0}^{1}F(x), \mathrm{d}x= 0<br>$$<br>故 $\displaystyle \int_{0}^{1}F(x), \mathrm{d}x= 0  $</p><p>由积分中值定理，$\exists c\in(0,1)$ 使 $\displaystyle F©=\frac{1}{1 - 0}\int_{0}^{1}F(x), \mathrm{d}x= 0  $。</p><p>此时 $  F(0)=F©=F(1)=0  $（$  0 &lt; c &lt; 1  $ ）</p><p>对 $  F(x)  $ 分别在 $[0,c]$ 和 $[c,1]$ 上用 Rolle 定理：</p><ul><li><p>在 $[0,c]$ 上，$\exists \xi_1\in(0,c)$ 使 $  F’(\xi_1)=0  $，即 $  f(\xi_1)=0  $</p></li><li><p>在 $[c,1]$ 上，$\exists \xi_2\in(c,1)$ 使 $  F’(\xi_2)=0  $，即 $  f(\xi_2)=0  $</p></li></ul><p>因 $  \xi_1\neq\xi_2  $（$  0 &lt; \xi_1 &lt; c &lt; \xi_2 &lt; 1  $ ），故 $  f(x)  $ 在 $(0,1)$ 内至少存在两个零点</p><h3 id="T22">T22</h3><blockquote><p>设 $  f(x)  $ 在 $[0,2]$ 连续、$(0,2)$ 三阶可导，$\displaystyle \lim\limits_{x\to0^+}\frac{f(x)}{x}=2$，$  f(1)=1  $，$  f(2)=6  $，证明：$\exists \xi\in(0,2)$ 使 $  f’‘’(\xi)=9  $</p></blockquote><p><strong>证明</strong>：</p><p>由 $\displaystyle \lim\limits_{x\to0^+}\frac{f(x)}{x}=2  $ 得 $  f(0)=0  $，$  f’(0)=2  $</p><p>构造 $\displaystyle F(x)=f(x)-\frac{3}{2}x^3 + \frac{3}{2}x^2 - 2x  $，则 $  F(0)=F(1)=F(2)=0  $</p><p>由 Rolle 定理，$\exists \xi_1\in(0,1)$，$\xi_2\in(1,2)$ 使 $  F’(\xi_1)=F’(\xi_2)=0  $；继续对 $  F’(x)  $ 用 Rolle 定理，得 $ \exists \eta_1\in(0,\xi_1)$，$\eta_2\in(\xi_1,\xi_2)$ 使 $  F’‘(\eta_1)=F’‘(\eta_2)=0  $；再对 $  F’‘(x)  $ 用 Rolle 定理，$\exists \xi\in(\eta_1,\eta_2)\subset(0,2)$ 使 $  F’‘’(\xi)=0  $，计算得 $  f’‘’(\xi)=9  $</p><h3 id="T23">T23</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 二阶可导，$  f(0)=0  $，$  f(1)=1  $，$\displaystyle \int_{0}^{1}f(x), \mathrm{d}x=1 $，证明：$\exists \xi\in(0,1)$ 使 $  f’'(\xi)\lt -2  $</p></blockquote><p><strong>证明</strong>：</p><p>构造 $  F(x)=f(x)+x^2 - x  $，则 $  F(0)=F(1)=0  $，且<br>$$<br>\begin{align*}<br>\int_{0}^{1}F(x)dx&amp;=\int_{0}^{1}f(x), \mathrm{d}x+ \int_{0}^{1}(x^2 - x), \mathrm{d}x\<br>&amp;= 1 - \frac{1}{6}=\frac{5}{6}\gt0<br>\end{align*}<br>$$<br>由积分中值定理，$\exists c\in(0,1)$ 使 $  F©\gt0  $</p><p>对 $  F(x)  $ 在 $[0,c]$、$[c,1]$ 用 Rolle 定理，结合二阶导数性质，得 $  \exists \xi\in(0,1)  $ 使 $  F’‘(\xi)\lt0  $，即 $  f’'(\xi)\lt -2  $</p><h3 id="T24">T24</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 二阶可导，$  f(0)=f(1)=0  $，$\min\limits_{0\leq x\leq1}f(x)= -1 $，证明：$\exists \xi\in(0,1)$ 使 $f’'(\xi)\geq8$</p></blockquote><p><strong>证明</strong>：</p><p>令 $F\left(x\right)=f\left(x\right)-\left(4x^2-4x\right)$，则有 $F(0)=F(1)=0$</p><p>因 $  f(x)  $ 最小值为 $-1$，设最小值点为 $  c\in(0,1)  $，则 $f©=-1$，$f’©=0$</p><p>当 $\displaystyle c=\frac{1}{2}  $ 时，$\displaystyle F\left(\frac{1}{2}\right)=0$，两次 Rolle 定理得 $\exists \xi\in(0,1)$ 使 $f’'(\xi)=8$</p><p>当 $\displaystyle c\neq\frac{1}{2}  $时，$\displaystyle F©F\left(\frac{1}{2}\right)&lt;0$ 由零点定理得，$\exist \eta $ 在 $\displaystyle c,\frac{1}{2}$ 之间，有 $F\left(\eta\right)=0$，再由两次 Rolle 定理得， $  \exists \xi\in(0,1)  $ 使 $  f’'(\xi)\geq8  $</p><h3 id="T25">T25</h3><blockquote><p>设 $  f(x),g(x)  $ 在 $[a,b]$ 连续、$(a,b)$ 二阶可导，$  f(a)=g(a)  $，$  f(b)=g(b)  $，且 $  f(x)  $ 与 $  g(x)  $ 有相同最大值，证明：$\exists \xi\in(a,b)$ 使 $  f’‘(\xi)=g’'(\xi)  $</p></blockquote><p><strong>证明</strong>：</p><p>令 $  F(x)=f(x)-g(x)  $，则 $  F(a)=F(b)=0  $。</p><p>设 $  f(x)  $ 在 $  c\in(a,b)  $ 取最大值，$  g(x)  $ 在 $  d\in(a,b)  $ 取最大值，且 $f©=g(d)$</p><ul><li><p>若 $  c=d  $，则 $  F©=0  $，由 Rolle 定理，$\exists \xi_1\in(a,c)$，$\xi_2\in(c,b)$ 使 $  F’(\xi_1)=F’(\xi_2)=0  $；再对 $  F’(x)  $ 用 Rolle 定理，$\exists \xi\in(a,b)$ 使 $  F’‘(\xi)=0  $，即 $  f’‘(\xi)=g’'(\xi)  $</p></li><li><p>若 $  c\neq d  $，不妨设 $  c\lt d  $，则 $  F©\gt0  $，$  F(d)\lt0  $，由零点定理，$\exists \eta\in(c,d)$ 使 $  F(\eta)=0  $；再对 $  F(x)  $ 在 $[a,\eta]$、$[\eta,b]$ 用 Rolle 定理，同理得 $  \exists \xi\in(a,b)  $ 使 $F’'(\xi)=0$</p></li></ul><h3 id="T26">T26</h3><blockquote><p>设 $  f(x)  $ 在 $[-1,1]$ 三阶连续可导，$  f(-1)=0  $，$  f’(0)=0  $，$  f(1)=1  $，证明：$\exists \xi\in(-1,1)$ 使 $  f’‘’(\xi)=3  $</p></blockquote><p><strong>证明</strong>：</p><p>构造三次多项式 $\displaystyle g(x)=\frac{1}{2}x^3 + \frac{1}{2}x  $（满足 $  g(-1)=0  $，$  g’(0)=0  $，$  g(1)=1  $ ）。</p><p>令 $  F(x)=f(x)-g(x)  $，则 $  F(-1)=F(0)=F(1)=0$</p><p>由 Rolle 定理：</p><ul><li><p>存在 $  \xi_1\in(-1,0)  $，$\xi_2\in(0,1) $ 使 $  F’(\xi_1)=F’(\xi_2)=0  $；</p></li><li><p>对 $  F’(x)  $ 用 Rolle 定理，存在 $  \eta_1\in(-1,\xi_1)  $，$\eta_2\in(\xi_1,\xi_2) $ 使 $  F’‘(\eta_1)=F’'(\eta_2)=0  $；</p></li><li><p>对 $  F’‘(x)  $ 用 Rolle 定理，存在 $  \xi\in(\eta_1,\eta_2)\subset(-1,1)  $ 使 $  F’‘’(\xi)=0  $，即 $  f’‘’(\xi)=g’‘’(\xi)=3$</p></li></ul><h3 id="T27">T27</h3><blockquote><p>设 $  f(x)  $ 在 $[0,1]$ 有连续二阶导数，$\displaystyle \int_{0}^{1}f(x), \mathrm{d}x=\frac{5}{2} $，$\displaystyle \int_{0}^{1}xf(x), \mathrm{d}x=\frac{3}{2} $，证明：$\exists \xi\in(0,1)$ 使 $  f’(\xi)=3  $</p></blockquote><p><strong>证明</strong>：</p><p>构造 $  g(x)=3x + c  $（常数 $  c  $ 待定 ），令 $  F(x)=f(x)-g(x)  $</p><p>由 $\displaystyle \int_{0}^{1}F(x), \mathrm{d}x=\int_{0}^{1}f(x), \mathrm{d}x- \int_{0}^{1}(3x + c), \mathrm{d}x=\frac{5}{2} - \frac{3}{2} - c=1 - c=0  $，得 $  c=1  $，</p><p>即<br>$$<br>\begin{align*}<br>g(x)&amp;=3x + 1 \<br>F(x)&amp;=f(x)-3x - 1<br>\end{align*}<br>$$<br>则 $\displaystyle \int_{0}^{1}F(x), \mathrm{d}x=0  $，$\displaystyle \int_{0}^{1}xF(x), \mathrm{d}x=\int_{0}^{1}xf(x), \mathrm{d}x- \int_{0}^{1}(3x^2 + x), \mathrm{d}x=\frac{3}{2} - \frac{3}{2}=0 $</p><p>构造 $\displaystyle G(x)=\int_{0}^{x}F(t), \mathrm{d}t  $，则 $G(0)=G(1)=0$</p><p>由积分中值定理<br>$$<br>\begin{align*}<br>\int_{0}^{1}xF\left(x\right), \mathrm{d}x&amp;=\int_{0}^{1}x, \mathrm{d}G\left(x\right)\<br>&amp;=xG\left(x\right)|^1_0-\int_{0}^{1}G\left(x\right), \mathrm{d}x\<br>&amp;=-\int_{0}^{1}G\left(x\right), \mathrm{d}x\<br>&amp;=0<br>\end{align*}<br>$$<br>$\exists x_0\in(0,1) $ 使 $  G(x_0)=0  $；再对 $  G(x)  $ 在 $[0,x_0]$、$[x_0,1]$ 用 Rolle 定理，得 $  \exists \xi\in(0,1)  $ 使 $  G’‘(\xi)=F’(\xi)=0  $，即 $  f’(\xi)=3$</p><h3 id="T28">T28</h3><blockquote><p>设 $  f(x)  $ 在 $[0,2\pi]$ 二阶可导，$  f’‘(x)\neq f(x)  $，证明：$\exists \xi\in(0,2\pi)$ 使 $\displaystyle \tan\xi=\frac{2f’(\xi)}{f(\xi)-f’(\xi)}  $</p></blockquote><p><strong>证明</strong>：</p><p>构造 $  F(x)=f(x)\sin x$，则 $  F(0)=F(\pi)=F(2\pi)=0  $</p><p>由两次 Rolle 定理，$\xi\in(0,2\pi)$ 使 $F’'(\xi)=0$</p><p>$$<br>F’‘(\xi)=\sin \xi \cdot f’‘(\xi)+2\cos \xi \cdot f’(\xi)-\sin \xi \cdot f(\xi)<br>$$<br>即<br>$$<br>\displaystyle \tan\xi=\frac{2f’(\xi)}{f(\xi)-f’(\xi)}<br>$$<br>因 $  f’'(x)\neq f(x)  $，故 $\cos\xi\neq0  $（即 $\displaystyle \xi\neq \frac{\pi}{2},\frac{3\pi}{2}  $ ）</p><h3 id="T29">T29</h3><blockquote><p>设 $  f(x)  $ 二阶可导，$  f(1)&gt;0  $，$\displaystyle \lim\limits_{x\to0^+}\frac{f(x)}{x}&lt;0 $，证明：$  f(x)f’‘(x)+[f’(x)]^2=0  $ 在 $(0,1)$ 至少有两个根</p></blockquote><p><strong>证明</strong>：</p><p>由 $\displaystyle \lim\limits_{x\to0^+}\frac{f(x)}{x}&lt;0  $ 得 $  f(0)=0  $，$  f’(0)&lt;0  $；又 $  f(1)&gt;0  $，故 $  \exists \xi_1\in(0,1)  $ 使 $  f(\xi_1)=0  $（零点定理 ），$  \exists \xi_2\in(0,\xi_1)  $ 使 $  f’(\xi_2)=0  $（因 $  f(0)=0  $，$  f(\xi_1)=0  $，Rolle 定理 ）。</p><p>构造 $  F(x)=f(x)f’(x)  $，则 $  F(0)=F(\xi_2)=F(\xi_1)=0  $。</p><p>对 $  F(x)  $ 用 Rolle 定理，$\exists \eta_1\in(0,\xi_2)$，$\eta_2\in(\xi_2,\xi_1)$ 使 $  F’(\eta_1)=F’(\eta_2)=0  $，即 $  f(\eta)f’‘(\eta)+[f’(\eta)]^2=0  $，故至少两个根</p><h3 id="T30">T30</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 二阶可导，$  f’(a)=f’(b)=0  $，证明：$\exists \xi\in(a,b)$ 使 $  f’‘(\xi)f(\xi)-[f’(\xi)]^2=0  $</p></blockquote><p><strong>证明</strong>：</p><p>构造 $\displaystyle F(x)=\frac{f’(x)}{f(x)}  $（$  f(x)\neq0  $ 时 ），因 $  f’(a)=f’(b)=0  $，则 $  F(a)=F(b)=0  $（若 $  f(a),f(b)\neq0  $ ）</p><p>由 Rolle 定理，$\exists \xi\in(a,b)$ 使 $  F’(\xi)=0  $，计算得 $\displaystyle \frac{f’‘(\xi)f(\xi)-[f’(\xi)]^2}{f^2(\xi)}=0  $，即 $  f’‘(\xi)f(\xi)-[f’(\xi)]^2=0  $。</p><p>若 $  f(x)  $ 有零点，结合 $  f’(a)=f’(b)=0  $ 用极值点性质，同理可证（调整构造函数为 $\displaystyle F(x)=\frac{f’(x)}{e^{kx}f(x)}  $ 消去零点影响 ）</p><h3 id="T31">T31</h3><blockquote><p>设 $  f(x)  $ 在 $[-2,2]$ 二阶可导，$|f(x)|&lt;1$，$[f(0)]^2 + [f’(0)]^2 = 4$，证明：$\exists \xi\in(-2,2)$ 使 $ f’'(\xi)+f(\xi)=0$</p></blockquote><p><strong>证明</strong>：</p><p>构造 $ F(x)=f^2(x)+[f’(x)]^2$，则 $ F(0)=4$。</p><p>由拉格朗日中值定理，$\exists x_1\in(-2,0)$，$x_2\in(0,2)$ 使<br>$$<br>f’(x_1)=\frac{f(0)-f(-2)}{2}\quad f’(x_2)=\frac{f(2)-f(0)}{2}<br>$$<br>因 $|f(x)|&lt;1$，故 $|f’(x_1)|&lt;1$，$|f’(x_2)|&lt;1$，则 $F(x_1)&lt;1 + 1 = 2$，$F(x_2)&lt;2$</p><p>$F(x)$ 在 $[x_1,x_2]$ 连续，最大值在内部取到，设最大值点为 $x_0$，则 $F’(x_0)=0$，即<br>$$<br>2f(x_0)f’(x_0)+2f’(x_0)f’‘(x_0)=0<br>$$<br>若 $f’(x_0)=0$，则 $F(x_0)=f^2(x_0)=4$，与 $|f(x)|&lt;1$ 矛盾，故 $f(x_0) + f’‘(x_0)=0$，即 $\exists \xi=x_0\in(-2,2)$ 使 $f’'(\xi)+f(\xi)=0$</p><h3 id="T32">T32</h3><blockquote><p>设 $  f(x)  $ 在 $[1,2]$ 可导，证明：$\exists \xi\in(1,2)$ 使 $f’(\xi)\xi -f(\xi)=f(2)-2f(1)$</p></blockquote><p><strong>证明</strong>：</p><p>令 $\displaystyle F(x)=\frac{f(x)}{x}$，$\displaystyle G(x)=\frac{1}{x}$，则 $F(x)$，$G(x)$ 在 $[1,2]$ 可导，$G’(x)\neq0$</p><p>由柯西中值定理，$\exists \xi\in(1,2)$ 使 $\displaystyle \frac{F(2)-F(1)}{G(2)-G(1)}=\frac{F’(\xi)}{G’(\xi)}$</p><p>计算得<br>$$<br>\frac{\displaystyle \frac{f(2)}{2}-\frac{f(1)}{1}}{\displaystyle \frac{1}{2}-1}=\frac{\displaystyle \frac{f’(\xi)\xi - f(\xi)}{\xi^2}}{\displaystyle -\frac{1}{\xi^2}}<br>$$<br>即<br>$$<br>f’(\xi)\xi -f(\xi)=f(2)-2f(1)<br>$$</p><h3 id="T33">T33</h3><blockquote><p>设 $  f(x)  $ 在 $[a,b]$ 连续、$(a,b)$ 可导（$  a&gt;0  $ ），证明：$\exists \xi,\eta\in(a,b)$ 使 $  f’(\xi)=\frac{(a + b)f’(\eta)}{2\eta}  $</p></blockquote><p><strong>证明</strong>：</p><ul><li><p>对 $  f(x)  $ 和 $  x^2  $ 用 <strong>柯西中值定理</strong>：</p><p>存在 $  \eta\in(a,b)  $，使<br>$$<br>\frac{f(b)-f(a)}{b^2 - a^2} = \frac{f’(\eta)}{2\eta}<br>$$</p></li><li><p>对 $  f(x)  $ 用 <strong>拉格朗日中值定理</strong>：</p><p>存在 $  \xi\in(a,b)  $，使 $  f(b)-f(a) = f’(\xi)(b - a)  $</p></li></ul><p>联立两式，化简得<br>$$<br>f’(\xi)=\frac{(a + b)f’(\eta)}{2\eta}<br>$$</p><h3 id="T34">T34</h3><blockquote><p>设 $  f(x)  $ 在 $[1,2]$ 连续、$(1,2)$ 可导（$f’(x)\neq0  $ ），证明：$\exists \xi,\eta,\gamma\in(1,2)$ 使 $\displaystyle \frac{f’(\gamma)}{f’(\xi)} = \frac{\xi}{\eta}$</p></blockquote><p><strong>证明</strong>：</p><ul><li><p>对 $  f(x)  $ 和 $  \ln x  $ 用 <strong>柯西中值定理</strong>：</p><p>存在 $\xi\in(1,2)  $，使<br>$$<br>\frac{f(2)-f(1)}{\ln 2 - \ln 1} = \frac{f’(\xi)}{\frac{1}{\xi}}<br>$$</p></li><li><p>对 $  f(x)  $ 和 $\ln x$ 用 <strong>拉格朗日中值定理</strong>：</p><p>存在 $\gamma,\eta \in(1,2)  $，使<br>$$<br>\frac{f(2)-f(1)}{\ln 2 - \ln 1} = \frac{f’(\gamma)}{\frac{1}{\eta}}<br>$$</p></li></ul><p>联立化简得<br>$$<br>\displaystyle \frac{f’(\gamma)}{f’(\xi)} = \frac{\xi}{\eta}<br>$$</p><h3 id="T35">T35</h3><blockquote><p>设 $  f(x)  $ 在 $[0,\frac{\pi}{2}]$ 二阶可导（$  f(0)=0  $ ），证明：$\displaystyle \exists \xi,\eta,\omega\in(0,\frac{\pi}{2}) $ 使 $\displaystyle f’(\xi)=\frac{\pi}{2} \cdot \eta \cdot \sin 2\xi \cdot f’'(\omega)  $</p></blockquote><p><strong>证明</strong>：</p><ul><li><p>对 $  f(x)  $ 和 $  \cos2x  $ 用 <strong>柯西中值定理</strong>：</p><p>存在 $\xi \in(0,\frac{\pi}{2})  $，使<br>$$<br>\frac{f(\frac{\pi}{2})-f(0)}{-\frac{1}{2}[\cos \pi - \cos 0]} = \frac{f’(\xi)}{\sin 2\xi}<br>$$</p></li><li><p>对 $  f(x)  $ 在 $[0,\frac{\pi}{2}]$ 用 <strong>拉格朗日中值定理</strong>：</p><p>存在 $\eta ,\omega \in(0,\frac{\pi}{2})  $，使<br>$$<br>\begin{align*}<br>f(\frac{\pi}{2})-f(0) &amp;= f’(\eta)\cdot \frac{\pi}{2} \<br>&amp;=\frac{\pi}{2} \cdot  \left(f’(\eta)-f’(0)\right)\<br>&amp;=\frac{\pi}{2} \cdot \eta \cdot f’'(\omega)<br>\end{align*}<br>$$</p></li></ul><p>联立化简得<br>$$<br>f’(\xi)=\frac{\pi}{2} \cdot \eta \cdot \sin 2\xi \cdot f’'(\omega)<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流行积分不等式</title>
      <link href="/2025/07/29/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E6%B5%81%E8%A1%8C%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
      <url>/2025/07/29/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E6%B5%81%E8%A1%8C%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="流行积分不等式">流行积分不等式</h2><p>并不是有多流行，只是这个不等式的名字就叫流行不等式</p><blockquote><p>设 $f(x)$ 在 $[a,b]$ 上可微，且当 $ x \in(a,b)$ 时，$ \displaystyle 0 &lt; f’(x) &lt; \frac{2}{n+1}$，$f(a)=0$，则有 $\displaystyle \left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2&gt;\int_{a}^{b}f^{2n+1}(x), \mathrm{d}x$</p></blockquote><p><strong>证明：</strong></p><p><strong>法一：直接构造变限积分函数求导</strong></p><p>令<br>$$<br>F(x)=\left[\int_{a}^{x}f^n(t), \mathrm{d}t\right]^2-\int_{a}^{x}f^{2n+1}(t), \mathrm{d}t<br>$$<br>要证 $  F(b)&gt;0  $，由 $  F(a)=0  $，即证 $  F^\prime(x)&gt;0  $<br>$$<br>\begin{align*}<br>F^\prime(x)&amp;=2f^n(x)\int_{a}^{x}f^n(t), \mathrm{d}t - f^{2n+1}(x)\<br>&amp;= f^n(x)\left[2\int_{a}^{x}f^n(t), \mathrm{d}t - f^{n+1}(x)\right]<br>\end{align*}<br>$$<br>令<br>$$<br>g(x)=2\int_{a}^{x}f^n(t), \mathrm{d}t - f^{n+1}(x)<br>$$</p><p>$$<br>\begin{align*}<br>g^\prime(x)&amp;=2f^n(x)-(n+1)f^n(x)f^\prime(x)\<br>&amp;=f^n(x)\left[2-(n+1)f^\prime(x)\right]<br>\end{align*}<br>$$</p><p>由 $  f(a)=0  $，$  f^\prime(x)&gt;0  $，故 $  f(x)&gt;0  $，$  f^n(x)&gt;0  $</p><p>且<br>$$<br>0&lt;f’\left(x\right)&lt;\frac{2}{n+1}<br>$$<br>故<br>$$<br>\begin{align*}<br>g^\prime(x)&amp;&gt;0 \<br>g(x)&gt;g&amp;(a)=0<br>\end{align*}<br>$$<br>则<br>$$<br>\begin{align*}<br>F^\prime(x)&amp;&gt;0\<br>\Rightarrow F(x)&gt;F&amp;(a)=0<br>\end{align*}<br>$$<br>即<br>$$<br>\left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2&gt;\int_{a}^{b}f^{2n+1}(x), \mathrm{d}x<br>$$<br><strong>法二：柯西中值定理</strong></p><p>由 $  f(a)=0  $，$  f^\prime(x)&gt;0  $，$  \Rightarrow f(x)  $ 在 $(a,b)$ 上恒正</p><p>要证<br>$$<br>\left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2&gt;\int_{a}^{b}f^{2n+1}(x), \mathrm{d}x<br>$$<br>即证<br>$$<br>\frac{\displaystyle \left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2}{\displaystyle \int_{a}^{b}f^{2n+1}(x), \mathrm{d}x}&gt;1<br>$$<br>令<br>$$<br>\begin{align*}<br>\displaystyle F(x)&amp;=\left[\int_{a}^{x}f^n(t), \mathrm{d}t\right]^2,\quad F(a)=0\<br>\displaystyle G(x)&amp;=\int_{a}^{x}f^{2n+1}(t), \mathrm{d}t,\quad G(a)=0<br>\end{align*}<br>$$<br>则原式可写成：<br>$$<br>\frac{\displaystyle \left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2 - 0}{\displaystyle \int_{a}^{b}f^{2n+1}(x), \mathrm{d}x - 0}=\frac{F(b)-F(a)}{G(b)-G(a)}<br>$$<br>由柯西中值定理得：<br>$$<br>\frac{\displaystyle \left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2}{\displaystyle \int_{a}^{b}f^{2n+1}(x), \mathrm{d}x}=\frac{F^\prime(\xi)}{G^\prime(\xi)}=\frac{\displaystyle 2f^n(\xi)\int_{a}^{\xi}f^n(t), \mathrm{d}t}{f^{2n+1}(\xi)}<br>$$<br>其中 $\xi \in \left(a,b\right)$</p><p>令<br>$$<br>H(x)=\int_{a}^{x}f^n(t), \mathrm{d}t,\quad H(a)=0<br>$$<br>则<br>$$<br>\begin{align*}<br>\frac{F^\prime(\xi)}{G^\prime(\xi)}&amp;=\frac{2(H(\xi)-H(a))}{f^{n+1}(\xi)-f^{n+1}(a)}=\frac{2H^\prime(\eta)}{(n+1)f^n(\eta)f^\prime(\eta)}\<br>&amp;=\frac{2f^n(\eta)}{(n+1)f^n(\eta)f^\prime(\eta)}\<br>&amp;=\frac{2}{(n+1)f^\prime(\eta)}&gt;1<br>\end{align*}<br>$$<br>其中 $\eta\in\left(a,\xi\right)$</p><p>即<br>$$<br>\frac{\displaystyle \left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2}{\displaystyle \int_{a}^{b}f^{2n+1}(x), \mathrm{d}x}&gt;1<br>$$</p><p>$$<br>\left[\int_{a}^{b}f^n(x), \mathrm{d}x\right]^2&gt;\int_{a}^{b}f^{2n+1}(x), \mathrm{d}x<br>$$</p><p>下面看一个具体例子</p><blockquote><p>设 $f(x)$ 在 $[0,1]$ 可微，且当 $x \in(0,1)$ 时，$0 &lt; f’(x) &lt; 1$，$f(0)=0$</p><p>证明：$\displaystyle \left[\int_{0}^{1}f(x), \mathrm{d}x\right]^2&gt;\int_{0}^{1}f^3(x), \mathrm{d}x$</p></blockquote><p><strong>证明：</strong></p><p><strong>法一：</strong></p><p>令<br>$$<br>F(x)=\left[\int_{0}^{x}f(t), \mathrm{d}t\right]^2-\int_{0}^{x}f^3(t), \mathrm{d}t,\quad   F(0)=0<br>$$<br>即证 $  F(1)&gt;0  $<br>$$<br>\begin{align*}<br>F^\prime(x)&amp;=2f(x)\cdot\int_{0}^{x}f(t), \mathrm{d}t-f^3(x)\<br>&amp;  = f(x)\left[2\int_{0}^{x}f(t), \mathrm{d}t - f^2(x)\right]<br>\end{align*}<br>$$<br>令<br>$$<br>G(x)=2\int_{0}^{x}f(t), \mathrm{d}t - f^2(x),\quad   G(0)=0<br>$$</p><p>$$<br>\begin{align*}<br>G^\prime(x)&amp;=2f(x)-2f(x)f^\prime(x)\<br>&amp;=2f(x)[1 - f^\prime(x)]&gt;0<br>\end{align*}<br>$$</p><p>故 $  G(x)&gt;G(0)=0  $</p><p>由 $  f(0)=0  $，$  f^\prime(x)&gt;0  $，故 $  f(x)&gt;0  $ 在 $  (0,1)  $ 上恒成立</p><p>则<br>$$<br>F^\prime(x)=f(x)G(x)&gt;0<br>$$<br>故<br>$$<br>\begin{align*}<br>F(x)&amp;&gt;F(0)=0\<br>\Rightarrow F(1)=&amp;\left[\int_{0}^{1}f(x), \mathrm{d}x\right]^2-\int_{0}^{1}f^3(x), \mathrm{d}x&gt;0\<br>\end{align*}<br>$$</p><p>$$<br>\left[\int_{0}^{1}f(x), \mathrm{d}x\right]^2&gt;\int_{0}^{1}f^3(x), \mathrm{d}x<br>$$</p><p><strong>法二：</strong></p><p>令<br>$$<br>\begin{align*}<br>F(x)&amp;=\left[\int_{0}^{x}f(t), \mathrm{d}t\right]^2,\quad F(0)=0\<br>G(x)&amp;=\int_{0}^{x}f^3(t), \mathrm{d}t,\quad G(0)=0<br>\end{align*}<br>$$<br>则<br>$$<br>\begin{align*}<br>\frac{\displaystyle \left[\int_{0}^{1}f(t), \mathrm{d}t\right]^2}{\displaystyle \int_{0}^{1}f^3(t), \mathrm{d}t}&amp;=\frac{\displaystyle \left[\int_{0}^{1}f(t), \mathrm{d}t\right]^2 - 0}{\displaystyle \int_{0}^{1}f^3(t), \mathrm{d}t - 0}\<br>&amp;=\frac{F(1)-F(0)}{G(1)-G(0)}\<br>&amp;=\frac{F^\prime(\xi)}{G^\prime(\xi)}\<br>&amp;=\frac{\displaystyle 2f(\xi)\cdot\int_{0}^{\xi}f(t), \mathrm{d}t}{f^3(\xi)}\<br>&amp;=\frac{\displaystyle 2\left(\int_{0}^{\xi}f(t), \mathrm{d}t - 0\right)}{f^2(\xi)-0}\<br>&amp;=\frac{2f(\eta)}{2f(\eta)f^\prime(\eta)}\<br>&amp;=\frac{1}{f^\prime(\eta)}&gt;1<br>\end{align*}<br>$$<br>其中 $\xi \in \left(a,b\right),\eta\in\left(0,\xi\right)$</p><p>即<br>$$<br>\frac{\displaystyle \left[\int_{0}^{1}f(t), \mathrm{d}t\right]^2}{\displaystyle \int_{0}^{1}f^3(t), \mathrm{d}t}&gt;1<br>$$</p><p>$$<br>\Rightarrow\left[\int_{0}^{1}f(x), \mathrm{d}x\right]^2&gt;\int_{0}^{1}f^3(x), \mathrm{d}x<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一则有关伽马函数与三角函数的积分问题</title>
      <link href="/2025/07/04/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E4%B8%8E%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
      <url>/2025/07/04/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E4%B8%8E%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>计算积分  $\displaystyle \int_{0}^{1} \ln [\Gamma(x)] \sin \pi x , \mathrm{d}x$</p></blockquote><p>看到 $\ln$ 套着 $\Gamma$，并且积分上下限是 $[0,1]$，很自然地想到余元公式</p><p>记<br>$$<br>I=\displaystyle \int_{0}^{1} \ln [\Gamma(x)] \sin \pi x , \mathrm{d}x<br>$$<br>令 $t=1-x$，原式变为<br>$$<br>I=\int_{0}^{1} \ln [\Gamma(1-t)] \sin \left(\pi \left(1-t\right)\right) , \mathrm{d}t<br>$$<br>化简得<br>$$<br>I=\int_{0}^{1} \ln [\Gamma(1-x)] \sin \pi x , \mathrm{d}x<br>$$<br>与原来的 $I$ 相加得<br>$$<br>\begin{align*}<br>2I &amp;= \int_{0}^{1} \ln [\Gamma(1-x)\Gamma(x)] \sin \pi x , \mathrm{d}x\<br>&amp;= \int_{0}^{1} \ln \left( \frac{\pi}{\sin \pi x} \right) \cdot \sin \pi x , dx<br>\end{align*}<br>$$<br>即<br>$$<br>\begin{align*}<br>I &amp;= \frac{\ln \pi}{2} \int_{0}^{1} \sin \pi x , \mathrm{d}x- \frac{1}{2} \int_{0}^{1} \sin \pi x \ln (\sin \pi x) , \mathrm{d}x\<br>&amp;=\frac{\ln \pi}{\pi} - \frac{1}{\pi} \int_{0}^{\pi/2} \sin x \ln (\sin x) , \mathrm{d}x<br>\end{align*}<br>$$<br>记<br>$$<br>\displaystyle  J = \int_{0}^{\pi/2} \sin x \ln (\sin x) , \mathrm{d}x<br>$$<br>本题的核心便是求解这个积分，下面给出两种求法</p><h2 id="法一：">法一：</h2><p>转化成二重积分<br>$$<br>\begin{align*}<br>J &amp;= \int_{0}^{\pi/2} \int_{\sin x}^{1} \frac{\sin x}{y} , \mathrm{d}y , \mathrm{d}x\<br>&amp; = \int_{0}^{1} \int_{0}^{\arcsin y} \frac{\sin x}{y} , \mathrm{d}x , \mathrm{d}y \<br>&amp; = \int_{0}^{1} \frac{\sqrt{1-y^2}-1}{y} , \mathrm{d}y<br>\end{align*}<br>$$<br>由于<br>$$<br>\int_{0}^{1} \frac{\sqrt{1-y^2}-1}{y} , \mathrm{d}y=-\int_{0}^{1} \frac{y}{1 + \sqrt{1-y^2}} , \mathrm{d}y<br>$$<br>令  $t=1 +\sqrt{1-y^2}$</p><p>则<br>$$<br>\begin{align*}<br>\int_{0}^{1} \frac{\sqrt{1-y^2}-1}{y} , \mathrm{d}y &amp;=-\int_{0}^{1} \frac{y}{1 + \sqrt{1-y^2}} , \mathrm{d}y\<br>&amp;=-\int_{1}^{2}\frac{t-1}{t}, \mathrm{d}t\<br>&amp;=\ln 2-1<br>\end{align*}<br>$$<br>故<br>$$<br>I = \frac{1}{\pi} \left( 1 + \ln \frac{\pi}{2} \right)<br>$$</p><h2 id="法二">法二</h2><p>考虑<br>$$<br>F\left(a\right)=\int_{0}^{\frac{\pi}{2}}\sin^a x, \mathrm{d}x<br>$$<br>其导数<br>$$<br>F’\left(a\right)=\int_{0}^{\frac{\pi}{2}}\sin^a x\cdot \ln\sin x, \mathrm{d}x<br>$$<br>$F’\left(1\right)$ 便是我们要求的值</p><p>对于 $F\left(a\right)$，我们可以通过适当变形将其化为 $\mathrm{Beta}$ 函数</p><p>令 $t = \sin^2 x$，则 $, \mathrm{d}t = 2 \sin x \cos x , \mathrm{d}x$，$\displaystyle \mathrm{d}x = \frac{, \mathrm{d}t}{2\sqrt{t} \sqrt{1-t}}$<br>$$<br>\begin{align*}<br>F(a) &amp;= \int_{0}^{1} t^{a/2} \cdot \frac{, \mathrm{d}t}{2\sqrt{t} \sqrt{1-t}} \<br>&amp;= \frac{1}{2} \int_{0}^{1} t^{\frac{a-1}{2}}(1-t)^{-\frac{1}{2}}, \mathrm{d}t\<br>&amp; = \frac{1}{2} B \left( \frac{a+1}{2}, \frac{1}{2} \right)\<br>&amp;=\frac{\sqrt{\pi}}{2}\cdot \frac{ \Gamma\left(\frac{a+1}{2}\right)}{\Gamma\left(\frac{a}{2}+1\right)}<br>\end{align*}<br>$$<br>为简化求导过程，我们对 $F(a)$ 取自然对数，然后对两边关于 $a$ 求导：</p><p>$$<br>\ln F(a) = \ln \frac{\sqrt{\pi}}{2} + \ln \Gamma \left( \frac{a+1}{2} \right) - \ln \Gamma \left( \frac{a}{2} + 1 \right)<br>$$</p><p>对两边关于 $a$ 求导：</p><p>$$<br>\frac{F’(a)}{F(a)} = \frac{1}{2} \cdot \frac{\Gamma’ \left( \frac{a+1}{2} \right)}{\Gamma \left( \frac{a+1}{2} \right)} - \frac{1}{2} \cdot \frac{\Gamma’ \left( \frac{a}{2} + 1 \right)}{\Gamma \left( \frac{a}{2} + 1 \right)}<br>$$</p><p>我们引入 <strong>digamma</strong> 函数，记作 $\psi(z)$：</p><p>$$<br>\psi(z) = \frac{\Gamma’(z)}{\Gamma(z)}<br>$$</p><p>因此，上式可表示为：</p><p>$$<br>\frac{F’(a)}{F(a)} = \frac{1}{2} \psi \left( \frac{a+1}{2} \right) - \frac{1}{2} \psi \left( \frac{a}{2} + 1 \right)<br>$$</p><p>将 $F(a)$ 乘到右边：</p><p>$$<br>F’(a) = F(a) \cdot \left[ \frac{1}{2} \psi \left( \frac{a+1}{2} \right) - \frac{1}{2} \psi \left( \frac{a}{2} + 1 \right) \right]<br>$$<br>代入 $F\left(a\right)$ 的值：<br>$$<br>F’(a) = \frac{\sqrt{\pi}}{2} \cdot \frac{\Gamma\left(\frac{a+1}{2}\right)}{\Gamma\left(\frac{a}{2}+1\right)} \cdot \left[ \frac{1}{2} \psi\left( \frac{a+1}{2} \right) - \frac{1}{2} \psi\left( \frac{a}{2}+1 \right) \right]<br>$$</p><p>进一步化简：</p><p>$$<br>F’(a) = \frac{\sqrt{\pi}}{4} \cdot \frac{\Gamma\left(\frac{a+1}{2}\right)}{\Gamma\left(\frac{a}{2}+1\right)} \cdot \left[ \psi\left( \frac{a+1}{2} \right) - \psi\left( \frac{a}{2}+1 \right) \right]<br>$$</p><p>因此，$F(a)$ 的导数为：</p><p>$$<br>F’(a) = \frac{\sqrt{\pi}}{4} \cdot \frac{\Gamma\left(\frac{a+1}{2}\right)}{\Gamma\left(\frac{a}{2}+1\right)} \cdot \left[ \psi\left( \frac{a+1}{2} \right) - \psi\left( \frac{a}{2}+1 \right) \right]<br>$$<br>将 $a=1$ 代入<br>$$<br>F’(1) = \frac{\sqrt{\pi}}{4} \cdot \frac{\Gamma\left(1\right)}{\Gamma\left(\frac{3}{2}\right)} \cdot \left[ \psi\left(1\right) - \psi\left( \frac{3}{2}\right) \right]<br>$$<br>由 <strong>digamma</strong> 函数的性质，有<br>$$<br>\begin{align*}<br>\psi\left(1\right)=-\gamma   \quad \quad \psi\left(\frac{3}{2}\right)&amp;=\psi\left(\frac{1}{2}\right)+2\<br>&amp;=2-\gamma-2\ln2\<br>\end{align*}<br>$$<br>故<br>$$<br>\begin{align*}<br>F’\left(1\right)&amp;=\int_{0}^{\frac{\pi}{2}}\sin x\cdot \ln\sin x, \mathrm{d}x\<br>&amp;=\frac{\sqrt{\pi}}{4}\cdot \frac{1}{\frac{\sqrt{\pi}}{2}}\cdot \left(2\ln2-2\right)\<br>&amp;=\ln2-1<br>\end{align*}<br>$$<br>即<br>$$<br>I = \frac{1}{\pi} \left( 1 + \ln \frac{\pi}{2} \right)<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bohr-Mollerup 定理</title>
      <link href="/2025/07/02/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/Bohr-Mollerup%20%E5%AE%9A%E7%90%86/"/>
      <url>/2025/07/02/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/Bohr-Mollerup%20%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>最近在读东南大学李逸教授写的《基本分析讲义》，在书中第3.1.5节给出了一个有关 $\Gamma$ 函数的刻画定理，动手算了算发现其实证明起来不难，但书中给出的证明过程个人认为非常精妙，为<strong>对数凸函数</strong>的刻画问题提供了一种<strong>通用框架</strong></p><h1>$\mathrm{Bohr-Mollerup}$ 定理</h1><blockquote><p>假设函数 $f : (0, +\infty) \rightarrow (0, +\infty)$ 满足条件：</p><ul><li><p>$f(x+1) = xf(x)$</p></li><li><p>$\ln f(x)$ 是凸的</p></li><li><p>$f(1) = 1$</p></li></ul><p>则函数 $f$ 由下面极限给出<br>$$<br>\displaystyle f(x) = \lim_{n \to \infty} \frac{n^x\cdot n!}{x(x+1) \cdots (x+n)}<br>$$</p></blockquote><p><strong>证</strong>:</p><p>由条件 (i) 和 (iii) 得<br>$$<br>f(n) = (n-1)! \quad \left(n\in \mathbb{N}^+\right)<br>$$<br>由条件(ii)，对 $\forall x\in(0,1)$，由于<br>$$<br>n-1&lt;n&lt;n+x&lt;n+1<br>$$<br>有<br>$$<br>\begin{align*}<br>\frac{\ln {f(n)}-\ln {f(n-1)}}{n-\left(n-1\right)}\leq \frac{\ln {f(n+x)}-\ln {f(n)}}{\left(n+x\right)-n}&amp;\leq \frac{\ln {f(n+1)}-\ln {f(n)}}{\left(n+1\right)-n}\<br>\Rightarrow x\ln\left(n-1\right)\leq \ln \frac{f\left(n+x\right)}{f\left(n\right)}&amp;\leq x\ln n<br>\end{align*}<br>$$<br>适当化简，得<br>$$<br>\left(n-1\right)^x\left(n-1\right)!\leq f\left(n+x\right)\leq n^x\left(n-1\right)!<br>$$<br>为接近题目所给的极限，最好把 $n-1$ 改成 $n$<br>$$<br>n^x\cdot n!\leq f\left(n+x+1\right)\leq \left(n+1\right)^x\cdot n!<br>$$<br>由 $f\left(x\right)$ 的递推式，得<br>$$<br>\frac{n^x\cdot n!}{x(x+1) \cdots (x+n)}\leq f\left(x\right)\leq \frac{ \left(n+1\right)^x\cdot n!}{x(x+1) \cdots (x+n)}<br>$$<br>对不等式最右边项作变形<br>$$<br>\frac{n^x\cdot n!}{x(x+1) \cdots (x+n)}\leq f\left(x\right)\leq \frac{ n^x\cdot n!}{x(x+1) \cdots (x+n)}\cdot \left(1+\frac{1}{n}\right)^x<br>$$<br>取上下极限即得<br>$$<br>\displaystyle f(x) = \lim_{n \to \infty} \frac{n^x\cdot n!}{x(x+1) \cdots (x+n)}<br>$$</p><p>下面是李逸老师在《基本分析讲义》中给的证明过程</p><p>(1) 首先假设 $n \in \mathbb{N}$ 且 $n \geq 2$, $x \in (0,1]$. 从条件 (i) 和 (iii) 得 $f(n) = (n-1)!$ . 令<br>$$<br>F(x) := \ln f(x).<br>$$<br>根据条件 (ii) 和分解 $n + x = x(n+1) + (1-x)n$ 得到<br>$$<br>F(n+x) \leq xF(n+1) + (1-x)F(n).<br>$$<br>所以<br>$$<br>\frac{F(n+x) - F(n)}{x} \leq F(n+1) - F(n).<br>$$<br>另一方面，利用分解 $\displaystyle n = \frac{x}{1+x}(n-1) + \frac{1}{1+x}(n+x)$ 得到<br>$$<br>F(n) \leq \frac{x}{1+x}F(n-1) + \frac{1}{1+x}F(n+x).<br>$$<br>所以<br>$$<br>(1+x)F(n) \leq xF(n-1) + F(n+x) \implies F(n) - F(n-1) \leq \frac{F(n+x) - F(n)}{x}.<br>$$<br>最后推出<br>$$<br>\ln(n-1) \leq \frac{\ln[f(x+n)] - \ln[(n-1)!]}{x} \leq \ln n.<br>$$<br>即<br>$$<br>\ln [(n-1)^x(n-1)!] \leq \ln[f(x+n)] \leq \ln[n^x(n-1)!].<br>$$<br>或<br>$$<br>(n-1)^x(n-1)! \leq f(x+n) = (x+n-1) \cdots (x+1)f(x) \leq n^x(n-1)!.<br>$$<br>由此得到 $f(x)$ 的估计<br>$$<br>\frac{(n-1)^x(n-1)!}{x(x+1) \cdots (x+n-1)} \leq f(x) \leq \frac{n^x(n-1)!}{x(x+1) \cdots (x+n-1)}.<br>$$<br>等价地<br>$$<br>\frac{n}{n+x}f(x) \leq \frac{n^xn!}{x(x+1) \cdots (x+n)} \leq f(x), \text{任意 } n \geq 1.<br>$$<br>因此结论对任意 $x \in (0,1]$ 成立.</p><p>(2) 对一般的 $x &gt; 0$，存在 $k \in \mathbb{N}$ 满足 $k &lt; x \leq k+1$ 和 $0 &lt; x - k \leq 1$.从而得到<br>$$<br>f(x-k) = \lim_{n \to \infty} \frac{n^{x-k}n!}{(x-k)(x-k+1) \cdots (x-k+n)}<br>$$<br>和<br>$$<br>\begin{align*}<br>f(x) &amp;= f(x-1+1) = (x-1)f(x-1) = \cdots\<br>&amp;= (x-k)(x-k+1) \cdots (x-1)f(x-k) \<br>&amp;= \lim_{n \to \infty} \frac{n^n n!}{n^k x(x+1) \cdots (x-k+n)}\<br>&amp;= \lim_{n \to \infty} \frac{n^n n!}{x(x+1) \cdots (x+n)} \cdot \frac{(x-k+n+1) \cdots (x+n)}{n^k}\<br>&amp;= \lim_{n \to \infty} \frac{n^n n!}{x(x+1) \cdots (x+n)} \cdot \square<br>\end{align*}<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dirichlet 核与 Dirichlet 积分</title>
      <link href="/2025/07/01/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/Dirichlet%E6%A0%B8/"/>
      <url>/2025/07/01/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/Dirichlet%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h1>$\mathrm{Dirichlet}$ 核</h1><blockquote><p>在区间 $\left(0,\pi\right)$ 上定义一族函数 $D_n\left(x\right)=\displaystyle \frac{\sin {\frac{2n+1}{2}x}}{2\sin {\frac{x}{2}}},n\in\mathbb{N}^+$，我们称 $D_n$ 为 $\mathrm{Dirichlet}$ 核</p></blockquote><p>我们对 $D_n$ 进行化简，由积化和差得<br>$$<br>\begin{align*}<br>2\sin\frac{t}{2}\cos kt &amp;= \sin\left( \frac{t}{2} + kt \right) - \sin\left( kt - \frac{t}{2} \right)\<br>\sum_{k=1}^{n} 2\sin\frac{t}{2}\cos kt &amp;= \sum_{k=1}^{n} \left[ \sin\left( kt + \frac{t}{2} \right) - \sin\left( kt - \frac{t}{2} \right) \right]\<br>&amp;= \sin\left( nt + \frac{t}{2} \right) - \sin\frac{t}{2}\<br>\Rightarrow \sin\left( nt + \frac{t}{2} \right) &amp;= \sin\frac{t}{2} + \sum_{k=1}^{n} 2\sin\frac{t}{2}\cos kt<br>\end{align*}<br>$$<br>故<br>$$<br>\frac{\sin\left( nt + \frac{t}{2} \right)}{2\sin\frac{t}{2}} = \frac{1}{2} + \sum_{k=1}^{n} \cos kt \quad (\sin\frac{t}{2} \neq 0)<br>$$</p><h1>$\mathrm{Dirichlet}$ 积分</h1><p>虽然 $D_n(x)$ 在 $x = 0$ 时无定义，但容易证明 $ \displaystyle \lim_{x \to 0_+} D_n(x) = \frac{2n + 1}{2}$，因此 $D_n(x)$ 在 $[0, \pi] $ 上可积</p><p>下面我们先对 $D_n(x)$ 在 $[0,\pi]$ 上积分</p><h3 id="法一">法一</h3><p>直接利用上述化简式<br>$$<br>\begin{align*}<br>\int_{0}^{\pi}D_n\left(x\right), \mathrm{d}x &amp;= \int_{0}^{\pi}\left(\frac{1}{2} + \sum_{k=1}^{n} \cos kx \right), \mathrm{d}x\<br>&amp;=\frac{\pi}{2}+\sum_{k=1}^n\int_{0}^{\pi}\cos kx, \mathrm{d}x\<br>&amp;=\frac{\pi}{2}<br>\end{align*}<br>$$</p><h3 id="法二">法二</h3><p>我们记 $I_n$ 为 $\displaystyle \int_{0}^{\pi}D_n\left(x\right), \mathrm{d}x$</p><p>易知<br>$$<br>I_0=\int_{0}^{\pi}D_0\left(x\right), \mathrm{d}x=\frac{\pi}{2}<br>$$<br>且<br>$$<br>\begin{align*}<br>I_n-I_{n-1}&amp;=\int_{0}^{\pi}D_n\left(x\right), \mathrm{d}x-\int_{0}^{\pi}D_{n-1}\left(x\right), \mathrm{d}x\<br>&amp;= \int_{0}^{\pi} \frac{\sin\frac{2n+1}{2}x - \sin\frac{2n-1}{2}x}{2\sin\frac{x}{2}} dx\<br>&amp;=\int_{0}^{\pi} \frac{2\cos(nx)\sin\left( \frac{x}{2} \right)}{2\sin\frac{x}{2}} dx\<br>&amp;=\int_{0}^{\pi} \cos(nx) dx \<br>&amp;= 0<br>\end{align*}<br>$$<br>故  $\displaystyle I_n=I_0=\frac{\pi}{2}$</p><p>习惯上将此积分改写成下面这种形式，结构更简单<br>$$<br>\int_{0}^{\frac{\pi}{2}}\frac{\sin {\left(2n+1\right)x}}{\sin x}, \mathrm{d}x=\frac{\pi}{2}<br>$$<br>下面用 $D_n\left(x\right)$ 的积分求解 $\boldsymbol{\mathrm{Dirichlet}}$ <strong>积分</strong><br>$$<br>\int_{0}^{+\infty}\frac{\sin x}{x}, \mathrm{d}x=\frac{\pi}{2}<br>$$<br>考虑将其 $D_n$ 分母换为 $x$ 所产生的影响。由 $\mathrm{L’Hospital}$ 法则，有<br>$$<br>f(x) = \frac{1}{x} - \frac{1}{2\sin\frac{x}{2}} = O(x) \quad (x \to 0)<br>$$<br>因此 $f$ 在 $[0, \pi]$ 上 $\mathrm{Riemann}$ 可积。由 $\mathrm{Riemann-Lebesgue}$ 定理，有<br>$$<br>\lim_{n \to \infty} \int_{0}^{\pi} f(x) \sin\left( n + \frac{1}{2} \right) x , \mathrm{d}x = 0<br>$$<br>即<br>$$<br>\lim_{n \to \infty} \int_{0}^{\pi} \frac{\sin\left( n + \frac{1}{2} \right) x}{x} \mathrm{d}x = \lim_{n \to \infty} \int_{0}^{\pi} \frac{\sin\left( n + \frac{1}{2} \right) x}{2\sin\frac{x}{2}} \mathrm{d}x = \frac{\pi}{2}<br>$$<br>令<br>$$<br>t=\left(n+\frac{1}{2}\right)x<br>$$<br>原式化为<br>$$<br>\begin{align*}<br>\lim_{n \to \infty} \int_{0}^{\pi} \frac{\sin\left( n + \frac{1}{2} \right) x}{x} \mathrm{d}x &amp;= \lim_{n \to \infty} \int_{0}^{\left(n+\frac{1}{2}\right)\pi} \frac{\sin t}{t} \mathrm{d}t\<br>&amp;=\int_{0}^{+\infty} \frac{\sin x}{x} \mathrm{d}x\<br>&amp;=\frac{\pi}{2}<br>\end{align*}<br>$$<br>即<br>$$<br>\int_{0}^{+\infty} \frac{\sin x}{x} \mathrm{d}x=\frac{\pi}{2}<br>$$<br>下面用 $\boldsymbol{\mathrm{Dirichlet}}$ <strong>积分</strong>求解几道广义积分题目</p><h3 id="例1">例1</h3><blockquote><p>计算  $\displaystyle \int_{0}^{+\infty} \frac{\sin^2 x}{x^2} \mathrm{d}x$</p></blockquote><p>$$<br>\begin{align*}<br>\int_{0}^{+\infty} \frac{\sin^2 x}{x^2} , \mathrm{d}x &amp;= \int_{0}^{+\infty} \sin^2 x  , \mathrm{d}\left( -\frac{1}{x} \right) \<br>&amp;= -\left. \frac{\sin^2 x}{x} \right|<em>{0}^{+\infty} - \int</em>{0}^{+\infty} \left(-\frac{1}{x}\right) , \mathrm{d}(\sin^2 x) \<br>&amp;= -\left. \frac{\sin^2 x}{x} \right|<em>{0}^{+\infty} + \int</em>{0}^{+\infty} \frac{\sin 2x}{x} ,  \mathrm{d}x \<br>&amp;= \lim_{x \to 0^+} \frac{\sin^2 x}{x} - \lim_{x \to +\infty} \frac{\sin^2 x}{x} + \int_{0}^{+\infty} \frac{\sin 2x}{x} ,  \mathrm{d}x \<br>\end{align*}<br>$$</p><p>由于<br>$$<br>\int_{0}^{+\infty} \frac{\sin 2x}{x} , \mathrm{d}x \stackrel{t = 2x}{=} \int_{0}^{+\infty} \frac{\sin t}{t} , \mathrm{d}t = \frac{\pi}{2}<br>$$<br>从而<br>$$<br>\int_{0}^{+\infty} \frac{\sin^2 x}{x^2} , \mathrm{d}x = \frac{\pi}{2}<br>$$</p><h3 id="例2">例2</h3><blockquote><p>计算  $\displaystyle \int_{0}^{+\infty} \frac{\sin^4 x}{x^2} , \mathrm{d}x$</p></blockquote><p>$$<br>\begin{align*}<br>\int_{0}^{+\infty} \frac{\sin^4 x}{x^2} , \mathrm{d}x&amp;=\int_{0}^{+\infty} \frac{\left(\sin^2 x\right)\left(1-\cos^2 x\right)}{x^2} , \mathrm{d}x\<br>&amp;=\int_{0}^{+\infty} \left(\frac{\sin^2 x}{x^2}-\frac{\sin^2 x\cos^2 x}{x^2}\right) , \mathrm{d}x\<br>&amp;=\int_{0}^{+\infty} \left(\frac{\sin^2 x}{x^2}-\frac{\sin^2 2x}{4x^2}\right) , \mathrm{d}x\<br>&amp;=\int_{0}^{+\infty} \frac{\sin^2 x}{x^2}, \mathrm{d}x-\frac{1}{2}\cdot \int_{0}^{+\infty}\frac{\sin^2 2x}{\left(2x\right)^2}, \mathrm{d}\left(2x\right)\<br>&amp;=\frac{\pi}{2}-\frac{1}{2}\cdot \frac{\pi}{2}\<br>&amp;=\frac{\pi}{4}<br>\end{align*}<br>$$</p><h3 id="例3">例3</h3><blockquote><p>计算  $\displaystyle \int_{-\infty}^{+\infty}\sin \left(e^x\right), \mathrm{d}x$</p></blockquote><p>$$<br>\begin{align*}<br>\int_{-\infty}^{+\infty}\sin \left(e^x\right), \mathrm{d}x &amp;\stackrel{u = e^x}{=}\int_{0}^{+\infty}\frac{\sin u}{u}, \mathrm{d}u\<br>&amp;\ \ =\frac{\pi}{2}<br>\end{align*}<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fejér-Jackson 不等式及其推论</title>
      <link href="/2025/06/30/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/Fej%C3%A9r-Jackson%20%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
      <url>/2025/06/30/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/Fej%C3%A9r-Jackson%20%E4%B8%8D%E7%AD%89%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>Fejér-Jackson 不等式</h1><blockquote><p>当 $x\in\left(0,\pi\right)$ 时，$\displaystyle \sum_{k=1}^n \frac{1}{k}\sin{kx}&gt;0$</p></blockquote><p>**证明：<em><em>记 $f_n\left(x\right)=\displaystyle \sum_{k=1}^n \frac{1}{k}\sin{kx}$<br>$$<br>\begin{align</em>}<br>f_n’(x) &amp;= \sum\limits_{k = 1}^n \cos kx \<br>&amp;= \text{Re}\sum\limits_{k = 1}^n (e^{ix})^k \<br>&amp;= \text{Re}\left(e^{ix}\frac{e^{inx} - 1}{e^{ix} - 1}\right) \<br>&amp;= \frac{\cos\frac{(n + 1)x}{2}\cdot \sin\frac{nx}{2}}{\sin\frac{x}{2}}\<br>\end{align</em>}<br>$$<br>于是，$f_n’(x)$的所有零点满足<br>$$<br>\frac{nx}{2} = k\pi\ (k \in \mathbb{Z})<br>$$<br>以及<br>$$<br>\frac{(n + 1)x}{2} = \frac{\pi}{2} + k\pi\ (k \in \mathbb{Z})<br>$$<br>在$(0, \pi)$上, 这些零点从小到大排列为<br>$$<br>0 &lt; \frac{\pi}{n + 1} &lt; \frac{2\pi}{n} &lt; \frac{3\pi}{n + 1} &lt; \frac{4\pi}{n} &lt; \cdots &lt; \frac{2\lfloor n/2 \rfloor\pi}{n} \leq \pi.<br>$$<br>在$\displaystyle \left(0, \frac{\pi}{n + 1}\right)$上, $f_n’(x) &gt; 0$，于是，从 $0$ 开始往$x$轴正方向，每经过一个零点， $f_n’(x)$的符号就变化一次. 从而<br>$$<br>\frac{2\pi}{n}, \frac{4\pi}{n}, \cdots, \frac{2\lfloor n/2 \rfloor\pi}{n}<br>$$<br>是 $f_n(x)$ 的所有极小值点</p><p>下面用<strong>数学归纳法</strong>来证明 $f_n(x) &gt; 0$ 在 $(0, \pi)$ 上成立</p><p>(i) 首先当 $n = 1$ 时<br>$$<br>f_1(x) = \sin x<br>$$<br>结论显然成立</p><p>(ii) 下面假设 $f_{n - 1}(x) &gt; 0$ 在 $(0, \pi)$ 上成立（其中 $n \geq 2$），注意到，对 $j = 1, 2, \cdots, \lfloor n/2 \rfloor$<br>$$<br>f_n\left( \frac{2j\pi}{n} \right) = f_{n - 1}\left( \frac{2j\pi}{n} \right) + \sin\left( n \cdot \frac{2j\pi}{n} \right) = f_{n - 1}\left( \frac{2j\pi}{n} \right) &gt; 0,<br>$$<br>最后的不等号是因为归纳假设，于是，$f_n(x)$ 在所有极小值点处都大于 0，从而 $f_n(x) &gt; 0$ 在 $(0, \pi)$ 上恒成立</p><h1><strong>Fejér-Jackson 不等式的推论</strong></h1><blockquote><p>[一致有界性] 设 $x \in \mathbb{R}$，则存在与 $x$ 无关的常数 $M &gt; 0$ 使得  $\displaystyle \left| \sum_{k=1}^n \frac{\sin kx}{k} \right| &lt; M, , \forall n \in \mathbb{N}^+, , \forall x$   其中 $M$ 可取到 $2\sqrt{\pi}$</p></blockquote><p>我们先证明一个引理</p><blockquote><p>引理1：对任意正整数 $\displaystyle \left| \sum_{k = m + 1}^n \sin kx \right| \leq \frac{1}{\left| \sin \frac{x}{2} \right|}$</p></blockquote><p><strong>证明</strong>：<br>$$<br>\begin{align*}<br>\sum_{k = m + 1}^n \sin kx &amp;= \frac{1}{2\sin \frac{x}{2}} \sum_{k = m + 1}^n \left[ \cos \left( k + \frac{1}{2} \right)x - \cos \left( k - \frac{1}{2} \right)x \right] \<br>&amp;= \frac{\cos \left( m + \frac{1}{2} \right)x - \cos \left( n + \frac{1}{2} \right)x}{2\sin \frac{x}{2}}\<br>\Rightarrow &amp;\left| \sum_{k = m + 1}^n \sin kx \right| \leq \frac{1}{\left| \sin \frac{x}{2} \right|}<br>\end{align*}<br>$$<br>下面开始证明原问题</p><p>**证明：**由三角函数周期性，只需考虑 $(-\pi, \pi)$ 区间；又因 $\sin kx$ 是奇函数，只需分析 $(0, \pi)$（另一半区间取相反数即可）</p><p>若 $\displaystyle n\leq \frac{\sqrt{\pi}}{x}$，显然有<br>$$<br>\left| \sum_{k = 1}^n \frac{\sin kx}{k} \right| \leq \sum_{k = 1}^n \frac{kx}{k} = nx\leq \sqrt{\pi}&lt;2\sqrt{\pi}<br>$$<br>若 $\displaystyle n &gt; \frac{\sqrt{\pi}}{x}$，取正整数 $m$ 满足<br>$$<br>mx&lt;\sqrt{\pi}&lt;\left(m+1\right)x<br>$$<br>则 $m&lt;n$</p><p>下面我们将原式拆成两个部分，记</p><p>$$<br>\sum_{k = 1}^n \frac{\sin kx}{k} = A + B<br>$$</p><p>其中 $A$ 为前 $m$ 项和，$B$ 为后 $n - m$ 项和</p><p>$A$ 部分的和<br>$$<br>\left| \sum_{k = 1}^m \frac{\sin kx}{k} \right| \leq \sum_{k = 1}^m \frac{kx}{k} = mx<br>$$<br>现在处理 $B$ 部分，记<br>$$<br>T_p = \sum_{k = m + 1}^n \sin kx<br>$$<br>其中<br>$$<br>\begin{align*}<br>R &amp;= \max{ |T_m|, |T_{m + 1}|, \cdots, |T_n| }\<br>r &amp;= \min{ |T_m|, |T_{m + 1}|, \cdots, |T_n| }<br>\end{align*}<br>$$<br>由 Abel 不等式可知：若 $a_k$ 单调，$\displaystyle \left|\sum_{k = m + 1}^n b_k\right|\leq M$</p><p>则有<br>$$<br>\left| \sum_{k = m + 1}^n a_k b_k \right| \leq a_{m + 1} M<br>$$<br>（此处 $\displaystyle a_k = \frac{1}{k}$ 单调递减  ）</p><p>即<br>$$<br>\frac{1}{m + 1} r \leq \left| \sum_{k = m + 1}^n \frac{\sin kx}{k} \right| \leq \frac{1}{m + 1} R<br>$$<br>由<strong>引理1</strong>可知<br>$$<br>\left| \sum_{k = m + 1}^n \sin kx \right| \leq \frac{1}{\left| \sin \frac{x}{2} \right|} \leq \frac{\pi}{|x|}<br>$$<br>故<br>$$<br>R = \frac{\pi}{|x|}\ \quad r = \frac{\pi}{|x|}<br>$$<br>因此<br>$$<br>\left| \sum_{k = m + 1}^n \frac{\sin kx}{k} \right| \leq \frac{1}{m + 1} \cdot \frac{\pi}{|x|}<br>$$<br>整体<br>$$<br>\left| \sum_{k = 1}^n \frac{\sin kx}{k} \right| &lt; mx+\frac{1}{m + 1} \cdot \frac{\pi}{|x|}<br>$$<br>其中 $m\in\left[0,n\right]$</p><p>现在要证明<br>$$<br>mx+\frac{1}{m + 1} \cdot \frac{\pi}{x} &lt; 2\sqrt{\pi}<br>$$<br>令<br>$$<br>t=\frac{\sqrt{\pi}}{x}<br>$$<br>有<br>$$<br>\frac{m}{t}+\frac{t}{m+1}-2&lt;0<br>$$</p><p>$$<br>f(t) = t^2 - 2t\left(m+1\right) + m\left(m+1\right) &lt; 0<br>$$</p><p>得<br>$$<br>m +1- \sqrt{m+1}&lt; \frac{\sqrt{\pi}}{x} &lt; m + 1+\sqrt{m+1}<br>$$<br>由于<br>$$<br>\begin{align*}<br>m&amp;&lt;\frac{\sqrt{\pi}}{x}&lt;m+1\<br>m +1- \sqrt{m+1}&lt;m&amp;&lt;m+1&lt; m + 1+\sqrt{m+1}<br>\end{align*}<br>$$<br>在此范围内，$f\left(t\right)&lt;0$ 恒成立，即<br>$$<br>mx+\frac{1}{m + 1} \cdot \frac{\pi}{x} &lt; 2\sqrt{\pi}<br>$$<br>恒成立，综上<br>$$<br>\left| \sum_{k = 1}^n \frac{\sin kx}{k} \right| &lt; mx+\frac{1}{m + 1} \cdot \frac{\pi}{x}&lt;2\sqrt{\pi}<br>$$<br>此外，这里的上下界有更强的估计，以后有时间再写一篇证明<br>$$<br>x\left(1-\frac{x}{\pi}\right)^3&lt;\left| \sum_{k = 1}^n \frac{\sin kx}{k} \right|&lt;\int_{0}^{\pi}\frac{\sin x}{x}, \mathrm{d}x\approx1.8519\cdots \quad\left(x\in\left(0,\pi\right)\right)<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学分析拾遗：定积分相关证明题</title>
      <link href="/2025/06/29/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E5%AE%9A%E7%A7%AF%E5%88%86%E8%AF%81%E6%98%8E%E9%A2%98/"/>
      <url>/2025/06/29/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E5%AE%9A%E7%A7%AF%E5%88%86%E8%AF%81%E6%98%8E%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="T1">T1</h2><blockquote><p><strong>设 $f(x)$ 在 $[0, +\infty)$ 有定义，且在任意 $[0,a]$ 上可积，$\lim\limits_{x \to +\infty} f(x) = A$</strong></p><p><strong>证明：</strong><br>$$<br>\boldsymbol{\lim\limits_{x \to +\infty} \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t = A}<br>$$</p></blockquote><p><strong>证：</strong><br>$$<br>\begin{align}<br>\left| \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t - A \right| &amp;= \left| \frac{1}{x}\int_{0}^{x} \left( f(t) - A \right) ,\mathrm{d}t \right|\<br>&amp;= \left| \frac{1}{x}\int_{0}^{M} \left( f(t) - A \right) ,\mathrm{d}t + \frac{1}{x}\int_{M}^{x} \left( f(t) - A \right) ,\mathrm{d}t \right|\<br>&amp;\leq \left| \frac{1}{x}\int_{0}^{M} \left( f(t) - A \right) ,\mathrm{d}t \right| + \left| \frac{1}{x}\int_{M}^{x} \left( f(t) - A \right) ,\mathrm{d}t \right|<br>\end{align}<br>$$<br>由于<br>$$<br>\lim\limits_{x \to +\infty} \frac{1}{x} = 0 \quad \lim\limits_{x \to +\infty} f(x) = A<br>$$<br>则对 $\forall \varepsilon &gt; 0$，$\exists M &gt; 0$，当 $x \geq M$ 时，有<br>$$<br>|f(x) - A| &lt; \frac{\varepsilon}{2}<br>$$<br>由于 $\displaystyle \left| \int_{0}^{M} \left( f(t) - A \right) ,\mathrm{d}t \right|$ 有界，则有<br>$$<br>\lim\limits_{x \to +\infty} \left| \frac{1}{x}\int_{0}^{M} \left( f(t) - A \right) ,\mathrm{d}t \right| = 0<br>$$<br>从而对 $\varepsilon &gt; 0$，$\exists N &gt; M &gt; 0$，当 $x \geq N$ 时，有<br>$$<br>\left| \frac{1}{x}\int_{0}^{M} \left( f(t) - A \right) ,\mathrm{d}t \right| &lt; \frac{\varepsilon}{2}<br>$$<br>则当 $x \geq N$ 时，有<br>$$<br>\begin{align}<br>\left| \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t - A \right| &amp;\leq \left| \frac{1}{x}\int_{0}^{M} \left( f(t) - A \right) ,\mathrm{d}t \right| + \left| \frac{1}{x}\int_{M}^{x} \left( f(t) - A \right) ,\mathrm{d}t \right|\<br>&amp;&lt; \frac{\varepsilon}{2} + \frac{x - M}{x} \cdot \frac{\varepsilon}{2}\<br>&amp;&lt; \varepsilon<br>\end{align}<br>$$<br>故<br>$$<br>\lim\limits_{x \to +\infty} \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t = A<br>$$</p><h2 id="T2">T2</h2><blockquote><p><strong>设 $f$ 是定义在 $(-\infty, +\infty)$ 上的一个连续周期函数，周期为 $p$</strong></p><p><strong>证明：</strong><br>$$<br>\boldsymbol{\lim\limits_{x \to +\infty} \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t = \frac{1}{p}\int_{0}^{p} f(t),\mathrm{d}t}<br>$$</p></blockquote><p><strong>证：</strong><br>设 $[0, x)$ 上包含 $n$ 个周期，即 $\displaystyle n = \left[ \frac{x}{p} \right]$<br>$$<br>\frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t = \frac{1}{x}\int_{0}^{np} f(t),\mathrm{d}t + \frac{1}{x}\int_{np}^{x} f(t),\mathrm{d}t<br>$$</p><p>由于 $f(t)$ 周期性，$\displaystyle \int_{0}^{np} f(t),\mathrm{d}t = n\int_{0}^{p} f(t),\mathrm{d}t$，故：</p><p>$$<br>\frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t = \frac{n}{x}\int_{0}^{p} f(t),\mathrm{d}t + \frac{1}{x}\int_{np}^{x} f(t),\mathrm{d}t<br>$$</p><p>放缩得：</p><p>$$<br>\begin{align}<br>\frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t &amp;\leq \frac{n}{x}\int_{0}^{p} f(t),\mathrm{d}t + \frac{1}{x}\int_{np}^{(n + 1)p} f(t),\mathrm{d}t\ &amp;= \frac{n + 1}{x}\int_{0}^{p} f(t),\mathrm{d}t<br>\end{align}<br>$$</p><p>且</p><p>$$<br>\frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t \geq \frac{n}{x}\int_{0}^{p} f(t),\mathrm{d}t<br>$$</p><p>则：</p><p>$$<br>\left| \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t - \frac{1}{p}\int_{0}^{p} f(t),\mathrm{d}t \right| \leq \left| \left( \frac{n + 1}{x} - \frac{1}{p} \right)\int_{0}^{p} f(t),\mathrm{d}t \right|<br>$$</p><p>由<br>$$<br>\frac{x}{p} - 1 \leq n \leq \frac{x}{p}<br>$$<br>可得<br>$$<br>\frac{1}{p} \leq \frac{n + 1}{x} \leq \frac{1}{p} + \frac{1}{x}<br>$$<br>根据夹逼定理得<br>$$<br>\lim\limits_{x \to +\infty} \frac{n + 1}{x} = \frac{1}{p}<br>$$<br>对 $\forall \varepsilon &gt; 0$，$\exists M &gt; 0$，当 $x &gt; M$ 时：</p><p>$$<br>\left| \frac{n + 1}{x} - \frac{1}{p} \right| &lt; \frac{\varepsilon}{\displaystyle \left| \int_{0}^{p} f(t),\mathrm{d}t \right|}<br>$$</p><p>故当 $x &gt; M$ 时：</p><p>$$<br>\left| \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t - \frac{1}{p}\int_{0}^{p} f(t),\mathrm{d}t \right| &lt; \varepsilon<br>$$</p><p>即：</p><p>$$<br>\lim\limits_{x \to +\infty} \frac{1}{x}\int_{0}^{x} f(t),\mathrm{d}t = \frac{1}{p}\int_{0}^{p} f(t),\mathrm{d}t<br>$$<br>此题可以作为结论，引申出许多题目，例如下面这题</p><h2 id="T3">T3</h2><blockquote><p><strong>求极限：</strong><br>$$<br>\boldsymbol{\lim\limits_{x \to +\infty} \frac{\displaystyle \int_{0}^{x} |\sin t| ,\mathrm{d}t}{x}}<br>$$</p></blockquote><p><strong>解：</strong></p><p>已知 $|\sin x|$ 为 $[0, +\infty)$ 上的连续周期函数，周期为 $\pi$，则存在 $n \in \mathbb{N}$，使得<br>$$<br>n\pi \leq x &lt; (n + 1)\pi<br>$$<br>则有：<br>$$<br>\int_{0}^{n\pi} |\sin t| ,\mathrm{d}t \leq \int_{0}^{x} |\sin t| ,\mathrm{d}t \leq \int_{0}^{(n + 1)\pi} |\sin t| ,\mathrm{d}t<br>$$<br>因 $|\sin t|$ 周期为 $\pi$，且<br>$$<br>\int_{0}^{\pi} |\sin t| ,\mathrm{d}t = \int_{0}^{\pi} \sin t ,\mathrm{d}t = 2<br>$$<br>故：<br>$$<br>\begin{align}<br>\int_{0}^{n\pi} |\sin t| ,\mathrm{d}t &amp;= 2n\<br>\int_{0}^{(n + 1)\pi} |\sin t| ,\mathrm{d}t &amp;= 2(n + 1)<br>\end{align}<br>$$<br>结合 $n\pi \leq x &lt; (n + 1)\pi$，对原式放缩得：<br>$$<br>\frac{2n}{(n + 1)\pi} \leq \frac{\displaystyle \int_{0}^{x} |\sin t| ,\mathrm{d}t}{x} \leq \frac{2(n + 1)}{n\pi}<br>$$<br>当$x \to +\infty$时，$n \to +\infty$，计算两端极限：<br>$$<br>\begin{align}<br>\lim\limits_{n \to +\infty} \frac{2n}{(n + 1)\pi} &amp;= \lim\limits_{n \to +\infty} \frac{2}{\left(1 + \frac{1}{n}\right)\pi} = \frac{2}{\pi}\<br>\lim\limits_{n \to +\infty} \frac{2(n + 1)}{n\pi} &amp;= \lim\limits_{n \to +\infty} \frac{2\left(1 + \frac{1}{n}\right)}{\pi} = \frac{2}{\pi}<br>\end{align}<br>$$<br>由<strong>夹逼定理</strong>，得：<br>$$<br>\lim\limits_{x \to +\infty} \frac{\displaystyle \int_{0}^{x} |\sin t| ,\mathrm{d}t}{x} = \frac{2}{\pi}<br>$$</p><h2 id="T4">T4</h2><blockquote><p><strong>若 $f$ 在 $[0,a]$ 上连续可微，且 $f(0) = 0$</strong></p><p><strong>证明：</strong><br>$$<br>\boldsymbol{\int_{0}^{a} |f(x)f’(x)| , \mathrm{d}x \leq \frac{a}{2}\int_{0}^{a} [f’(x)]^2 ,\mathrm{d}x}<br>$$</p></blockquote><p><strong>证</strong>：</p><p>绝对值不太好处理，不妨设 $\displaystyle F(x)=\int_{0}^{x} |f’(t)| ,\mathrm{d}t$</p><p>易知：<br>$$<br>\begin{align}<br>F(x)=\int_{0}^{x} |f’(t)|,\mathrm{d}t &amp;\geq \left| \int_{0}^{x} f’(t) ,\mathrm{d}t \right| = |f(x)|\<br>F’(x) &amp;=|f’(x)|<br>\end{align}<br>$$<br>则原式化为<br>$$<br>\begin{align}<br>\int_{0}^{a} |f(x)||f’(x)| ,\mathrm{d}x &amp;\leq \int_{0}^{a} F(x) \cdot F’(x) ,\mathrm{d}x \<br>&amp;= \frac{1}{2}F^2(x)\big|<em>{0}^{a} = \frac{1}{2}F^2(a)\<br>&amp; = \frac{1}{2}\left( \int</em>{0}^{a} |f’(t)| ,\mathrm{d}t \right)^2 \<br>\end{align}<br>$$<br>最后由 <strong>Cauchy Schwartz 不等式</strong>可得<br>$$<br>\left( \int_{0}^{a} |f’(t)| \cdot 1 ,\mathrm{d}t \right)^2 \leq \int_{0}^{a} [f’(t)]^2 ,\mathrm{d}t \cdot \int_{0}^{a} 1^2 ,\mathrm{d}t = a\int_{0}^{a} [f’(t)]^2 ,\mathrm{d}t<br>$$<br>即<br>$$<br>\int_{0}^{a} |f(x)f’(x)| ,\mathrm{d}x \leq \frac{a}{2}\int_{0}^{a} [f’(x)]^2 ,\mathrm{d}x<br>$$</p><h2 id="T5">T5</h2><blockquote><p><strong>证明：设 $f$ 在 $[a,b]$ 上可积，且处处有 $f(x)&gt;0$，则 $\displaystyle \int_{a}^{b} f(x),\mathrm{d}x &gt; 0$</strong></p></blockquote><p>**证：**由 $f$ 在 $[a,b]$ 上可积，故 $\exists\ x_0 \in [a,b]$，$f(x)$ 在 $x_0$ 连续且 $f(x_0)&gt;0$</p><p>于是 $\exists\ [\alpha, \beta] \subseteq [a,b]$，$s.t. \ f(x) \geq \displaystyle \frac{f(x_0)}{2},\ x \in [\alpha, \beta]$，则有<br>$$<br>\int_{a}^{b} f(x),\mathrm{d}x \geq \int_{\alpha}^{\beta} f(x),\mathrm{d}x \geq \frac{f(x_0)}{2} (\beta - \alpha) &gt; 0<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一类简单有理分式函数的积分解</title>
      <link href="/2025/06/27/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%B8%80%E7%B1%BB%E7%AE%80%E5%8D%95%E6%9C%89%E7%90%86%E5%88%86%E5%BC%8F%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%AF%E5%88%86%E8%A7%A3/"/>
      <url>/2025/06/27/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%B8%80%E7%B1%BB%E7%AE%80%E5%8D%95%E6%9C%89%E7%90%86%E5%88%86%E5%BC%8F%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%AF%E5%88%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>一类简单有理分式函数的积分解</h1><p>对于刚开始学习微积分的同学，一定会遇到这样几道不定积分问题<br>$$<br>\begin{align}<br>\int \frac{1}{x+1}, \mathrm{d}x \quad \ \int \frac{1}{x^2+1}, \mathrm{d}x  \quad \ \int \frac{1}{x^3+1}, \mathrm{d}x \<br>\int \frac{1}{x^4+1}, \mathrm{d}x  \quad \ \int \frac{1}{x^5+1}, \mathrm{d}x  \quad \ \int \frac{1}{x^6+1}, \mathrm{d}x<br>\end{align}<br>$$<br>当分母次数为1或2时，答案是显然的</p><p><strong>次数为3</strong>时，需要利用立方和公式将分母因式分解然后待定系数法裂项求解</p><p><strong>次数为4</strong>时，可以利用组合积分法，将原式转换为求解以下两种不定积分的问题<br>$$<br>\begin{align}<br>I_1=\int \frac{x^2+1}{x^4+1}, \mathrm{d}x \<br>I_2=\int \frac{x^2-1}{x^4+1}, \mathrm{d}x<br>\end{align}<br>$$<br>这两个不定积分只需要将分子分母同时除以 $x^2$ ，也很容易求得答案</p><p><strong>次数为6</strong>时，可以利用倒代换，将原式改写为<br>$$<br>\begin{align}<br>\int \frac{1}{x^6+1}, \mathrm{d}x  &amp;= \frac{1}{2}\cdot \int \frac{x^4+1}{x^6+1}, \mathrm{d}x \<br>&amp;=\frac{1}{2}\cdot \int \frac{x^4+1-x^2}{x^6+1},\mathrm{d}x+\frac{1}{2}\cdot \int \frac{x^2}{x^6+1},\mathrm{d}x\<br>&amp;=\frac{1}{2}\cdot \int \frac{1}{x^2+1},\mathrm{d}x+\frac{1}{6}\cdot \int \frac{1}{x^6+1},\mathrm{d}\left(x^3\right)\<br>&amp;=\frac{1}{2}\cdot \arctan x+\frac{1}{6}\cdot \arctan x^3+C<br>\end{align}<br>$$<br>可以看出以上五个不定积分求解起来还是比较简单的，用到的都是大一所学的基础知识</p><p>那么，接下来让我们求解一下分母<strong>次数为5</strong>的情况</p><p>第一步还是因式分解<br>$$<br>\int \frac{1}{x^5+1},\mathrm{d}x =\int \frac{1}{\left(x+1\right)\left(x^4-x^3+x^2-x+1\right)},\mathrm{d}x<br>$$<br>进一步分析四次项，记其为 ①，对 ① 式同除 $x^4$ 得到 ② 式<br>$$<br>\begin{align}<br>&amp;x^4-x^3+x^2-x+1=0 \quad \left(①\right)\<br>x^{-4}&amp;-x^{-3}+x^{-2}-x^{-1}+1=0 \quad \left(②\right)<br>\end{align}<br>$$<br>则可以得出 ① 的根互为倒数，因为 ① 式与 ② 式是等价的</p><p>用待定系数法求对 ① 进一步因式分解<br>$$<br>\begin{align}<br>&amp;\left(x^2+ax+1\right)\left(x^2+bx+1\right)=0\<br>x^4+&amp;\left(a+b\right)x^3+\left(ab+2\right)x^2+\left(a+b\right)x+1=0<br>\end{align}<br>$$<br>对比系数可得<br>$$<br>\begin{cases}<br>a+b&amp;=-1\<br>\ \ \ ab &amp;=-1<br>\end{cases}<br>$$<br>得<br>$$<br>\begin{cases}<br>\ \ a&amp;=\displaystyle \frac{\sqrt{5}-1}{2}\<br>\<br>\ \ b&amp;=\displaystyle -\frac{\sqrt{5}+1}{2}<br>\end{cases}<br>$$<br>故原式化为<br>$$<br>\begin{align}<br>\int \frac{1}{x^5+1},\mathrm{d}x &amp;=\int \frac{1}{\left(x+1\right)\left(x^4-x^3+x^2-x+1\right)},\mathrm{d}x\<br>&amp;=\int \frac{1}{\left(x+1\right)\left(x^2+\frac{\left(\sqrt{5}-1\right)x}{2}+1\right)\left(x^2-\frac{\left(\sqrt{5}+1\right)x}{2}+1\right)},\mathrm{d}x\<br>&amp;=\int \frac{4}{\left(x+1\right)\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)\left(2x^2-\left(\sqrt{5}+1\right)x+2\right)},\mathrm{d}x\<br>&amp;=\int \left[\frac{Ax+B}{2x^2+\left(\sqrt{5}-1\right)x+2}+ \frac{Cx+D}{2x^2-\left(\sqrt{5}+1\right)x+2}+\frac{E}{x+1}\right],\mathrm{d}x<br>\end{align}<br>$$<br>记<br>$$<br>\begin{align}<br>f\left(x\right)&amp;=\frac{4}{\left(x+1\right)\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)\left(2x^2-\left(\sqrt{5}+1\right)x+2\right)}\<br>&amp;=\frac{Ax+B}{2x^2+\left(\sqrt{5}-1\right)x+2}+ \frac{Cx+D}{2x^2-\left(\sqrt{5}+1\right)x+2}+\frac{E}{x+1}\<br>\end{align}<br>$$<br>分别求解系数</p><p>对于 $E$<br>$$<br>\begin{align}<br>E&amp;=\lim_{\left(x+1\right)\rightarrow 0}f\left(x\right)\left(x+1\right)\<br>&amp;=\lim_{\left(x+1\right)\rightarrow 0}\frac{4}{\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)\left(2x^2-\left(\sqrt{5}+1\right)x+2\right)}\<br>&amp;=\lim_{\left(x+1\right)\rightarrow 0} \frac{1}{x^4-x^3+x^2-x+1}\<br>&amp;=\frac{1}{5}<br>\end{align}<br>$$<br>同理，对于 $Ax+B$<br>$$<br>\begin{align}<br>Ax+B &amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{\left(x+1\right)\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{\left(x+1\right)\left(\left(\sqrt{5}+1\right)x-2+\left(\sqrt{5}-1\right)x+2\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{2\sqrt{5}x\left(x+1\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{\sqrt{5}\left(2x^2+2x\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{\sqrt{5}\left(\left(\sqrt{5}+1\right)x-2+2x\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{\sqrt{5}\left(\left(\sqrt{5}+3\right)x-2\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4}{\sqrt{5}\left(\sqrt{5}+3\right)\left(x-\frac{2}{\sqrt{5}+3}\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4\left(\sqrt{5}+3\right)}{\sqrt{5}\left(\sqrt{5}+3\right)\left(3-\sqrt{5}\right)\left(x-\frac{2\left(3-\sqrt{5}\right)}{\left(3+\sqrt{5}\right)\left(3-\sqrt{5}\right)}\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{4\left(\sqrt{5}+3\right)}{4\sqrt{5}\left(x-\frac{2\left(3-\sqrt{5}\right)}{4}\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{2\left(3-\sqrt{5}\right)}{\sqrt{5}\left(2x-\left(3-\sqrt{5}\right)\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{2\left(3-\sqrt{5}\right)\left(x+P\right)}{\sqrt{5}\left(2x-\left(3-\sqrt{5}\right)\right)\left(x+P\right)}<br>\end{align}<br>$$<br>令<br>$$<br>\begin{align}<br>\left(2x-\left(3-\sqrt{5}\right)\right)&amp;\left(x+P\right)\<br>&amp;=2x^2-\left(3-\sqrt{5}\right)x+2Px-\left(3-\sqrt{5}\right)P\<br>&amp;=2x^2-\left(1+\sqrt{5}\right)x-\left(3-\sqrt{5}\right)P\<br>\<br>&amp;\rightarrow P=1-\sqrt{5}<br>\end{align}<br>$$<br>故 $Ax+B$ 可进一步化简<br>$$<br>\begin{align}<br>Ax+B &amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{2\left(3-\sqrt{5}\right)\left(x+1-\sqrt{5}\right)}{\sqrt{5}\left(2x-\left(3-\sqrt{5}\right)\right)\left(x+1-\sqrt{5}\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{2\left(3-\sqrt{5}\right)\left(x+1-\sqrt{5}\right)}{\sqrt{5}\left(\left(2x^2-\left(\sqrt{5}+1\right)\right)x+\left(3-\sqrt{5}\right)\left(\sqrt{5}-1\right)\right)}\<br>&amp;=\lim_{\left(2x^2-\left(\sqrt{5}+1\right)x+2\right))\rightarrow 0}\frac{\left(\sqrt{5}+1\right)x-4}{-\sqrt{5}}<br>\end{align}<br>$$<br>得<br>$$<br>\begin{cases}<br>\ \ A &amp;=\displaystyle  -\frac{\sqrt{5}+1}{5}\<br>\<br>\ \ B &amp;=\displaystyle \ \ \ \  \frac{4}{5}<br>\end{cases}<br>$$<br>同理，也可解得<br>$$<br>\begin{cases}<br>\ \ C &amp;=\displaystyle  \frac{\sqrt{5}-1}{5}\<br>\<br>\ \ D &amp;=\displaystyle \ \ \ \  \frac{4}{5}<br>\end{cases}<br>$$<br>将 $A,B,C,D,E$ 代回原式整理得<br>$$<br>\begin{align}<br>\int \frac{1}{x^5+1},\mathrm{d}x &amp;=\int \left[\frac{\left(\sqrt{5}-1\right)x+4}{5\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)}- \frac{\left(\sqrt{5}+1\right)x-4}{2\left(2x^2-\left(\sqrt{5}+1\right)x+2\right)}+\frac{1}{5\left(x+1\right)}\right],\mathrm{d}x\<br>&amp;=\int \frac{\left(\sqrt{5}-1\right)x+4}{5\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)},\mathrm{d}x-\int  \frac{\left(\sqrt{5}+1\right)x-4}{2\left(2x^2-\left(\sqrt{5}+1\right)x+2\right)},\mathrm{d}x+\frac{1}{5}\ln |x+1|+C<br>\end{align}<br>$$<br>分别令<br>$$<br>\begin{align}<br>J&amp;=\int \frac{\left(\sqrt{5}-1\right)x+4}{5\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)},\mathrm{d}x\<br>K&amp;=\int  \frac{\left(\sqrt{5}+1\right)x-4}{2\left(2x^2-\left(\sqrt{5}+1\right)x+2\right)},\mathrm{d}x<br>\end{align}<br>$$<br>对于 $J$<br>$$<br>\begin{align}<br>J&amp;=\int \frac{\left(\sqrt{5}-1\right)x+4}{5\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)},\mathrm{d}x\<br>&amp;=\frac{1}{20}\int \frac{\left(\sqrt{5}-1\right)\left(4x+\sqrt{5}-1\right)-\left(\sqrt{5}-1\right)^2+16}{2x^2+\left(\sqrt{5}-1\right)x+2},\mathrm{d}x\<br>&amp;=\frac{1}{20}\int \frac{\left(\sqrt{5}-1\right)d\left(2x^2+\left(\sqrt{5}-1\right)x+2\right)}{2x^2+\left(\sqrt{5}-1\right)x+2},\mathrm{d}x+\frac{1}{20}\int \frac{10+2\sqrt{5}}{2x^2+\left(\sqrt{5}-1\right)x+2},\mathrm{d}x\<br>&amp;=\frac{\left(\sqrt{5}-1\right)\ln |2x^2+\left(\sqrt{5}-1\right)x+2|+C}{20}+\frac{5+2\sqrt{5}}{10}\int \frac{\mathrm{d}x}{2x^2+\left(\sqrt{5}-1\right)x+2}\<br>&amp;=\frac{\left(\sqrt{5}-1\right)\ln |2x^2+\left(\sqrt{5}-1\right)x+2|+C}{20}+\frac{5+2\sqrt{5}}{10}\int \frac{\frac{1}{\sqrt{2}}\mathrm{d}\left(\sqrt{2}x+\frac{\sqrt{5}-1}{2\sqrt{2}}\right)}{\left(\sqrt{2}x+\frac{\sqrt{5}-1}{2\sqrt{2}}\right)^2+\frac{\sqrt{5}+5}{4}}\<br>&amp;=\frac{\left(\sqrt{5}-1\right)\ln |2x^2+\left(\sqrt{5}-1\right)x+2|}{20}+\frac{5+2\sqrt{5}}{10}\frac{\sqrt{2}\arctan \left(\frac{4x+\sqrt{5}-1}{\sqrt{2}\sqrt{\sqrt{5}}}+5\right)}{\sqrt{\sqrt{5}}+5}+C\<br>&amp;=\frac{\left(\sqrt{5}-1\right)\ln |2x^2+\left(\sqrt{5}-1\right)x+2|}{20}+\frac{\sqrt{10+2\sqrt{5}}\arctan \left(\frac{4x+\sqrt{5}-1}{\sqrt{10+2\sqrt{5}}}\right)}{10}+C<br>\end{align}<br>$$<br>同理可求得 $K$<br>$$<br>K=\frac{\left(\sqrt{5}+1\right)\ln |2x^2-\left(\sqrt{5}+1\right)x+2|}{20}-\frac{\sqrt{10-2\sqrt{5}}\arctan \left(\frac{4x-\sqrt{5}-1}{\sqrt{10-2\sqrt{5}}}\right)}{10}+C<br>$$<br>故最终结果为<br>$$<br>\begin{align}<br>\int \frac{1}{x^5+1},\mathrm{d}x&amp;=\frac{1}{5}\ln |x+1|+J-K+C\<br>&amp;=\frac{1}{5}\ln |x+1|+\frac{\left(\sqrt{5}-1\right)\ln |2x^2+\left(\sqrt{5}-1\right)x+2|}{20}+\frac{\sqrt{10+2\sqrt{5}}\arctan \left(\frac{4x+\sqrt{5}-1}{\sqrt{10+2\sqrt{5}}}\right)}{10}\<br>&amp;-\frac{\left(\sqrt{5}+1\right)\ln |2x^2-\left(\sqrt{5}+1\right)x+2|}{20}+\frac{\sqrt{10-2\sqrt{5}}\arctan \left(\frac{4x-\sqrt{5}-1}{\sqrt{10-2\sqrt{5}}}\right)}{10}+C<br>\end{align}<br>$$<br>其实没什么思维难度，只是硬算</p><p>但如果我们将这题推广到<strong>次数为 $n$</strong> 的情况并改为求其在 $[0,+\infty)$ 上的定积分，那么我们会得到一个非常优美的结论<br>$$<br>\int_{0}^{+\infty}\frac{1}{x^n+1},\mathrm{d}x<br>$$<br>作换元，令 $\displaystyle u=\frac{1}{x^n+1}$，则有<br>$$<br>\begin{align}<br>\mathrm{d}x &amp;=\left[-\frac{1}{n}\cdot \left(1-u\right)^{\frac{1}{n}-1}\cdot u^{-\frac{1}{n}}-\frac{1}{n}\cdot \left(1-u\right)^{\frac{1}{n}}\cdot u^{-\frac{1}{n}-1}\right]\cdot \mathrm{d}u\<br>&amp;=-\frac{1}{n}\cdot \left(1-u\right)^{\frac{1}{n}-1}\cdot u^{-\frac{1}{n}-1}\cdot \mathrm{d}u<br>\end{align}<br>$$<br>则原式变为<br>$$<br>\begin{align}<br>\int_{0}^{+\infty}\frac{1}{x^n+1},\mathrm{d}x&amp;=\frac{1}{n}\cdot \int_{0}^{1}u^{1-\frac{1}{n}-1}\cdot \left(1-u\right)^{\frac{1}{n}-1}\cdot \mathrm{d}u\<br>&amp;=\frac{1}{n}\cdot \mathrm{B} \left(1-\frac{1}{n},\frac{1}{n}\right)\<br>&amp;=\frac{1}{n}\cdot \Gamma\left(1-\frac{1}{n}\right)\cdot \Gamma\left(\frac{1}{n}\right)<br>\end{align}<br>$$<br>根据余元公式<br>$$<br>\Gamma\left(z\right)\cdot \Gamma\left(1-z\right)=\frac{\pi}{\sin\left(\pi z\right)}<br>$$<br>则最终结果为<br>$$<br>\int_{0}^{+\infty}\frac{1}{x^n+1},\mathrm{d}x=\frac{\displaystyle \frac{\pi}{n}}{\sin \displaystyle \frac{\pi}{n}}<br>$$<br>当然，这个定积分也可以用留数法做，过程也挺简单的，这里就不写了</p><p>还有一种方法是利用倒代换结合 <strong>digamma 函数</strong>，请读者自行探索</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微积分下的 Möbius Transformation</title>
      <link href="/2025/06/26/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%98%E6%8D%A2/"/>
      <url>/2025/06/26/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1>莫比乌斯变换（分式线性变换）</h1><p>在复变函数中，我们学习过复平面中的<strong>莫比乌斯变换</strong>，形式为<br>$$<br>f\left(z\right)=\frac{az+b}{cz+d} \quad  \left(a,b,c,d \in \mathbb{C},ad-bc \neq0\right)<br>$$<br>它具有许多优美的性质，我们也称其为分式线性变换</p><p><strong>莫比乌斯变换</strong>（Möbius Transformation）虽然起源于复分析，但其思想和方法可以与微积分的工具结合，用于解决特定类型的积分</p><p>例如这类带根号项的分式有理函数积分<br>$$<br>\int \frac{gx+h}{\left(ax^2+bx+c\right)\sqrt{dx^2+ex+f}}, \mathrm{d}x<br>$$<br>下面我们从最基础的变换手段讲起，最后给出解决这类积分问题的通法</p><h2 id="倒代换">倒代换</h2><p>通过倒代换 $\displaystyle x=\frac{1}{t}$ 将待求问题的区间从 $[1,+\infty)$ 转换成 $(0,1]$，简化计算</p><p>若问题区间为 $[0,+\infty)$，则分段求解，将原积分拆解成<br>$$<br>\begin{align}<br>\int_{0}^{+\infty}f,\mathrm{d}x &amp;=\int_{0}^1f,\mathrm{d}x+\int_{1}^{+\infty}f,\mathrm{d}x\<br>&amp;=\int_{0}^1f,\mathrm{d}x+\int_{0}^1f(\frac{1}{x})\cdot \frac{1}{x^2},\mathrm{d}x\<br>&amp;=\int_{0}^1 \left(f+\frac{f\left(\frac{1}{x}\right)}{x^2}\right),\mathrm{d}x<br>\end{align}<br>$$</p><h3 id="例1">例1</h3><p>$$<br>\int_{0}^{+\infty} \frac{1}{(x^{2025}+1)(x^2+1)},\mathrm{d}x<br>$$</p><p>对 $[1,+\infty)$ 作倒代换，令 $\displaystyle x=\frac{1}{t}$，则有<br>$$<br>\begin{align}<br>\int_{0}^{+\infty} \frac{1}{(x^{2025}+1)(x^2+1)},\mathrm{d}x &amp;=\int_{0}^1\frac{1}{(x^{2025}+1)(x^2+1)},\mathrm{d}x+\int_{1}^{+\infty}\frac{1}{(x^{2025}+1)(x^2+1)},\mathrm{d}x\<br>&amp;=\int_{0}^1\frac{1}{(x^{2025}+1)(x^2+1)},\mathrm{d}x+\int_{0}^1\frac{1}{(\displaystyle \frac{1}{t^{2025}}+1)(\displaystyle \frac{1}{t^2}+1)}\cdot \frac{1}{t^2},\mathrm{d}t\<br>&amp;=\int_{0}^1\left(\frac{1}{(x^{2025}+1)(x^2+1)}+\frac{x^{2025}}{(x^{2025}+1)(x^2+1)}\right),\mathrm{d}x\<br>&amp;=\int_{0}^1 \frac{\mathrm{d}x}{x^2+1}=\frac{\pi}{4}<br>\end{align}<br>$$</p><h3 id="例2">例2</h3><p>$$<br>\int_{0}^{+\infty} \frac{4 + x + 2x^2 - x^3}{x^6 + 2x^4 + 2x^2 + 1} ,\mathrm{d}x<br>$$</p><p>同上题解法<br>$$<br>\begin{align}<br>\int_{0}^{+\infty} \frac{4 + x + 2x^2 - x^3}{x^6 + 2x^4 + 2x^2 + 1} ,\mathrm{d}x&amp;=\int_{0}^1\frac{4 + x + 2x^2 - x^3}{x^6 + 2x^4 + 2x^2 + 1} ,\mathrm{d}x +\int_{0}^1 \frac{4 + \frac{1}{t} + 2\cdot \frac{1}{t^2} - \frac{1}{t^3}}{\frac{1}{t^6} + 2\cdot \frac{1}{t^4} + 2\cdot \frac{1}{t^2} + 1} \cdot \frac{1}{t^2} ,\mathrm{d}t\<br>&amp;=\int_{0}^1 \left(\frac{4 + x + 2x^2 - x^3}{x^6 + 2x^4 + 2x^2 + 1}+\frac{4x^4 + x^3 + 2x^2 - x}{x^6 + 2x^4 + 2x^2 + 1}\right),\mathrm{d}x\<br>&amp;=\int_{0}^{1}\frac{4x^4 +  4x^2 +4}{x^6 + 2x^4 + 2x^2 + 1},\mathrm{d}x\<br>&amp;=\int_{0}^{1}\frac{4\left(x^4+x^2+1\right)}{x^2\cdot \left(x^4+x^2+1\right)+\left(x^4+x^2+1\right)},\mathrm{d}x\<br>&amp;=\int_{0}^{1}\frac{\mathrm{d}x}{x^2+1}=\frac{\pi}{4}<br>\end{align}<br>$$</p><h3 id="例3">例3</h3><p>$$<br>\int_{0}^{+\infty} \frac{x^2\ln x}{\left(1+x^2\right)^3},\mathrm{d}x<br>$$</p><p>$$<br>\begin{align}<br>\int_{0}^{+\infty} \frac{x^2\ln x}{\left(1+x^2\right)^3},dx &amp;=\int_{0}^{1} \frac{x^2\ln x}{\left(1+x^2\right)^3},\mathrm{d}x+\int_{0}^{1} \frac{-\frac{1}{t^2}\cdot \ln t}{\left(1+\frac{1}{t^2}\right)^3}<br>\cdot \frac{1}{t^2},\mathrm{d}t\<br>&amp;=\int_{0}^{+\infty} \left(\frac{x^2\ln x}{\left(1+x^2\right)^3}-\frac{x^2\ln x}{\left(1+x^2\right)^3}\right),\mathrm{d}x\<br>&amp;=0<br>\end{align}<br>$$</p><h2 id="退化莫比乌斯变换">退化莫比乌斯变换</h2><p>通过代换 $\displaystyle x=\frac{1-t}{1+t}$ 将待求积分的上下限从 $\displaystyle \int_{0}^{1}$ 转换成 $\displaystyle -\int_{0}^{1}$</p><h3 id="例1-2">例1</h3><p>$$<br>\int_{0}^{1}\frac{\ln\left(x+1\right)}{x^2+1},\mathrm{d}x<br>$$</p><p>令 $\displaystyle x=\frac{1-t}{1+t}$，则有<br>$$<br>\begin{align}<br>\int_{0}^{1}\frac{\ln\left(x+1\right)}{x^2+1},\mathrm{d}x &amp;= -\int_{0}^{1}\frac{\ln\left(\frac{1-t}{1+t}+1\right)}{\left(\frac{1-t}{1+t}\right)^2+1}\cdot \frac{-2}{\left(t+1\right)^2},\mathrm{d}t\<br>&amp;=\int_{0}^{1}\frac{\ln 2-\ln \left(x+1\right)}{x^2+1},\mathrm{d}x\<br>&amp;=\int_{0}^{1}\frac{\ln 2}{x^2+1},\mathrm{d}x-\int_{0}^{1}\frac{\ln \left(x+1\right)}{x^2+1},\mathrm{d}x\<br>&amp;=\ln 2\cdot \frac{\pi}{4}-\int_{0}^{1}\frac{\ln\left(x+1\right)}{x^2+1},\mathrm{d}x<br>\end{align}<br>$$<br>即<br>$$<br>\begin{align}<br>2\cdot \int_{0}^{1}\frac{\ln\left(x+1\right)}{x^2+1},\mathrm{d}x&amp;=\frac{\ln 2\cdot \pi}{4}\<br>\int_{0}^{1}\frac{\ln\left(x+1\right)}{x^2+1},\mathrm{d}x &amp;=\frac{\ln 2\cdot \pi}{8}<br>\end{align}<br>$$</p><h3 id="例2-2">例2</h3><p>$$<br>\int_{0}^{1}\frac{1}{1-x^2}\cdot \ln \left(\frac{x+1}{2x}\right),\mathrm{d}x<br>$$</p><p>令 $\displaystyle x=\frac{1-t}{1+t}$，则有<br>$$<br>\begin{align}<br>\int_{0}^{1}\frac{1}{1-x^2}\cdot \ln \left(\frac{x+1}{2x}\right),\mathrm{d}x &amp;=\int_{0}^{1}\frac{1}{1-\left(\frac{1-t}{1+t}\right)^2}\cdot \frac{1}{\left(1+t\right)^2} \cdot  \ln \left(\frac{\frac{1-t}{1+t}+1}{2\cdot \frac{1-t}{1+t}}\right),\mathrm{d}t\<br>&amp;=-\frac{1}{2}\cdot \int_{0}^{1}\frac{\ln \left(1-x\right)}{x},\mathrm{d}x\<br>&amp;=-\frac{1}{2}\cdot \int_{0}^{1}\frac{1}{x}\cdot \sum_{k=1}^\infty \frac{\left(-1\right)}{k}\cdot x^k,\mathrm{d}x\<br>&amp;=\frac{1}{2}\cdot \sum_{k=1}^\infty\int_{0}^{1}x^{k-1},\mathrm{d}x\<br>&amp;=\frac{1}{2}\cdot \sum_{k=1}^\infty \frac{1}{k^2}=\frac{\pi ^2}{12}<br>\end{align}<br>$$</p><h3 id="例3-2">例3</h3><p>$$<br>\int \frac{\arctan x}{\left(x+1\right)^2},\mathrm{d}x<br>$$</p><p>令 $\displaystyle x=\frac{1-t}{1+t}$，则有<br>$$<br>\begin{align}<br>\int \frac{\arctan x}{\left(x+1\right)^2},\mathrm{d}x &amp;= \int \frac{\arctan \left(\frac{1-t}{1+t}\right)}{\left(\left(\frac{1-t}{1+t}\right)+1\right)^2}\cdot \frac{(-2)}{\left(t+1\right)^2},\mathrm{d}t\<br>&amp;=-\frac{1}{2}\cdot \int \arctan \left(\frac{1-t}{1+t}\right),\mathrm{d}t\<br>&amp;=-\frac{1}{2}\cdot \int \left(\frac{\pi}{4}-\arctan t\right),\mathrm{d}t\<br>&amp;=-\frac{\pi}{8}x+\frac{1}{2}\cdot x\cdot \arctan x-\frac{1}{4}\ln \left(x^2+1\right)+C<br>\end{align}<br>$$</p><h2 id="莫比乌斯变换">莫比乌斯变换</h2><p>作如下分式线性变换<br>$$<br>x=\frac{at+b}{ct+d} \quad or \quad t=\frac{ax+b}{cx+d}<br>$$</p><h3 id="例1-3">例1</h3><p>$$<br>\int_{0}^{1}\frac{x^{m-1}\cdot \left(1-x\right)^{n-1}}{\left(t+x\right)^{m+n}},\mathrm{d}x<br>$$</p><p>令 $\displaystyle x=\frac{t\left(1-z\right)}{t+z}$，则有<br>$$<br>\begin{align}<br>\int_{0}^{1}\frac{x^{m-1}\cdot \left(1-x\right)^{n-1}}{\left(t+x\right)^{m+n}},\mathrm{d}x&amp;=\int_{0}^{1}\left(\frac{x}{t+x}\right)^m\cdot \left(\frac{1-x}{t+x}\right)^n\cdot \frac{\mathrm{d}x}{x\cdot \left(1-x\right)}\<br>&amp;=\int_{0}^{1} \left( \left[\frac{\frac{t\left(1-z\right)}{t+z}}{t+\frac{t\left(1-z\right)}{t+z}}\right]^m \cdot \left[\frac{1-\frac{t\left(1-z\right)}{t+z}}{t+\frac{t\left(1-z\right)}{t+z}}\right]^n \cdot \frac{1}{\frac{t\left(1-z\right)}{t+z}\cdot \left(1-\frac{t\left(1-z\right)}{t+z}\right)}\cdot \frac{-t\left(t+1\right)}{\left(t+z\right)^2} \right) ,\mathrm{d}z\<br>&amp;=\int_{0}^{1} \left(\left[\frac{\left(1-z\right)}{t+1}\right]^m\cdot \left[\frac{z}{t}\right]^n\cdot \frac{1}{z\left(z-1\right)}\right),\mathrm{d}z\<br>&amp;=\frac{1}{\left(t+1\right)^m\cdot t^n}\cdot \int_{0}^{1} \left(1-z\right)^{m-1} \cdot z^{n-1},\mathrm{d}z\<br>&amp;=\frac{\mathrm{B}\left(m,n\right)}{\left(t+1\right)^m\cdot t^n}<br>\end{align}<br>$$</p><h3 id="例2-3">例2</h3><p>$$<br>\int \frac{1}{\left(x+1\right)\sqrt{x^2+x+1}},\mathrm{d}x<br>$$</p><p>令 $\displaystyle t=\frac{1-x}{1+x}$，则 $x=\displaystyle \frac{1+t}{1-t}$，原式化为<br>$$<br>\begin{align}<br>\int \frac{1}{\left(x+1\right)\sqrt{x^2+x+1}},\mathrm{d}x&amp;=\int \frac{1}{\left(\frac{1+t}{1-t}+1\right)\sqrt{\left(\frac{1+t}{1-t}\right)^2+\left(\frac{1+t}{1-t}\right)+1}}\cdot \frac{2}{\left(t-1\right)^2},\mathrm{d}x\<br>&amp;=\int \frac{1}{\sqrt{t^2+3}},\mathrm{d}t\<br>\end{align}<br>$$<br>由双元法，立刻得出原函数为<br>$$<br>\int \frac{1}{\sqrt{t^2+3}},\mathrm{d}t=\ln \left(x+\sqrt{x^2+3}\right)+C<br>$$</p><h3 id="例3-3">例3</h3><p>$$<br>\int \frac{1}{\left(x-2\right)^2\left(x-3\right)^3},\mathrm{d}x<br>$$</p><p>对于形如此种形式的积分<br>$$<br>\int \frac{1}{\left(x-a\right)^m\left(x-b\right)^n},\mathrm{d}x \quad \left(m&gt;n\right)<br>$$<br>一般令 $t=\displaystyle \frac{x-b}{x-a}$，将幂次高的项放分母</p><p>对此题而言，只需令 $t=\displaystyle \frac{x-2}{x-3}$，则有<br>$$<br>\begin{align}<br>\int \frac{1}{\left(x-2\right)^2\left(x-3\right)^3},\mathrm{d}x &amp;=\int \frac{1}{\left(\frac{x-2}{x-3}\right)^2\cdot \left(x-3\right)^5},\mathrm{d}x\<br>&amp;=\int \frac{1}{t^2\cdot \left(\frac{1}{t-1}\right)^5}\cdot \frac{(-1)}{(t-1)^2},dt\<br>&amp;=\int \frac{-\left(t-1\right)^3}{t^2},\mathrm{d}t\<br>&amp;=\int \left(\frac{1}{t^2}-\frac{3}{t}+3-t\right),\mathrm{d}t\<br>&amp;=-\frac{1}{x}-3\ln x +3x-\frac{x^2}{2}+C<br>\end{align}<br>$$</p><h2 id="莫比乌斯变换一般化">莫比乌斯变换一般化</h2><h3 id="系数推导">系数推导</h3><p>对于一般的带根号项的分式有理函数积分，如<br>$$<br>\int \frac{gx+h}{\left(ax^2+bx+c\right)\sqrt{dx^2+ex+f}},\mathrm{d}x<br>$$<br>不妨令<br>$$<br>\begin{align}<br>x &amp;= \frac{\alpha t+\beta}{t+1}\<br>\rightarrow \mathrm{d}x &amp;= \frac{\alpha-\beta}{\left(t+1\right)^2},\mathrm{d}t<br>\end{align}<br>$$<br>带入原积分，对于 $(ax^2+bx+c)$，我们观察其一次项系数<br>$$<br>\begin{align}<br>&amp;\left[a\left(\frac{\alpha t + \beta}{t+1}\right)^2+b\left(\frac{\alpha t+\beta}{t+1}\right)+c\right]\cdot \left(t+1\right)^2\<br>&amp;=a\left(\alpha t+\beta\right)^2+b\left(\alpha t+\beta\right)\cdot \left(t+1\right)+c\cdot  \left(t+1\right)^2\<br>&amp;=a\left(\alpha^2t^2+2\alpha\beta t+\beta^2\right)+b\left(\alpha^2t^2+(\alpha+\beta) t+\beta\right)+c\left(t^2+2t+1\right)\<br>&amp;=\left(a\cdot \alpha^2+b\cdot \alpha^2+c\right)\cdot t^2+\left(2a\cdot \alpha\cdot \beta+b\left(\alpha+\beta\right)+2c\right)\cdot t+\left(a\cdot \beta^2+b\cdot \beta+c\right)<br>\end{align}<br>$$<br>同理，对于 $\left(dx^2+ex+f\right)$，其一次项系数应该与 $(ax^2+bx+c)$ 类似，即<br>$$<br>\begin{cases}<br>2a\cdot \alpha\cdot \beta+b\left(\alpha+\beta\right)+2c\<br>\<br>2d\cdot \alpha\cdot \beta+e\left(\alpha+\beta\right)+2f<br>\end{cases}<br>$$<br>令<br>$$<br>u=\alpha\cdot \beta \quad \quad v=\alpha+\beta<br>$$<br>当上述两项的一次项系数都为零时<br>$$<br>\begin{cases}<br>2a\cdot \alpha\cdot \beta+b\left(\alpha+\beta\right)=-2c\<br>\<br>2d\cdot \alpha\cdot \beta+e\left(\alpha+\beta\right)=-2f<br>\end{cases}<br>$$<br>记<br>$$<br>\begin{align}</p><p>\begin{vmatrix}<br>2a &amp; b \<br>2d &amp; e<br>\end{vmatrix} &amp;=2\cdot \begin{vmatrix}<br>a &amp; b \<br>d &amp; e<br>\end{vmatrix} =D\</p><p>\begin{vmatrix}<br>-2c &amp; b \<br>-2f &amp; e<br>\end{vmatrix} &amp;=-2\cdot \begin{vmatrix}<br>c&amp; b \<br>f &amp; e<br>\end{vmatrix} =D_1\</p><p>\begin{vmatrix}<br>2a &amp; -2c \<br>2d &amp; -2f<br>\end{vmatrix} &amp;= -4\cdot  \begin{vmatrix}<br>a &amp; c \<br>d &amp; f<br>\end{vmatrix} =D_2</p><p>\end{align}<br>$$<br>则<br>$$<br>\begin{cases}<br>u=\displaystyle \frac{D_1}{D}\<br>\<br>v=\displaystyle \frac{D_2}{D}<br>\end{cases}<br>$$<br>特征方程为<br>$$<br>\begin{align}<br>\left(x-\alpha\right)\left(x-\beta\right) &amp;=x^2-\left(\alpha+\beta\right)\cdot x+\alpha\cdot \beta=0\<br>&amp;=x^2-\frac{D_2}{D}\cdot x+\frac{D_1}{D}=0\<br>&amp;=D\cdot x^2-D_2\cdot x+D_1=0<br>\end{align}<br>$$<br>即<br>$$<br>\begin{vmatrix}<br>a &amp; b \<br>d &amp; e<br>\end{vmatrix} \cdot x^2+2\cdot\begin{vmatrix}<br>a &amp; c \<br>d &amp; f<br>\end{vmatrix}\cdot x+\begin{vmatrix}<br>b &amp; c \<br>e &amp; f<br>\end{vmatrix}=0<br>$$<br>解出该方程的两根即为莫比乌斯变换的两个系数 $\alpha,\beta$</p><h3 id="例1-4">例1</h3><p>$$<br>\int \frac{1}{\left(x^2-x+1\right)\sqrt{x^2+x+1}},\mathrm{d}x<br>$$</p><p>求出其对应的特征方程系数<br>$$<br>\begin{align}<br>\begin{vmatrix}<br>a &amp; b \<br>d &amp; e<br>\end{vmatrix} &amp;= 2\<br>\begin{vmatrix}<br>a &amp; c \<br>d &amp; f<br>\end{vmatrix} &amp;= 0\<br>\begin{vmatrix}<br>b &amp; c \<br>e &amp; f<br>\end{vmatrix} &amp;= -2<br>\end{align}<br>$$<br>则特征方程为<br>$$<br>\begin{align}<br>x^2&amp;-1=0\<br>\rightarrow &amp;x= \pm1<br>\end{align}<br>$$<br>则令 $x=\displaystyle \frac{t-1}{t+1}$，代入原式得<br>$$<br>\begin{align}<br>&amp;\int \frac{1}{\left(x^2-x+1\right)\sqrt{x^2+x+1}},\mathrm{d}x \<br>&amp;=\int \frac{1}{\left[\left(\frac{t-1}{t+1}\right)^2-\left(\frac{t-1}{t+1}\right)+1\right]\cdot \sqrt{\left(\frac{t-1}{t+1}\right)^2+\left(\frac{t-1}{t+1}\right)+1}}\cdot \frac{\left(-2\right)}{\left(t+1\right)^2},\mathrm{d}t\<br>&amp;=\int \frac{2\left(t+1\right)}{\left[(t-1)^2-\left(t-1\right)\left(t+1\right)+\left(t+1\right)^2\right]\cdot \sqrt{(t-1)^2+\left(t-1\right)\left(t+1\right)+\left(t+1\right)^2}},\mathrm{d}t\<br>&amp;=2\cdot \left[\int \frac{t\cdot \mathrm{d}t}{\left(t^2+3\right)\cdot \sqrt{3t^2+1}}+\int \frac{\mathrm{d}t}{\left(t^2+3\right)\cdot \sqrt{3t^2+1}}\right]<br>\end{align}<br>$$<br>对于+号<strong>左边</strong>，直接凑微分<br>$$<br>\begin{align}<br>\int \frac{t\cdot \mathrm{d}t}{\left(t^2+3\right)\cdot \sqrt{3t^2+1}} &amp;=\frac{1}{6}\cdot \int \frac{\mathrm{d}\left(3t^2+1\right)}{\left(t^2+3\right)\cdot \sqrt{3t^2+1}}\<br>&amp;=\frac{1}{3}\cdot \int \frac{\mathrm{d}\left(\sqrt{3t^2\+1}\right)}{t^2+3}\<br>&amp;=\int \frac{\mathrm{d}\left(\sqrt{3t^2\+1}\right)}{3t^2+1+8}\<br>&amp;=\frac{1}{2\sqrt{2}} \cdot \arctan\frac{\sqrt{3t^2+1}}{2\sqrt{2}}+C<br>\end{align}<br>$$<br>对于+号<strong>右边</strong>，可用双元法</p><p>令<br>$$<br>x=\sqrt{3}t \quad \quad y=\sqrt{3t^2+1}<br>$$<br>则<br>$$<br>\begin{align}<br>\int \frac{\mathrm{d}t}{\left(t^2+3\right)\cdot \sqrt{3t^2+1}} &amp;= \sqrt{3}\cdot  \int \frac{\mathrm{d}x}{\left(x^2+9\right)\cdot y}\<br>&amp;=\sqrt{3}\cdot \int \frac{1}{\left(x^2+9\right)}\cdot \left[\left(-x^2\right)\cdot \mathrm{d}\left(\frac{y}{x}\right)\right]\<br>&amp;=\sqrt{3}\cdot \int \left(\frac{9}{x^2+9}-1 \right)\cdot \mathrm{d}\left(\frac{y}{x}\right)\<br>&amp;=9\sqrt{3}\cdot \int \frac{y^2-x^2}{x^2+9\cdot \left(y^2-x^2\right)},\mathrm{d}\left(\frac{y}{x}\right)-\sqrt{3}\cdot \ln \frac{y}{x}\<br>&amp;=9\sqrt{3}\cdot \int \frac{\left(\frac{y}{x}\right)^2-1}{9\cdot \left(\frac{y}{x}\right)^2-8},\mathrm{d}\left(\frac{y}{x}\right)-\sqrt{3}\cdot \ln \frac{y}{x}\<br>&amp;=\sqrt{3}\cdot \ln \frac{y}{x}+\sqrt{3}\cdot \int \frac{\mathrm{d}t}{8-9t^2}-\sqrt{3}\cdot \ln \frac{y}{x}\<br>&amp;=\frac{\sqrt{6}}{24}\cdot \ln \frac{3\cdot \sqrt{3t^2\+1}+2\sqrt{6}\cdot t}{3\cdot \sqrt{3t^2\+1}-2\sqrt{6}\cdot t}+C<br>\end{align}<br>$$<br>故最终结果为<br>$$<br>\int \frac{1}{\left(x^2-x+1\right)\sqrt{x^2+x+1}},\mathrm{d}x=\sqrt{2} \cdot \arctan\frac{\sqrt{3x^2+1}}{2\sqrt{2}}+\frac{\sqrt{6}}{12}\cdot \ln \frac{3\cdot \sqrt{3x^2\+1}+2\sqrt{6}\cdot x}{3\cdot \sqrt{3x^2\+1}-2\sqrt{6}\cdot x}+C<br>$$</p><h3 id="例2-4">例2</h3><p>$$<br>\int \frac{1}{\left(x^2+2\right)\sqrt{2x^2-2x+5}},\mathrm{d}x<br>$$</p><p>求出其对应的特征方程系数<br>$$<br>\begin{align}<br>\begin{vmatrix}<br>a &amp; b \<br>d &amp; e<br>\end{vmatrix} &amp;= -2\<br>\begin{vmatrix}<br>a &amp; c \<br>d &amp; f<br>\end{vmatrix} &amp;= 1\<br>\begin{vmatrix}<br>b &amp; c \<br>e &amp; f<br>\end{vmatrix} &amp;= 4<br>\end{align}<br>$$<br>则特征方程为<br>$$<br>\begin{align}<br>x^2&amp;-x-2=0\<br>\rightarrow &amp;x= 2 \quad or ,,,-1<br>\end{align}<br>$$<br>则令 $x=\displaystyle \frac{2t-1}{t+1} $，代入原式得<br>$$<br>\begin{align}<br>\int \frac{1}{\left(x^2+2\right)\sqrt{2x^2-2x+5}},\mathrm{d}x &amp;= \frac{1}{3}\cdot \int \frac{t+1}{\left(2t^2+1\right)\sqrt{t^2+1}},\mathrm{d}t\<br>&amp;= \frac{1}{3}\cdot \int \frac{t}{\left(2t^2+1\right)\sqrt{t^2+1}},\mathrm{d}t+ \frac{1}{3}\cdot \int \frac{1}{\left(2t^2+1\right)\sqrt{t^2+1}},\mathrm{d}t\<br>\end{align}<br>$$<br>同例1的分析步骤，对左边的式子凑微分，对右边的式子使用双元法</p><p>最终得到答案为</p><p>$$<br>\int \frac{1}{\left(x^2+2\right)\sqrt{2x^2-2x+5}},\mathrm{d}x=\frac{\sqrt{2}}{12}\cdot \ln \frac{\sqrt{2x^2+2}-1}{\sqrt{2x^2+2}+1}-\frac{1}{3}\cdot \arctan \frac{\sqrt{x^2+1}}{x}+C<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不定积分热潮：双元法</title>
      <link href="/2025/06/25/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%83%AD%E6%BD%AE%EF%BC%9A%E5%8F%8C%E5%85%83%E6%B3%95/"/>
      <url>/2025/06/25/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%83%AD%E6%BD%AE%EF%BC%9A%E5%8F%8C%E5%85%83%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>双元法出自知乎答主 “虚调子”，本质上是一种特殊的凑微分手段，用来求解分式带根号的不定积分十分方便，在我下一篇有关莫比乌斯变换的笔记中要经常用到，所以先写一篇关于双元法的笔记吧</p><h1>实圆微分式</h1><p>对于实圆：<br>$$<br>x^2+y^2=A^2<br>$$<br>取微分：<br>$$<br>\begin{align*}<br>x, \mathrm{d}x&amp;+y, \mathrm{d}y=0\<br>\frac{, \mathrm{d}x}{y}&amp;=-\frac{, \mathrm{d}y}{x}\<br>\frac{, \mathrm{d}x}{iy}&amp;=\frac{, \mathrm{d}(iy)}{x}=\frac{, \mathrm{d}(x+iy)}{x+iy}\<br>\frac{, \mathrm{d}x}{y}&amp;=\frac{y, \mathrm{d}x-x, \mathrm{d}y}{y^2+x^2}<br>\end{align*}<br>$$</p><h1>虚圆微分式</h1><p>对于虚圆：<br>$$<br>x^2-y^2=A^2 \quad or \quad y^2-x^2=A^2<br>$$<br>取微分：<br>$$<br>\begin{align*}<br>x, \mathrm{d}x&amp;-y, \mathrm{d}y=0\<br>\frac{, \mathrm{d}x}{y}&amp;=\frac{, \mathrm{d}y}{x}=\frac{, \mathrm{d}x+, \mathrm{d}y}{x+y}\<br>\frac{, \mathrm{d}x}{y}&amp;=\frac{y, \mathrm{d}x-x, \mathrm{d}y}{y^2-x^2}<br>\end{align*}<br>$$</p><h1>双元第一公式：</h1><h2 id="Re">Re:</h2><p>$$<br>\int \frac{, \mathrm{d}x}{y} = \int \frac{y , \mathrm{d}x}{y^2}<br>$$</p><p>合分比由<br>$$<br>\frac{y , \mathrm{d}x}{y^2} = -\frac{x , \mathrm{d}y}{x^2} \left( \frac{, \mathrm{d}x}{y} = -\frac{, \mathrm{d}y}{x} \right)<br>$$<br>有<br>$$<br>= \int \frac{y , \mathrm{d}x - x , \mathrm{d}y}{x^2 + y^2} = \int \frac{y^2}{x^2 + y^2} , \mathrm{d} \left( \frac{x}{y} \right) = \int \frac{1}{1 + \left( \frac{x}{y} \right)^2} , \mathrm{d} \left( \frac{x}{y} \right) = \arctan \frac{x}{y}<br>$$</p><h2 id="Im">Im:</h2><p>$$<br>\int \frac{, \mathrm{d}x}{y} = \int \frac{, \mathrm{d}x + , \mathrm{d}y}{y + x} = \int \frac{, \mathrm{d}(x + y)}{x + y} = \ln (x + y)<br>$$</p><p>故<br>$$<br>\int \frac{, \mathrm{d}x}{y} =<br>\begin{cases}<br>\arctan \displaystyle \frac{x}{y}, &amp; \text{Re} \<br>\ln (x + y), &amp; \text{Im}<br>\end{cases}<br>$$</p><h1>双元第三公式</h1><h2 id="Re：">Re：</h2><p>$$<br>\begin{align*}<br>\int \frac{, \mathrm{d}x}{y^3}&amp;=\int \frac{1}{y^2} \cdot \frac{, \mathrm{d}x}{y}=\int \frac{1}{y^2} \cdot \frac{y, \mathrm{d}x}{y^2}=\int \frac{1}{y^2} \cdot \frac{y, \mathrm{d}x - x, \mathrm{d}y}{y^2 + x^2}\<br>&amp;=\frac{1}{y^2 + x^2} \int \frac{y, \mathrm{d}x - x, \mathrm{d}y}{y^2}=\frac{1}{y^2 + x^2} \int , \mathrm{d}\left( \frac{x}{y} \right) \<br>&amp;=\frac{1}{y^2 + x^2} \cdot \frac{x}{y}<br>\end{align*}<br>$$</p><h3 id="Im-2">Im:</h3><p>$$<br>\begin{align*}<br>\int \frac{, \mathrm{d}x}{y^3}&amp;=\int \frac{1}{y^2} \cdot \frac{, \mathrm{d}x}{y}=\int \frac{1}{y^2} \cdot \frac{y, \mathrm{d}x}{y^2}=\int \frac{1}{y^2} \cdot \frac{y, \mathrm{d}x - x, \mathrm{d}y}{y^2 - x^2}\<br>&amp;=\frac{1}{y^2 - x^2} \int \frac{y, \mathrm{d}x - x, \mathrm{d}y}{y^2}=\frac{1}{y^2 - x^2} \int , \mathrm{d}\left( \frac{x}{y} \right)\<br>&amp;=\frac{1}{y^2 - x^2} \cdot \frac{x}{y}<br>\end{align*}<br>$$</p><p>故<br>$$<br>\int \frac{, \mathrm{d}x}{y^3} =<br>\begin{cases}<br>\displaystyle \frac{1}{y^2 + x^2} \cdot \frac{x}{y}, &amp; \text{Re} \<br>\displaystyle \frac{1}{y^2 - x^2} \cdot \frac{x}{y}, &amp; \text{Im}<br>\end{cases}<br>$$<br><strong>总括为</strong><br>$$<br>\int \frac{, \mathrm{d}x}{y^3} = \frac{1}{y^2 \pm x^2} \cdot \frac{x}{y}<br>$$</p><h1>双元乘积公式</h1><p>$$<br>\begin{align}<br>\int y, \mathrm{d}x &amp;=\frac{\displaystyle \int (y, \mathrm{d}x + x, \mathrm{d}y) + \int (y, \mathrm{d}x - x, \mathrm{d}y)}{2}\<br>&amp;= \frac{\displaystyle \int , \mathrm{d}(xy)}{2} + \frac{\displaystyle \int (y, \mathrm{d}x - x, \mathrm{d}y)}{2}\<br>&amp;=\frac{1}{2}xy + \frac{\displaystyle \int (y, \mathrm{d}x - x, \mathrm{d}y)}{2}\<br>\end{align}<br>$$</p><p>其中<br>$$<br>\begin{align}<br>\frac{1}{2} \int (y, \mathrm{d}x - x, \mathrm{d}y) &amp;= \frac{y^2 \pm x^2}{2} \int \frac{y, \mathrm{d}x - x, \mathrm{d}y}{y^2 \pm x^2} \<br>&amp;= \frac{y^2 \pm x^2}{2} \int \frac{, \mathrm{d}x}{y}<br>\end{align}<br>$$<br><strong>最终形式</strong><br>$$<br>\int y, \mathrm{d}x = \frac{1}{2}xy + \frac{y^2 \pm x^2}{2} \int \frac{, \mathrm{d}x}{y}<br>$$</p><h1>双元点火不足公式</h1><p>对于<br>$$<br>y^2 \pm x^2=A^2<br>$$<br><strong>递推公式</strong>：<br>$$<br>\int y^n , \mathrm{d}x = \frac{1}{n + 1}(y^n x) + \frac{n}{n + 1}(A) \int y^{n - 2} , \mathrm{d}x\<br>\int \frac{, \mathrm{d}x}{y^n} = \frac{1}{n - 2}\cdot\frac{x}{y^{n - 2}A} + \frac{n - 3}{n - 2}\cdot\frac{1}{A} \int \frac{, \mathrm{d}x}{y^{n - 2}}<br>$$<br><strong>推论（特殊情况）</strong>：<br>$$<br>\int y , \mathrm{d}x = \frac{1}{2}(xy) + \frac{1}{2}(A) \int \frac{, \mathrm{d}x}{y}\<br>\int \frac{, \mathrm{d}x}{y^3} = \frac{1}{A}\cdot\frac{x}{y}<br>$$</p><h1>其余常见构型</h1><p>$$<br>\begin{align*}<br>\int \frac{, \mathrm{d}x}{x^2y}&amp;=-\frac{1}{A}\cdot \frac{y}{x}\<br>\int \frac{, \mathrm{d}x}{xy^2}&amp;=-\frac{1}{A}\cdot \ln\frac{y}{x}=\frac{1}{A}\cdot \ln\frac{x}{y}<br>\end{align*}<br>$$</p><h1>典型例题</h1><p>我们先从简单的基本积分开始，熟悉双元法的解题流程</p><h2 id="普通双元配凑">普通双元配凑</h2><h3 id="一、">一、</h3><p>$$<br>\int \frac{, \mathrm{d}x}{\sqrt{x^2+a^2}}<br>$$</p><p>令 $y=\sqrt{x^2+a^2}$，则有 $y^2-x^2=a^2$，取微分得 $x, \mathrm{d}x=y, \mathrm{d}y$</p><p>且有<br>$$<br>\frac{, \mathrm{d}x}{y}=\frac{, \mathrm{d}y}{x}=\frac{, \mathrm{d}\left( x+y \right)}{x+y}<br>$$<br>则原式为<br>$$<br>\begin{align}<br>\int \frac{, \mathrm{d}x}{y}=\frac{, \mathrm{d}\left( x+y \right)}{x+y} &amp;=\ln |x+y|+C\<br>&amp;=\ln|x+\sqrt{x^2+a^2}|+C<br>\end{align}<br>$$</p><h3 id="二、">二、</h3><p>$$<br>\int \frac{, \mathrm{d}x}{x\sqrt{a^2-x^2}}<br>$$</p><p>令 $y=\sqrt{a^2-x^2}$</p><p>则原式为<br>$$<br>\begin{align}<br>\int \frac{, \mathrm{d}x}{x\sqrt{a^2-x^2}} &amp;=\int \frac{, \mathrm{d}x}{xy}=-\int \frac{, \mathrm{d}y}{x^2}\<br>&amp;=\int \frac{, \mathrm{d}y}{y^2-a^2}=\frac{1}{2a}\ln|\frac{\sqrt{a^2-x^2}-a}{\sqrt{a^2-x^2}+a}|+C<br>\end{align}<br>$$</p><h3 id="三、">三、</h3><p>$$<br>\int \ln\left( \sqrt{x+1}-\sqrt{1-x} \right)dx<br>$$</p><p>令 $m=\sqrt{x+1},m=\sqrt{1-x}$，则有 $m^2+n^2=2$，取微分得 $x, \mathrm{d}x=y, \mathrm{d}y$</p><p>则原式为<br>$$<br>\begin{align}<br>\int \ln\left( \sqrt{x+1}+\sqrt{1-x} \right), \mathrm{d}x &amp;=x\ln(m+n)-\int x, \mathrm{d}\ln(m+n)\<br>&amp;=x\ln(m+n)-x\cdot \frac{, \mathrm{d}m+, \mathrm{d}n}{m+n}\<br>&amp;=x\ln(m+n)-\frac{1}{2}\int (m-n)(, \mathrm{d}m+, \mathrm{d}n)\<br>&amp;=x\ln(m+n)-\frac{1}{4}(m^2+n^2)+\int \frac{n, \mathrm{d}m-m, \mathrm{d}n}{2}\<br>&amp;=x\ln (m+n)-\frac{1}{2}x+\int \frac{n^2, \mathrm{d}\left( \frac{m}{n} \right)}{m^2+n^2}\<br>&amp;=x\ln (m+n)-\frac{1}{2}x+\int \frac{, \mathrm{d}\left( \frac{m}{n} \right)}{\left( \frac{m}{n} \right)^2+1}\<br>&amp;=x\ln\left( \sqrt{x+1}+\sqrt{1-x} \right)-\frac{1}{2}x+\arctan{\sqrt{\frac{1+x}{1-x}}}+C<br>\end{align}<br>$$</p><h3 id="四、">四、</h3><p>$$<br>\int \frac{, \mathrm{d}x}{\sqrt{x^2+2x+3}}<br>$$</p><p>令<br>$$<br>m=x+1,\quad n=\sqrt{x^2+2x+3}<br>$$<br>原式为<br>$$<br>\begin{align}<br>\int \frac{, \mathrm{d}m}{n}&amp;=\int \frac{, \mathrm{d}\left(m+n\right)}{m+n}\<br>&amp;=\ln|m+n|+C\<br>&amp;=\ln|x+1+\sqrt{x^2+2x+3}|+C<br>\end{align}<br>$$</p><h3 id="五、">五、</h3><p>$$<br>\int \sqrt{x^2+2x+3}<br>$$</p><p>同上题所示设双元</p><p>原式为<br>$$<br>\begin{align}<br>\int ndm&amp;=\frac{1}{2}mn+\frac{n^2-m^2}{2}\int \frac{, \mathrm{d}m}{n}\<br>&amp;=\frac{1}{2}\left(x+1\right)\sqrt{x^2+2x+3}+\ln|x+1+\sqrt{x^2+2x+3}|+C<br>\end{align}<br>$$</p><h3 id="六、">六、</h3><p>$$<br>\int \frac{x, \mathrm{d}x}{\sqrt{-x^2-2x+3}}<br>$$</p><p>令<br>$$<br>m=x+1,\quad n=\sqrt{-x^2-2x+3}<br>$$<br>原式为<br>$$<br>\begin{align}<br>\int \frac{\left(m-1\right), \mathrm{d}m}{n} &amp;= \int \frac{m, \mathrm{d}m}{n}-\frac{, \mathrm{d}m}{n}\<br>&amp;=-\int , \mathrm{d}n-\arcsin \frac{m}{2}\<br>&amp;=-\sqrt{-x^2-2x+3}-\arcsin\frac{x+1}{2}+C<br>\end{align}<br>$$<br>接下来是一些技巧性配凑</p><h2 id="对勾双元配凑">对勾双元配凑</h2><h3 id="七、">七、</h3><p>$$<br>\int \frac{, \mathrm{d}x}{1+x^4}<br>$$</p><p>令<br>$$<br>m=x+\displaystyle \frac{1}{x},\quad n=x-\frac{1}{x}<br>$$<br>原式为<br>$$<br>\begin{align}<br>\int  \frac{, \mathrm{d}x}{1+x^4} &amp;=\int \frac{\frac{, \mathrm{d}x}{x^2}}{x^2+\frac{1}{x^2}}=\int \frac{, \mathrm{d}\left(-\frac{1}{x}\right)}{x^2+\frac{1}{x^2}}\<br>&amp;=\int \frac{, \mathrm{d}\left(\frac{n-m}{2}\right)}{m^2-2}=\frac{1}{2}\int \frac{, \mathrm{d}n}{n^2+2}-\frac{1}{2}\int \frac{, \mathrm{d}m}{m^2-2}\<br>&amp;=\frac{1}{2\sqrt{2}}\arctan\frac{x-\frac{1}{x}}{\sqrt{2}}-\frac{1}{4\sqrt{2}}\ln|\frac{x+\frac{1}{x}-\sqrt{2}}{x+\frac{1}{x}+\sqrt{2}}|+C<br>\end{align}<br>$$<br>注：为确保严谨，此处最好用如下公式进行间断点修正<br>$$<br>\begin{align*}<br>\arctan\left(k\left(x-\frac{1}{x}\right)\right) &amp;= \arctan\left(k\left(x-\frac{1}{x}\right)\right)</p><ul><li>\arctan\left(\frac{1}{kx}\right) + \arctan\left(kx\right) \<br>&amp;= \arctan\left(kx^3 + \left(\frac{1}{k}-1\right)x\right) + \arctan\left(kx\right)<br>\end{align*}<br>$$</li></ul><h3 id="八、">八、</h3><p>对勾三元<br>$$<br>\int \frac{1 - x^2}{1 + x^2} \frac{, \mathrm{d}x}{\sqrt{x^4 + x^2 + 1}}<br>$$</p><p>令</p><p>$$<br>p = x + \frac{1}{x}, \quad q = x - \frac{1}{x}, \quad r = \frac{\sqrt{x^4 + x^2 + 1}}{x}<br>$$</p><p>原式为<br>$$<br>\begin{align}<br>\int \frac{1 - x^2}{1 + x^2} \frac{, \mathrm{d}x}{\sqrt{x^4 + x^2 + 1}} &amp;= - \int \frac{, \mathrm{d}p}{pr}\<br>&amp;= - \int \frac{, \mathrm{d}r}{p^2} \<br>&amp;= - \int \frac{, \mathrm{d}r}{r^2 + 1}\<br>&amp;= \arctan \left( \frac{x}{\sqrt{x^4 + x^2 + 1}} \right) + C<br>\end{align}<br>$$</p><h2 id="三角三元">三角三元</h2><h3 id="九、">九、</h3><p>$$<br>\int \frac{\sin^2 x \cos x}{\sin x + \cos x} , \mathrm{d}x<br>$$</p><p>令<br>$$<br>p = \sin x + \cos x, \quad q = \sin x - \cos x, \quad r = \sqrt{2}<br>$$</p><p>原式为<br>$$<br>\begin{align}<br>\int \frac{\sin^2 x \cos x}{\sin x + \cos x} , \mathrm{d}x &amp;= \int \frac{\frac{r^2}{2} \cdot \frac{p-q}{2} , , \mathrm{d}p}{pq}\<br>&amp;= \frac{1}{4} \int \frac{r^2 , \mathrm{d}p}{q} - \frac{1}{4} \int \frac{r^2 , \mathrm{d}p}{p}\<br>&amp;= \frac{1}{4} \int \frac{, \mathrm{d}p}{q} - \frac{1}{4} \int q , \mathrm{d}p - \frac{1}{4} \int \frac{p^2 - 1}{p} , \mathrm{d}p\<br>&amp;= -\frac{1}{8} \int p , \mathrm{d}q + q , \mathrm{d}p - \frac{1}{4} \left( \frac{1}{2} p^2 - \ln p \right)\<br>&amp;= \frac{1}{4} \ln p - \frac{1}{8} \left( pq + p^2 \right)\<br>&amp;= \frac{1}{4} \ln \left( \sin x + \cos x \right) - \frac{1}{4} \cos x \left( \sin x + \cos x \right) + C<br>\end{align}<br>$$</p><h2 id="其他双元配凑">其他双元配凑</h2><h3 id="十、">十、</h3><p>$$<br>\int \frac{, \mathrm{d}x}{x - \sqrt{x^2 + 2x}}<br>$$</p><p>令<br>$$<br>p = x + 1 + \sqrt{x^2 + 2x}, \quad q = x + 1 - \sqrt{x^2 + 2x}<br>$$</p><p>原式为<br>$$<br>\begin{align}<br>\int \frac{, \mathrm{d}x}{x - \sqrt{x^2 + 2x}} &amp;= \int \frac{1}{q-1} , \mathrm{d}\left( \frac{p+q}{2} \right)\<br>&amp;= \frac{1}{2} \int \frac{, \mathrm{d}p}{q-1} + \frac{1}{2} \int \frac{, \mathrm{d}q}{q-1}\<br>&amp;= \frac{1}{2} \int \frac{p , \mathrm{d}p}{1-p} + \frac{1}{2} \ln |q-1|\<br>&amp;= -\frac{1}{2} \int \frac{p-1+1}{p-1} , \mathrm{d}p + \frac{1}{2} \ln |q-1|\<br>&amp;= -\frac{1}{2} \int , \mathrm{d}p - \frac{1}{2} \int \frac{, \mathrm{d}p}{p-1} + \frac{1}{2} \ln |q-1|\<br>&amp;= -\frac{p}{2} - \frac{1}{2} \ln |p-1| + \frac{1}{2} \ln |q-1| + C\<br>&amp;= \frac{1}{2} \ln \left| \frac{x - \sqrt{x^2 + 2x}}{x + \sqrt{x^2 + 2x}} \right| - \frac{x + 1 + \sqrt{x^2 + 2x}}{2} + C<br>\end{align}<br>$$</p><h3 id="十一、">十一、</h3><p>$$<br>\int \sqrt{\frac{e^x - 1}{e^x + 1}} , dx<br>$$</p><p>令<br>$$<br>m = e^x, \quad n = \sqrt{e^{2x} - 1}<br>$$</p><p>$$<br>dm = e^x, \mathrm{d}x = m , \mathrm{d}x \implies \mathrm{d}x = \frac{dm}{m}<br>$$</p><p>原式为<br>$$<br>\begin{align}<br>\int \sqrt{\frac{e^x - 1}{e^x + 1}} , \mathrm{d}x &amp;= \int \frac{\sqrt{m - 1}}{\sqrt{m + 1}} \cdot \frac{, \mathrm{d}m}{m}\<br>&amp;= \int \frac{m - 1}{n} \cdot \frac{, \mathrm{d}m}{m} \<br>&amp;= \int \frac{, \mathrm{d}m}{n} - \int \frac{, \mathrm{d}m}{m n}\<br>&amp;= \ln(m + n)-\int \frac{, \mathrm{d}n}{n^2 + 1} \<br>&amp;= \ln(m + n)-\arctan n+C\<br>&amp;= \ln\left(e^x + \sqrt{e^{2x} - 1}\right) - \arctan\left(\sqrt{e^{2x} - 1}\right) + C<br>\end{align}<br>$$</p><p>双元法还有许多延申（如下图所示），本文所介绍的方法足以解决绝大部分的简单不定积分，想继续深入了解的请关注&quot;虚调子&quot;大佬的知乎账号</p><p><img src="https://s21.ax1x.com/2025/06/18/pVEHDiV.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第六章（3）</title>
      <link href="/2025/06/23/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A315/"/>
      <url>/2025/06/23/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A315/</url>
      
        <content type="html"><![CDATA[<h1>二维问题的矩形元</h1><h2 id="一、问题与变分形式">一、问题与变分形式</h2><p>二维 Poisson 方程（ Dirichlet 边界）：<br>$$<br>\begin{cases}<br>-\Delta u = f(x,y), &amp; (x,y) \in \Omega = [a,b] \times [c,d] \<br>u|_{\partial\Omega} = g(x,y)<br>\end{cases}<br>$$<br>变分形式（虚功原理）：</p><p>找 $u \in H_0^1(\Omega)$（满足边界条件的 Sobolev 空间 ），使<br>$$<br>\int_{\Omega} \nabla u \cdot \nabla v , dxdy = \int_{\Omega} fv , dxdy<br>$$<br>对任意 $v \in H_0^1(\Omega)$ 成立（$\Delta$ 是 Laplace 算子，$\nabla$ 是梯度 ）</p><h2 id="二、Galerkin-离散（有限元方法）">二、Galerkin 离散（有限元方法）</h2><p><strong>有限元空间 $U_h$</strong>：</p><p>取 $U_h$ 为<strong>分片双线性函数空间</strong>（Lagrange 型，在矩形剖分单元上线性 ），满足 $u_h|_{\partial\Omega} = g_h$（$g_h$ 是 $g$ 的边界插值 ）</p><p><strong>离散方程</strong>：</p><p>找 $u_h \in U_h$ 使<br>$$<br>\int_{\Omega} \nabla u_h \cdot \nabla v_h , dxdy = \int_{\Omega} f v_h , dxdy<br>$$<br>对任意 $v_h \in U_h$（$v_h|_{\partial\Omega} = 0$ ）成立，代入基函数展开得线性方程组</p><h2 id="三、矩形剖分与基函数">三、矩形剖分与基函数</h2><p><strong>区域剖分</strong>：</p><p>将 $\Omega$ 剖分为矩形单元 $R_{ij} = [x_i, x_{i+1}] \times [y_j, y_{j+1}]$ ，步长 $\Delta x = x_{i+1}-x_i$，$\Delta y = y_{j+1}-y_j$ 。</p><p><strong>双线性基函数</strong>：</p><p>单元上基函数为 $1, x, y, xy$ 的线性组合（双线性插值 ），通过节点值 $u_{ij}, u_{i+1,j}, u_{i,j+1}, u_{i+1,j+1}$ 构造，满足分片双线性与 Kronecker  delta 性质（节点处取 1，其余为 0 ）</p><h3 id="标准化与坐标变换">标准化与坐标变换</h3><p>对矩形单元 $R_{ij} = [x_i, x_{i+\Delta x}] \times [y_j, y_{j+\Delta y}]$，通过<strong>仿射变换</strong>标准化到参考单元 $[0,1] \times [0,1]$：<br>$$<br>\xi = \frac{x - x_i}{\Delta x}, \quad \eta = \frac{y - y_j}{\Delta y}<br>$$</p><h3 id="双线性插值函数构造">双线性插值函数构造</h3><p>设单元顶点值为 $u_{00}, u_{10}, u_{01}, u_{11}$（对应 $(\xi,\eta)=(0,0),(1,0),(0,1),(1,1)$ ），双线性插值函数 $p(\xi,\eta)$ 满足：<br>$$<br>p(\xi,\eta) = c_0 + c_1 \xi + c_2 \eta + c_3 \xi\eta<br>$$<br>通过顶点插值条件<br>$$<br>p(0,0)=u_{00},\quad p(1,0)=u_{10}\<br>p(0,1)=u_{01},\quad p(1,1)=u_{11}<br>$$<br>解得 <strong>Lagrange 插值多项式</strong>：<br>$$<br>p(\xi, \eta) = u_{00}(1 - \xi)(1 - \eta) + u_{10} \xi(1 - \eta) + u_{01}(1 - \xi)\eta + u_{11} \xi \eta<br>$$</p><p><strong>二维 Lagrange 基函数</strong>：<br>$$<br>\begin{align*}<br>p^{(0,0)}(\xi, \eta) &amp;= (1 - \xi)(1 - \eta) = N_0(\xi)N_0(\eta) \<br>p^{(1,0)}(\xi, \eta) &amp;= \xi(1 - \eta) = N_1(\xi)N_0(\eta) \<br>p^{(0,1)}(\xi, \eta) &amp;= (1 - \xi)\eta = N_0(\xi)N_1(\eta) \<br>p^{(1,1)}(\xi, \eta) &amp;= \xi \eta = N_1(\xi)N_1(\eta)<br>\end{align*}<br>$$<br>表示为<strong>Lagrange 基函数的乘积形式</strong>：<br>$$<br>p(\xi,\eta) = u_{00} N_0(\xi) N_0(\eta) + u_{10} N_1(\xi) N_0(\eta) + u_{01} N_0(\xi) N_1(\eta) + u_{11} N_1(\xi) N_1(\eta)<br>$$<br>基函数为：<br>$$<br>N_0(t) = 1 - t, \quad N_1(t) = t<br>$$</p><h2 id="四、单元插值函数（-x-y-in-R-ij-）">四、单元插值函数（$  (x,y) \in R_{ij}  $ ）</h2><p>$$<br>u_h(x,y) = u_{ij} p_{ij}^{(0,0)}(\xi,\eta) + u_{i+1,j} p_{ij}^{(1,0)}(\xi,\eta) + u_{i,j+1} p_{ij}^{(0,1)}(\xi,\eta) + u_{i+1,j+1} p_{ij}^{(1,1)}(\xi,\eta)<br>$$</p><p>给矩形单元排序（从左下至上依次记为 $R_{11},R_{12},\cdots,R_{MN}$）<br>$$<br>u_h(x,y) =<br>\begin{cases}<br>u_{11} p_{11}^{(0,0)}(\xi,\eta) + u_{21} p_{11}^{(1,0)}(\xi,\eta) + u_{12} p_{11}^{(0,1)}(\xi,\eta) + u_{22} p_{11}^{(1,1)}(\xi,\eta), \quad R_{11}\<br>u_{12} p_{12}^{(0,0)}(\xi,\eta) + u_{22} p_{12}^{(1,0)}(\xi,\eta) + u_{13} p_{12}^{(0,1)}(\xi,\eta) + u_{23} p_{11}^{(1,1)}(\xi,\eta), \quad R_{12} \<br>\quad \quad \vdots \<br>u_{1,N} p_{1N}^{(0,0)}(\xi,\eta) + u_{2,N} p_{1N}^{(1,0)}(\xi,\eta) + u_{1,N+1} p_{1N}^{(0,1)}(\xi,\eta) + u_{2,N+1} p_{1N}^{(1,1)}(\xi,\eta) , \quad R_{1N}\<br>\quad \quad \vdots \<br>u_{M,N} p_{MN}^{(0,0)}(\xi,\eta) + u_{M+1,N} p_{MN}^{(1,0)}(\xi,\eta) + u_{M,N+1} p_{MN}^{(0,1)}(\xi,\eta) + u_{M+1,N+1} p_{MN}^{(1,1)}(\xi,\eta), \quad R_{MN}<br>\end{cases}<br>$$</p><h2 id="五、整体双线性基函数">五、整体双线性基函数</h2><p>$$<br>\varphi_{ij}(x,y) =<br>\begin{cases}<br>\left(1 - \frac{|x - x_i|}{\Delta x}\right)\left(1 - \frac{|y - y_j|}{\Delta y}\right), &amp; (x,y) \in R_{ij} \cup R_{i+1,j} \cup R_{i,j+1} \cup R_{i+1,j+1} \<br>0, &amp; \text{其他}<br>\end{cases}<br>$$</p><h2 id="六、自由度与空间维数">六、自由度与空间维数</h2><p>若把 $u_h$ 在所有节点的函数值都当作自变量，节点数 $  (M+1) \times (N+1)  $，故：<br>$$<br>\text{$\varphi_{i,j}$ 的个数为}  (M+1)(N+1), \quad \dim(U_h) = (M+1)(N+1)<br>$$</p><h2 id="七、网格剖分与数据结构">七、网格剖分与数据结构</h2><h3 id="一、网格剖分与标号规则">一、网格剖分与标号规则</h3><p><strong>节点标号</strong>：</p><p>矩形区域剖分为 $M \times N$ 单元，节点总数 $K = (M+1)(N+1)$，按顺序标号 $1, 2, \dots, K$ 。</p><p><strong>单元标号</strong>：<br>单元总数 $M \cdot N$，按顺序标号 $1, 2, \dots, M \cdot N$ ，每个单元对应 4 个顶点（左下→右下→右上→左上 ）。</p><h3 id="二、数据结构定义">二、数据结构定义</h3><p><strong>节点数组（node）</strong>：</p><p>存储节点坐标，维度 $K \times 2$ ，每行对应一个节点的 $(x,y)$ 坐标：<br>$$<br>\text{node} = \begin{bmatrix} x^{(1)} &amp; y^{(1)} \ \vdots &amp; \vdots \ x^{(K)} &amp; y^{(K)} \end{bmatrix}<br>$$<br><strong>单元数组（elem）</strong>：<br>存储单元顶点的节点标号，维度 $M \cdot N \times 4$ ，每行对应一个单元的 4 个顶点标号（按左下→右下→右上→左上顺序 ）：<br>$$<br>\text{elem} = \begin{bmatrix} i_{j,1} &amp; i_{j,2} &amp; i_{j,3} &amp; i_{j,4} \ \vdots &amp; \vdots &amp; \vdots &amp; \vdots \end{bmatrix}<br>$$</p><p>$$<br>R_{ij}(i,j)=[u_{ij},u_{i+1,j},u_{i,j+1},u_{i+1,j+1}]<br>$$</p><h2 id="八、单元刚度矩阵积分">八、单元刚度矩阵积分</h2><p>$$<br>\iint_{R_{ij}} \nabla u_h \cdot \nabla v_h , dxdy = \iint_{R_{ij}} \left( \frac{\partial u_h}{\partial x} \frac{\partial v_h}{\partial x} + \frac{\partial u_h}{\partial y} \frac{\partial v_h}{\partial y} \right) dxdy<br>$$</p><h2 id="九、插值函数与导数（局部坐标-xi-eta-）">九、插值函数与导数（局部坐标 $  \xi, \eta  $ ）</h2><p>单元内 $  u_h(x,y)  $ 展开：<br>$$<br>u_h(x,y) = u_{ij} N_0(\xi)N_0(\eta) + u_{i+1,j} N_1(\xi)N_0(\eta) + u_{i,j+1} N_0(\xi)N_1(\eta) + u_{i+1,j+1} N_1(\xi)N_1(\eta)<br>$$<br>$  x  $ 方向导数（$  \displaystyle \frac{\partial \xi}{\partial x} = \frac{1}{\Delta x}  $ ）：<br>$$<br>\frac{\partial u_h}{\partial x} = \frac{1}{\Delta x} \left[ u_{ij} (- (1 - \eta)) + u_{i+1,j} (1 - \eta) + u_{i,j+1} (- \eta) + u_{i+1,j+1} \eta \right]<br>$$<br>$v_h$ 同理</p><h2 id="十、单元刚度矩阵计算（-x-方向示例）">十、单元刚度矩阵计算（$  x  $ 方向示例）</h2><p>$$<br>\begin{align}<br>\iint_{R_{ij}} \frac{\partial u_h}{\partial x} \frac{\partial v_h}{\partial x},dxdy&amp;= \int_{R_{ij}} [u_{ij}[-(1-\eta)]+\cdots]\cdot[v_{ij}[-(1-\eta)]+\cdots]\cdot\frac{1}{\Delta x_i^2},dxdy\<br>&amp;=\int_0^1 \int_0^1   [u_{ij}[-(1-\eta)]+\cdots]\cdot[v_{ij}[-(1-\eta)]+\cdots]\cdot\frac{1}{\Delta x_i^2}\cdot \Delta x\cdot\Delta y,d\xi d\eta\<br>&amp;=(v_{ij},v_{i+1,j}, v_{i,j+1},v_{i+1,j+1}) \begin{bmatrix}<br>\displaystyle \int_0^1 (1-\eta)^2 d\eta &amp;\displaystyle  \int_0^1 -(1-\eta)^2 d\eta &amp; \times &amp;\times \<br>\times &amp; \times &amp; \times &amp;\times \<br>\times &amp; \times &amp; \times &amp;\times \<br>\times &amp; \times &amp; \times &amp;\times<br>\end{bmatrix} \frac{\Delta y}{\Delta x} \begin{bmatrix} u_{i j} \ u_{i+1,j} \ u_{i,j+1}\u_{i+1,j+1} \end{bmatrix}\<br>&amp;=(v_{ij},\cdots,v_{i+1,j+1})K_ex\begin{bmatrix} u_{i j} \ \vdots\u_{i+1,j+1} \end{bmatrix}<br>\end{align}<br>$$</p><p>$K_ey$ 同理</p><h2 id="十一、整体单元刚度矩阵">十一、整体单元刚度矩阵</h2><p>$$<br>K_e = K_{e}x + K_{e}y<br>$$</p><p>$  K_{e}y  $ 为 $  y  $ 方向单元刚度矩阵，对称推导</p><h2 id="十二、总刚度矩阵-K-的组装">十二、总刚度矩阵 $K$ 的组装</h2><p><strong>初始化</strong>：</p><p>总刚度矩阵 $K$ 维度为 $(M+1)(N+1) \times (M+1)(N+1)$，初始化为零矩阵：<br>$$<br>K = \text{zeros}(((M+1)(N+1), (M+1)(N+1)))<br>$$<br><strong>单元循环组装</strong>：</p><p>遍历每个单元（标号 $k=1$ 到 $ne = M \cdot N$ ），计算单元刚度矩阵并叠加到总矩阵对应位置（通过节点标号索引 ）</p><p>伪代码示意 ：<br>$$<br>\text{for } k = 1 : n_e \<br>\quad \text{将单元刚度矩阵按节点索引叠加到 } K \<br>\text{end}<br>$$</p><h2 id="十三、载荷向量的积分计算">十三、载荷向量的积分计算</h2><p>对载荷项 $\displaystyle \int_{\Omega} f v_h , dxdy$，在矩形单元 $R_{ij}$ 上通过<strong>双线性基函数</strong>展开，利用变量替换（标准化到参考单元 $[0,1] \times [0,1]$ ），将积分转化为：<br>$$<br>\begin{align}<br>\int_{R_{ij}} f v_h , dxdy &amp;=\int_0^1\int_0^1f(x_i+\Delta x\cdot\xi,y_j+\Delta y\cdot\eta)[v_{ij}N_0(\xi)N_0(\eta)+\cdots+v_{i+1,j+1}N_1(\xi)N_1(\eta)]\cdot \Delta x\cdot\Delta y,d\xi d\eta\</p><p>&amp;= (v_{ij}, \dots, v_{i+1,j+1}) \begin{bmatrix} \displaystyle \int_0^1 \int_0^1 f N_0(\xi)N_0(\eta) d\xi d\eta \ \vdots \ \displaystyle\int_0^1 \int_0^1 f N_1(\xi)N_1(\eta) d\xi d\eta \end{bmatrix} \Delta x \Delta y\<br>&amp;\approx(v_{ij}, \dots, v_{i+1,j+1})\begin{bmatrix} \frac{1}{4}f_{ij} \ \vdots \\frac{1}{4}f_{i+1,j+1}\end{bmatrix}\Delta x \Delta y<br>\end{align}<br>$$<br>$\Delta x, \Delta y$ 是单元步长，$v_j$ 是节点载荷系数</p><h2 id="十四、最终变分形式">十四、最终变分形式</h2><p>离散后的变分方程表示为：<br>$$<br>\mathbf{V}^T A \mathbf{U} = \mathbf{V}^T \mathbf{F}\<br>A=K<br>$$<br>其中，$A = K$ 是总刚度矩阵，$\mathbf{U}$ 是节点值向量，$\mathbf{V}$ 是检验函数向量，$\mathbf{F}$ 是载荷向量，体现有限元离散的<strong>线性方程组形式</strong>（$K \mathbf{U} = \mathbf{F}$ ）</p><h2 id="十五、边界条件处理">十五、边界条件处理</h2><p><strong>节点分类</strong>：</p><p>边界节点 $  \text{bdnode}  $（已知 $  U(\text{bdnode})  $ ）、自由节点 $  \text{freenode}  $（待求 $  U(\text{freenode})  $ ）</p><p><strong>变分约束</strong>：</p><p>检验函数 $  V(\text{bdnode}) = 0  $，自由节点 $  V(\text{freenode})  $ 任意，由此从整体系统 $  A U = F  $ 中提取自由节点子系统：<br>$$<br>A(\text{freenode}, :) U - F(\text{freenode}) = 0<br>$$<br><strong>子系统分解</strong>：<br>展开为自由节点与边界节点的矩阵块形式：<br>$$<br>A(\text{freenode}, \text{freenode}) U(\text{freenode}) + A(\text{freenode}, \text{bdnode}) U(\text{bdnode}) = F(\text{freenode})<br>$$<br><strong>求解自由节点</strong>：<br>移项得自由节点的代数方程：<br>$$<br>A(\text{freenode}, \text{freenode}) U(\text{freenode}) = F(\text{freenode}) - A(\text{freenode}, \text{bdnode}) U(\text{bdnode})<br>$$<br><strong>最终解为</strong>：<br>$$<br>U(\text{freenode}) = A(\text{freenode}, \text{freenode})^{-1} \left( F(\text{freenode}) - A(\text{freenode}, \text{bdnode}) U(\text{bdnode}) \right)<br>$$<br>核心是有限元中<strong>Dirichlet 边界条件的离散处理方法</strong>，通过节点分类和矩阵分块，将已知边界值代入整体系统，求解自由节点未知量</p><h1>三角元法</h1><h2 id="一、问题与变分形式-2">一、问题与变分形式</h2><p>二维 Poisson 方程（ Dirichlet 边界）：<br>$$<br>\begin{cases}<br>-\Delta u = f(x,y), &amp; (x,y) \in \Omega \<br>u|_{\partial\Omega} = g(x,y)<br>\end{cases}<br>$$<br>变分形式（虚功原理）：</p><p>找 $u \in H_0^1(\Omega)$（满足边界条件的 Sobolev 空间 ），使<br>$$<br>\int_{\Omega} \nabla u \cdot \nabla v , dxdy = \int_{\Omega} fv , dxdy<br>$$<br>对任意 $v \in H_0^1(\Omega)$ 成立（$\Delta$ 是 Laplace 算子，$\nabla$ 是梯度 ）</p><h2 id="二、三角元法的核心优势">二、三角元法的核心优势</h2><p>三角形剖分可<strong>逼近任意复杂曲线边界</strong>（通过多边形域近似 $\Omega$ ），适配工程中不规则区域（如飞机翼型、地质构造 ）的数值求解</p><h2 id="三、三角剖分规则">三、三角剖分规则</h2><p>将多边形域 $\Omega$ 剖分为有限个三角形单元 $\Delta_j$，需满足：</p><ol><li><p>单元不重叠（$\Delta_i^o \cap \Delta_j^o = \emptyset, i \neq j$ ，$^o$ 表示内部 ）</p></li><li><p>无悬挂节点（三角形顶点不落在另一三角形的边上 ）</p></li></ol><p>进一步定义<strong>正则剖分</strong>（最小角有下界 ）和<strong>拟一致剖分</strong>（单元尺寸均匀 ），保证有限元解的收敛性</p><h2 id="四、Lagrange-型三角元空间">四、Lagrange 型三角元空间</h2><p>有限元空间 $U_h$ 定义为：<br>$$<br>U_h = \left{ u \in H_0^1(\Omega) \mid u|<em>{\Delta_j} \in P^m(\Delta_j) \right}<br>$$<br>其中，$P^m(\Delta_j)$ 是三角形单元上的 $m$ 次 Lagrange 多项式，形式为：<br>$$<br>P_m(x,y) = \sum</em>{i+j \leq m} c_{ij} x^i y^j<br>$$<br>$m$ 次多项式的系数个数为 $\frac{1}{2}(m+1)(m+2)$，需取对应数量的插值节点保证唯一性</p><h2 id="五、单元与插值函数推导">五、单元与插值函数推导</h2><p>对二维 Poisson 方程的三角剖分单元 $\Delta_{(123)}$（节点按逆时针排序为 $(x_1,y_1),(x_2,y_2),(x_3,y_3)$ ），构造<strong>线性插值函数</strong> $p(x,y) = ax + by + c$ ，满足顶点插值条件 $p(x_i,y_i) = u_i$（$i=1,2,3$ ）</p><p>通过顶点条件建立线性方程组：<br>$$<br>\begin{cases}<br>a x_1 + b y_1 + c = u_1 \<br>a x_2 + b y_2 + c = u_2 \<br>a x_3 + b y_3 + c = u_3<br>\end{cases}<br>$$<br>写成矩阵形式 $A \begin{bmatrix} a \ b \ c \end{bmatrix} = \begin{bmatrix} u_1 \ u_2 \ u_3 \end{bmatrix}$ ，其中 $A = \begin{bmatrix} x_1 &amp; y_1 &amp; 1 \ x_2 &amp; y_2 &amp; 1 \ x_3 &amp; y_3 &amp; 1 \end{bmatrix}$</p><p>解得系数：<br>$$<br>\begin{bmatrix} a \ b \ c \end{bmatrix} = A^{-1} \begin{bmatrix} u_1 \ u_2 \ u_3 \end{bmatrix}<br>$$<br>因此，插值函数可表示为：<br>$$<br>p(x,y) = (x, y, 1) A^{-1} \begin{bmatrix} u_1 \ u_2 \ u_3 \end{bmatrix}<br>$$</p><h2 id="六、面积坐标（Lagrange-基函数）">六、面积坐标（Lagrange 基函数）</h2><p>定义<strong>面积坐标 $L_1,L_2,L_3$</strong>：<br>$$<br>(L_1, L_2, L_3) = (x, y, 1) A^{-1}<br>$$<br>则插值函数简化为：<br>$$<br>p(x,y) = u_1 L_1(x,y) + u_2 L_2(x,y) + u_3 L_3(x,y)<br>$$<br>其中，$L_i(x,y)$ 是线性 Lagrange 基函数，满足 $L_i(x_j,y_j) = \delta_{ij}$（Kronecker  delta ），且 $L_1 + L_2 + L_3 = 1$<br>$$<br>\begin{align}<br>L_1&amp;=\frac{1}{\det(A^T)}\begin{vmatrix} x &amp;x_2 &amp;x_3  \ y &amp; y_2 &amp; y_3 \ 1 &amp; 1 &amp; 1 \end{vmatrix}\<br>L_2&amp;=\frac{1}{\det(A^T)}\begin{vmatrix} x_1 &amp;x &amp;x_3  \ y_1 &amp; y &amp; y_3 \ 1 &amp; 1 &amp; 1 \end{vmatrix}\<br>L_3&amp;=\frac{1}{\det(A^T)}\begin{vmatrix} x_1 &amp;x_2 &amp;x \ y_1 &amp; y_2 &amp; y \ 1 &amp; 1 &amp; 1 \end{vmatrix}<br>\end{align}<br>$$</p><h2 id="七、几何意义（Cramer-法则）">七、几何意义（Cramer 法则）</h2><p>通过 Cramer 法则计算 $L_i$，发现分母 $  \det(A^T) = \det(A)  $ 与三角形面积相关：<br>$$<br>\det(A) = 2 S_{\Delta_{(123)}}<br>$$<br>其中<br>$$<br>S_{\Delta_{(123)}} = \frac{1}{2} \left| \det \begin{bmatrix} x_1 &amp; y_1 &amp; 1 \ x_2 &amp; y_2 &amp; 1 \ x_3 &amp; y_3 &amp; 1 \end{bmatrix} \right|<br>$$<br>记 $(x_1,y_1)\rightarrow(x_2,y_2)$ 的向量为 $\vec{a}$，$(x_1,y_1)\rightarrow(x_3,y_3)$ 的向量为 $\vec{b}$，则<br>$$<br>\vec a \times \vec b=\begin{vmatrix} i &amp;j &amp; k \ x_2-x_1 &amp; y_2-y_1 &amp; 0 \ x_3-x_1 &amp; y_3-y_1 &amp; 0 \end{vmatrix}<br>$$</p><p>$$<br>S_{\Delta_{(123)}} = \frac{1}{2} \begin{vmatrix}\vec a \times \vec b\end{vmatrix}<br>$$</p><h2 id="八、面积坐标与直角坐标的关系">八、面积坐标与直角坐标的关系</h2><p>$$<br>\begin{align}<br>L_1&amp;=\frac{2S_1}{2S}=\frac{S_1}{S}=\frac{(y_2 - y_3)(x - x_3) + (x_3 - x_2)(y - y_3)}{(y_2 - y_3)(x_1 - x_3) + (x_3 - x_2)(y_1 - y_3)}\<br>L_2&amp;=\frac{2S_2}{2S}=\frac{S_2}{S}=\frac{(y_3 - y_1)(x - x_3) + (x_1 - x_3)(y - y_3)}{(y_2 - y_3)(x_1 - x_3) + (x_3 - x_2)(y_1 - y_3)}\<br>L_3&amp;=\frac{2S_3}{2S}=\frac{S_3}{S}=\frac{(y_1 - y_2)(x - x_2) + (x_2 - x_1)(y - y_2)}{(y_2 - y_3)(x_1 - x_3) + (x_3 - x_2)(y_1 - y_3)}\<br>\end{align}<br>$$</p><p>$$<br>x = L_1 x_1 + L_2 x_2 + L_3 x_3\<br>y = L_1 y_1 + L_2 y_2 + L_3 y_3<br>$$</p><h2 id="九、单元插值函数">九、单元插值函数</h2><p>三角形单元上的线性插值函数表示为：<br>$$<br>u_h(x,y) = u_1 L_1(x,y) + u_2 L_2(x,y) + u_3 L_3(x,y)<br>$$<br>$u_i$ 是顶点 $i$ 的函数值，$L_i$ 是面积坐标基函数</p><h3 id="十、全域基函数与自由度">十、全域基函数与自由度</h3><p>通过 “单元拼接” 构造全域基函数 $\varphi_j(x,y)$（在节点 $P_j$ 处取 1，其他单元为 0 ），有限元空间 $U_h$ 的维度为节点总数 $nd$（自由度 ）<br>$$<br>u_h(x,y)=\sum_{j=1}^{nd}u_j\cdot \varphi_j(x,y)<br>$$</p><h2 id="十一、单元刚度矩阵">十一、单元刚度矩阵</h2><p>单元刚度矩阵 $K_e$ 由变分形式的积分推导：<br>$$<br>\begin{align}<br>\int_{\Delta_j} \nabla u_h \cdot \nabla v_h , dxdy  &amp;= \int_{\Delta_j}(u_1^{(j)}\nabla L_1^{(j)}+u_2^{(j)}\nabla L_2^{(j)}+u_3^{(j)}\nabla L_3^{(j)})(v_1^{(j)}\nabla L_1^{(j)}+v_2^{(j)}\nabla L_2^{(j)}+v_3^{(j)}\nabla L_3^{(j)})\<br>&amp;=(v_1^{(j)},v_2^{(j)}, v_3^{(j)}) \begin{bmatrix}<br>\displaystyle \int_{\Delta j} \nabla L_1^{(j)}\nabla L_1^{(j)} dxdy &amp;\displaystyle  \int_{\Delta j} \nabla L_1^{(j)}\nabla L_2^{(j)} dxdy &amp; \times &amp;\<br>\times &amp; \times &amp; \times  \<br>\times &amp; \times &amp; \times  \<br>\end{bmatrix}<br>\begin{bmatrix} u_1^j \ u_2^j \u_3^j \end{bmatrix}\<br>&amp;=(v_1^{(j)},v_2^{(j)}, v_3^{(j)}) \cdot K_e \cdot \begin{bmatrix} u_1^j \ u_2^j \u_3^j \end{bmatrix}<br>\end{align}<br>$$</p><h2 id="十二、面积坐标的梯度">十二、面积坐标的梯度</h2><p>对面积坐标 $L_i(x,y)$，通过对坐标变换矩阵求导，得梯度分量：<br>$$<br>\frac{\partial L_i}{\partial x} = \frac{y_j - y_k}{2S}, \quad \frac{\partial L_i}{\partial y} = \frac{x_k - x_j}{2S}<br>$$<br>$(i,j,k)$ 是三角形顶点的循环标号，$S$ 是三角形面积</p><p>性质：$\nabla L_i$ 是<strong>常向量</strong>（与位置无关 ）</p><h2 id="十三、刚度矩阵的积分">十三、刚度矩阵的积分</h2><p>单元刚度矩阵的积分项（梯度内积）可简化为：<br>$$<br>\int_{\Delta_j} \nabla L_k \cdot \nabla L_l , dxdy = \nabla L_k \cdot \nabla L_l \cdot S<br>$$<br>利用 $\nabla L_i$ 是常向量，积分转化为向量点乘与面积乘积</p><h2 id="十四、单元载荷的积分">十四、单元载荷的积分</h2><p>载荷项 $\int_{\Delta_j} f u_h , dxdy$ 分解为基函数的线性组合，积分后表示为：<br>$$<br>\begin{align}<br>\int_{\Delta_j} f u_h , dxdy &amp;= \int_{\Delta_j} f (v_1^{(j)}L_1^{(j)}+v_2^{(j)}L_2^{(j)}+v_3^{(j)}L_3^{(j)}), dxdy \<br>&amp;=(v_1^{(j)},v_2^{(j)},v_3^{(j)})\begin{bmatrix}\displaystyle  \int_{\Delta_j} f\cdot L_1^{(j)},dxdy \ \displaystyle  \int_{\Delta_j} f\cdot L_2^{(j)},dxdy  \ \displaystyle  \int_{\Delta_j} f\cdot L_3^{(j)},dxdy  \end{bmatrix}<br>\end{align}<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第六章（2）</title>
      <link href="/2025/06/18/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A314/"/>
      <url>/2025/06/18/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A314/</url>
      
        <content type="html"><![CDATA[<h1>一维一次元的收敛性与误差估计</h1><h2 id="一、误差的-H-1-估计">一、误差的 $H^1$ 估计</h2><p><strong>Céa 引理：</strong><br>$$<br>| u - u_h |<em>1 \leq \beta \inf</em>{v \in V_h} | u - v |_1<br>$$<br>应用到有限元空间 $U_h$</p><p>对变分问题的真解 $u$ 和有限元近似解 $u_h$，有：<br>$$<br>| u - u_h |<em>1 \leq \beta \inf</em>{v_h \in U_h} | u - v_h |_1<br>$$<br>$|\cdot|_1$ 是 $H^1$ 范数，$\beta$ 是与网格无关的常数</p><p><strong>转化为逼近精度</strong>：</p><p>找 $U_h$ 中对 $u$ 的 “最佳逼近” 函数 $u_I$（如分片线性插值 ），则误差估计可表为：<br>$$<br>| u - u_h |_1 \leq \beta | u - u_I |_1<br>$$<br><strong>插值误差分析</strong>：</p><p>设 $u \in C^2[a,b]$，考察 $|u-u_I|$，有<br>$$<br>\int_{a}^{b} (u’ - u_I’)^2 ,dx +\int_a^b(u-u_I)^2,dx<br>$$<br>$u_I(x_i)=u(x_i)$，$u_I(x)$ 在 $[x_{i-1},x_i]$ 上是线性函数</p><p>$(u-u_I)(x_i)=0$</p><p><strong>由 Poincaré 不等式</strong><br>$$<br>\int_{a}^{b} (u - u_I)^2 dx \leq C \int_{a}^{b} (u’ - u_I’)^2 dx<br>$$<br>故关键是 $\displaystyle \int_{a}^{b} (u’ - u_I’)^2 dx$ 的估计</p><p>因 $u_I$ 分段线性，可分段分析</p><p>在 $I_i=[x_{i-1},x_i]$ 上，令 $e(x) = u(x) - u_I(x)$ ，则<br>$$<br>e(x_{i-1})=e(x_i)=0<br>$$<br>由 Rolle 定理，$\exists \xi \in I_i,,s.t., e’(\xi)=0$</p><p>从而<br>$$<br>e’(x) = \int_\xi^x e’‘(t) dt = \int_\xi^x u’'(t) dt, \ x \in I_i<br>$$</p><p>$$<br>\vert e’(x) \vert \leq \left( \int_\xi^x \vert u’‘(t) \vert^2 dt \right)^\frac{1}{2} \cdot \left( \int_\xi^x 1^2 dx \right)^\frac{1}{2} \leq \sqrt{h_i} \left( \int_{x_{i-1}}^{x_i} \vert u’'(t) \vert^2 dt \right)^\frac{1}{2}<br>$$</p><p>$$<br>\int_{x_{i - 1}}^{x_i} |e’(x)|^2 dx \leq h_i^2 \int_{x_{i - 1}}^{x_i} |u’'(t)|^2 dt<br>$$</p><p>$$<br>\int_a^b (u - u_I)^2 dx \leq \sum_{i = 1}^n \int_{x_{i - 1}}^{x_i} |e’(x)|^2 dx \leq h^2 \int_a^b |u’'(x)|^2 dt<br>$$</p><p>因而由 Poincaré 不等式<br>$$<br>| u - u_h |_1 \leq C | u - u_I |<em>1 \leq C \cdot h | u’’ |</em>{L^2} \quad (H^1 \text{模估计，} O(h))<br>$$</p><h2 id="二、误差的-L-2-估计">二、误差的 $L^2$ 估计</h2><p>$| u - u_h |_{L^2}^2$ 相关变分问题：<br>$$<br>\begin{cases} -z’’ = u - u_h \ z(a) = 0 \ z(b) = 0 \end{cases}<br>$$<br>对应变分等式<br>$$<br>\int_a^b z’ v’ ,dx = \int_a^b (u - u_h) v  ,dx \quad \forall v \in H_E^1,  ,v(a) = 0<br>$$<br>取 $v = u - u_h$ ，有<br>$$<br>\int_a^b z’ (u - u_h)’  ,dx = \int_a^b (u - u_h)^2  ,dx<br>$$<br>若用<br>$$<br>\begin{align}<br>| u - u_h |_{L^2}^2 &amp;\leq C | z |_1, | u - u_h |_1\<br>&amp;\leq C | z |_1 ,| u’ |_1<br>\end{align}<br>$$<br>注意到<br>$$<br>\int_a^b z’ (u-u_h)’ ,dx = \int_a^b (z’ - v_h) (u’-u_h’)  ,dx \quad \forall v \in H_E^1<br>$$<br>选取 $v_h$ 为 $z$ 的分片线性插值函数，则<br>$$<br>\begin{align}<br>|u-u_h|^2 &amp;\leq C| z-v_h |_1, | u - u_h |_1\<br>&amp;\leq C\cdot h\cdot | z’’ |_1,\cdot h\cdot | u’’ |\<br>&amp;\leq Ch^2| u - u_h |\cdot | u’’ |<br>\end{align}<br>$$<br>故<br>$$<br>|u-u_h|^2 \leq Ch^2|u’'| \rightarrow O(h^2)<br>$$</p><h2 id="误差模总结">误差模总结</h2><p>$H^1$ 模误差：$\sim O(h)$</p><p>$L^2$ 模误差：$\sim O(h^2)$</p><h1>一维二次元</h1><p>对于微分方程（非齐次边界）：<br>$$<br>\begin{cases}<br>-u’’ + u = f, &amp; a &lt; x &lt; b \<br>u(a) = \alpha, \ u’(b) = \beta<br>\end{cases}<br>$$<br><strong>变分形式（虚功原理）：</strong></p><p>找 $u \in H_\alpha^1(a,b)$（$u(a)=\alpha$ 的 Sobolev 空间 ），使<br>$$<br>\int_{a}^{b} u’v’ dx - \beta v(b) + \int_{a}^{b} uv dx = \int_{a}^{b} fv dx<br>$$<br>对任意 $v \in H_E^1(a,b)$（$v(a)=0$ 的 Sobolev 空间 ）成立</p><h2 id="Galerkin-离散（二次元）">Galerkin 离散（二次元）</h2><p><strong>有限元空间 $U_h$</strong>：</p><p>取 $U_h$ 为<strong>分片二次多项式空间</strong>，节点包含单元端点 $x_{i-1}, x_i$ 与中点 $x_{i-\frac{1}{2}}$ ，满足 $u_h(a)=\alpha$</p><p><strong>离散方程</strong>：</p><p>找 $u_h \in U_h$ 使<br>$$<br>\int_{a}^{b} u_h’v_h’ dx + \int_{a}^{b} u_h v_h dx - \int_{a}^{b} f v_h dx - \beta v_h(b) = 0<br>$$<br>对任意 $v_h \in U_h$（$v_h(a)=0$ ）成立，代入二次基函数展开得线性方程组</p><h2 id="二次基函数构造（Lagrange-插值）">二次基函数构造（Lagrange 插值）</h2><p>在单元 $[x_{i-1}, x_i]$ 上，取节点 $x_{i-1}, x_{i-\frac{1}{2}}, x_i$ ，构造二次 Lagrange 基函数 $y_1, y_2, y_3$ ，满足：<br>$$<br>y_j(x_{i-k}) = \delta_{jk} \quad (j,k=1,2,3)<br>$$<br>通过标准化（$\displaystyle \xi = \frac{x - x_{i-1}}{h}$，$h = x_i - x_{i-1}$ ），基函数可表示为：<br>$$<br>\begin{cases}<br>N_0(\xi) = 2\left(\xi - \frac{1}{2}\right)(\xi - 1) \<br>N_{\frac{1}{2}}(\xi) = -4\xi\left(\xi - 1\right) \<br>N_1(\xi) = 2\xi\left(\xi - \frac{1}{2}\right)<br>\end{cases}<br>$$<br>在参考单元 $[0,1]$ 上，分别对应节点 $0, \frac{1}{2}, 1$ 的基函数</p><p>在 $x\in[x_{i-1},x_i]$ 时<br>$$<br>u_h(x)=u_{i-1}N_0(\xi)+u_{i-\frac{1}{2}}N_{\frac{1}{2}}(\xi)+u_iN_1(\xi)<br>$$</p><p>$$<br>u_h(x) =<br>\begin{cases}<br>u_0 N_0^1(\xi) + u_{\frac{1}{2}} N_{\frac{1}{2}}^1(\xi) + u_1 N_1^1(\xi), &amp; [x_0, x_1] \<br>u_1 N_1^2(\xi) + u_{\frac{3}{2}} N_{\frac{3}{2}}^2(\xi) + u_2 N_2^2(\xi), &amp; [x_1, x_2] \<br>\quad \quad \vdots \<br>u_{n-1} N_{n-1}^n(\xi) + u_{n-\frac{1}{2}} N_{n-\frac{1}{2}}^n(\xi) + u_n N_n^n(\xi), &amp; [x_{n-1}, x_n]<br>\end{cases}<br>$$</p><p><strong>$U_h$ 的基函数</strong><br>$$<br>\varphi_i(x) =<br>\begin{cases}<br>N_i^i(\xi), &amp; [x_{i-1}, x_i] \<br>N_i^{i+1}(\xi), &amp; [x_i, x_{i+1}] \<br>0, &amp; \text{其他}<br>\end{cases}<br>$$</p><p>$$<br>\varphi_0(x) =<br>\begin{cases}<br>N_0^1(\xi), &amp; [x_0, x_1] \<br>0, &amp; \text{其他}<br>\end{cases}<br>$$</p><p>$$<br>\varphi_{i+\frac{1}{2}}(x) =<br>\begin{cases}<br>N_{\frac{1}{2}}^{i+1}(\xi), &amp; [x_i, x_{i+1}] \<br>0, &amp; \text{其他}<br>\end{cases}<br>$$</p><p>$$<br>u_h(x) = \sum_{i=0}^{n-1} \left[ u_i \varphi_i + u_{i+\frac{1}{2}} \varphi_{i+\frac{1}{2}} \right] + u_n \varphi_n \quad \quad(2n+1维)<br>$$</p><p>$$</p><p>v_h(x) = \sum_{i=0}^{n-1} \left[ v_i \varphi_i + v_{i+\frac{1}{2}} \varphi_{i+\frac{1}{2}} \right] + v_n \varphi_n</p><p>$$</p><h2 id="变分方程离散形式">变分方程离散形式</h2><p>$$<br>\int_a^b u_h’ v_h’ dx + \int_a^b u_h v_h dx - \int_a^b f v_h dx - \beta v_h(b) = 0<br>$$</p><p>在 $  [x_{i-1}, x_i]  $ 上<br>$$<br>u_h = u_{i-1} N_0(\xi) + u_{i-\frac{1}{2}} N_{\frac{1}{2}}(\xi) + u_i N_1(\xi)<br>$$<br>其中 $\displaystyle \xi = \frac{x - x_{i-1}}{h_i}  $（$  h_i = x_i - x_{i-1}  $ 为单元长度 ）</p><h2 id="单元-x-i−1-x-i-上的导数计算">单元 $[x_{i−1},x_i]$ 上的导数计算</h2><p>$$<br>\begin{align}<br>\frac{du_h}{dx} &amp;= \left( u_{i-1} \frac{dN_0}{d\xi} + u_{i-\frac{1}{2}} \frac{dN_{\frac{1}{2}}}{d\xi} + u_i \frac{dN_1}{d\xi} \right) \cdot \frac{d\xi}{dx} \<br>&amp;= \frac{1}{h_i} \left( u_{i-1} \frac{dN_0}{d\xi} + \cdots \right)<br>\end{align}<br>$$</p><p>同理，$\displaystyle \frac{dv_h}{dx}  $ 有类似形式，进而单元积分（以 $ \displaystyle \int_{I_i} u_h’ v_h’ dx  $ 为例 ）：<br>$$<br>\int_{I_i} u_h’ v_h’ dx = \int_{I_i} \left( u_{i-1} \frac{dN_0}{d\xi} + \cdots \right) \left( v_{i-1} \frac{dN_0}{d\xi} + \cdots \right) \frac{1}{h_i} dx<br>$$<br>变量替换 $  x = x_{i-1} + h_i \xi  $（$  \xi \in [0,1]  $ ）后：<br>$$<br>\begin{align}<br>\int_{I_i} u_h’ v_h’ dx &amp;= \int_0^1 \left( u_{i-1} \frac{dN_0}{d\xi} + \cdots \right) \left( v_{i-1} \frac{dN_0}{d\xi} + \cdots \right) \frac{1}{h_i} \cdot h_i d\xi\</p><p>&amp;  =(v_{i - 1}, v_{i - \frac{1}{2}}, v_i) \begin{bmatrix}<br>\displaystyle \int_0^1 N_0’(\xi) N_0’(\xi) d\xi &amp;\displaystyle  \int_0^1 N_0’(\xi) N_{\frac{1}{2}}‘(\xi) d\xi &amp; \displaystyle \int_0^1 N_0’(\xi) N_1’(\xi) d\xi \<br>\displaystyle \int_0^1 N_{\frac{1}{2}}‘(\xi) N_0’(\xi) d\xi &amp; \cdots &amp; \cdots \<br>\vdots &amp; \vdots &amp; \vdots<br>\end{bmatrix} \frac{1}{h_i} \begin{bmatrix} u_{i - 1} \ u_{i - \frac{1}{2}} \ u_i \end{bmatrix}\</p><p>&amp;  =(v_0, v_{\frac{1}{2}}, v_1, \cdots, v_n) \begin{bmatrix}<br>\ddots &amp; \vdots &amp; \vdots &amp; \cdots &amp; \vdots \<br>\cdots &amp; \times &amp; \times &amp; \times &amp; \cdots \<br>\cdots &amp; \times &amp; \times &amp; \times &amp; \cdots \<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots<br>\end{bmatrix} \begin{bmatrix} u_0 \ u_{\frac{1}{2}} \ u_1 \ \vdots \ u_n \end{bmatrix} \<br>&amp;= V^T K^{(i)} U</p><p>\end{align}<br>$$</p><h2 id="单元刚度矩阵-k-e">单元刚度矩阵 $  k_e  $</h2><p>$$</p><p>k_e = \begin{bmatrix}<br>\displaystyle \int_0^1 N_0’(\xi) N_0’(\xi) d\xi &amp; \cdots &amp; \cdots \<br>\vdots &amp; \ddots &amp; \vdots \<br>\cdots &amp; \cdots &amp;\displaystyle  \int_0^1 N_m’(\xi) N_m’(\xi) d\xi<br>\end{bmatrix} \cdot \frac{1}{h_i} \quad</p><p>$$</p><h2 id="整体刚度矩阵组装">整体刚度矩阵组装</h2><p>$$<br>\int_a^b u_h’ v_h’ dx = V^T \sum_{i=1}^n K^{(i)} U = V^T K U<br>$$</p><h1>一维三次元</h1><p>在单元 $  [x_{i-1}, x_i]  $ 上用 <strong>Hermite 插值</strong>构造三次多项式 $  u_h(x)  $，满足 <strong>函数值 + 导数值插值条件</strong><br>$$<br>\begin{align}<br>u_h(x_{i-1}) &amp;= u_{i-1}, \quad u_h’(x_{i-1}) = u_{i-1}‘; \<br>u_h(x_i) &amp;= u_i, \quad \quad u_h’(x_i) = u_i’<br>\end{align}<br>$$</p><p>$$<br>u_h(x) = u_{i-1} \varphi_0(x) + u_{i-1}’ \varphi_1(x) + u_i \varphi_2(x) + u_i’ \varphi_3(x)<br>$$</p><p><strong>基函数条件（以 $  \varphi_0  $ 为例，其余类似 ）：</strong><br>$$<br>\begin{cases}<br>\varphi_0(x_{i-1}) = 1, &amp; \varphi_0(x_i) = 0 \<br>\varphi_0’(x_{i-1}) = 0, &amp; \varphi_0’(x_i) = 0<br>\end{cases}<br>$$<br><strong>标准化</strong></p><p>令 $\displaystyle \xi = \frac{x - x_{i-1}}{h_i}  $（$  h_i = x_i - x_{i-1}  $ ），基函数转化为标准区间 $  \xi \in [0,1]  $ 的 Hermite 基 $  N_0(\xi), N_1(\xi), N_2(\xi), N_3(\xi)  $，满足：<br>$$<br>\begin{cases}<br>N_0(0)=1, , N_0(1)=0, , N_0’(0)=0, , N_0’(1)=0 \<br>N_1(0)=0, , N_1(1)=0, , N_1’(0)=1, , N_1’(1)=0 \<br>N_2(0)=0, , N_2(1)=1, , N_2’(0)=0, , N_2’(1)=0 \<br>N_3(0)=0, , N_3(1)=0, , N_3’(0)=0, , N_3’(1)=1<br>\end{cases}<br>$$</p><p>$$</p><p>u_h(x) = u_{i-1} N_0(\xi) + u_{i-1}’ N_1(\xi) \cdot h_i + u_i N_2(\xi) + u_i’ N_3(\xi) \cdot h_i</p><p>$$</p><p><strong>对 $  x  $ 求导</strong>（利用 $\displaystyle \frac{d\xi}{dx} = \frac{1}{h_i}  $ ）：<br>$$<br>\frac{du_h}{dx} = \left( u_{i-1} \frac{dN_0}{d\xi} + u_{i-1}’ \frac{dN_1}{d\xi} + u_i \frac{dN_2}{d\xi} + u_i’ \frac{dN_3}{d\xi} \right) \cdot \frac{1}{h_i}<br>$$<br>在 $  x = x_{i-1}  $（即 $  \xi = 0  $ ）处：<br>$$<br>\frac{du_h}{dx}(x_{i-1}) = \left( u_{i-1} N_0’(0) + u_{i-1}’ N_1’(0) + u_i N_2’(0) + u_i’ N_3’(0) \right) \cdot \frac{1}{h_i} = u_{i-1}’<br>$$<br>因 $  N_0’(0)=0, N_2’(0)=0, N_3’(0)=0  $，仅 $  N_1’(0)=1  $ 保留</p><h2 id="基函数表达式">基函数表达式</h2><p>标准区间 $  \xi \in [0,1]  $ 上的 Hermite 基：<br>$$<br>\begin{align*}<br>N_0(\xi) &amp;= (1 - \xi)^2(2\xi + 1) \<br>N_1(\xi) &amp;= \xi(1 - \xi)^2 \<br>N_2(\xi) &amp;= \xi^2(-2\xi + 3) \<br>N_3(\xi) &amp;= \xi^2(\xi - 1)<br>\end{align*}<br>$$</p><h2 id="单元插值函数">单元插值函数</h2><p>在单元 $  [x_{i-1}, x_i]  $ 上，三次插值函数 $  u_h(x)  $ 满足函数值 + 导数值插值，形式为：<br>$$<br>u_h(x) = u_{i-1}N_0(\xi) + u_{i-1}’ h_i N_1(\xi) + u_i N_2(\xi) + u_i’ h_i N_3(\xi)<br>$$</p><p>$$<br>u_h(x) =<br>\begin{cases}<br>u_0 N_0^1(\xi) + u_{0}’ h_1 N_{1}^1(\xi) + u_1 N_2^1(\xi) +u_1’ h_1 N_3^1(\xi), &amp; [x_0, x_1] \<br>u_1 N_0^2(\xi) + u_{1}’ h_2 N_{1}^2(\xi) + u_2 N_2^2(\xi) +u_2’ h_2 N_3^2(\xi), &amp; [x_1, x_2] \<br>\quad \quad \vdots \<br>u_{n-1} N_{0}^n(\xi) + u_{n-1}’ h_n  N_{1}^n(\xi) + u_n N_2^n(\xi) + u_n’ h_n N_3^n(\xi), &amp; [x_{n-1}, x_n]<br>\end{cases}<br>$$</p><h2 id="整体基函数定义">整体基函数定义</h2><p>函数值基 $  \varphi_i^{(0)}(x)  $：<br>$$<br>\varphi_i^{(0)}(x) =<br>\begin{cases}<br>N_2\left( \frac{x - x_{i-1}}{h_i} \right), &amp; [x_{i-1}, x_i] \<br>N_0\left( \frac{x - x_i}{h_{i+1}} \right), &amp; [x_i, x_{i+1}] \<br>0, &amp; \text{其他}<br>\end{cases}<br>$$<br>导数值基 $  \varphi_i^{(1)}(x)  $：<br>$$<br>\varphi_i^{(1)}(x) =<br>\begin{cases}<br>h_i N_3\left( \frac{x - x_{i-1}}{h_i} \right), &amp; [x_{i-1}, x_i] \<br>h_{i+1} N_1\left( \frac{x - x_i}{h_{i+1}} \right), &amp; [x_i, x_{i+1}] \<br>0, &amp; \text{其他}<br>\end{cases}<br>$$</p><h2 id="基函数支集特性">基函数支集特性</h2><p>边界基 $  \varphi_0^{(0)},\varphi_0^{(1)},\varphi_n^{(0)},\varphi_n^{(1)}  $ 的支集（非零区间）仅含一个子区间，内部基支集含两个子区间</p><h2 id="空间与基函数">空间与基函数</h2><p>若把 $  u’(a)=u_0 ,,u’(b)=u_n’$ 当作未知量，有限元空间 $  U_h  $ 维数 $  2n + 2  $，基函数为 $  \varphi_i^{(0)}(x)  $（函数值基 ）、$  \varphi_i^{(1)}(x)  $（导数值基 ），展开式<br>$$<br>u_h(x) = \sum_{i=0}^n [u_i \varphi_i^{(0)} + u_i’ \varphi_i^{(1)}]<br>$$</p><h2 id="Galerkin-方法离散">Galerkin 方法离散</h2><p>变分方程（含 $  u_h(a)=\alpha  $ 边界条件 ）：<br>$$<br>\int_a^b u_h’ v_h’ dx + \int_a^b u_h v_h dx - \int_a^b f v_h dx - \beta v_h(b) = 0, \quad \forall v_h \in U_h, v_h(a)=0<br>$$</p><h2 id="单元导数变换（-x-in-x-i-1-x-i-）">单元导数变换（$  x \in [x_{i-1}, x_i]  $ ）</h2><p>局部坐标 $\displaystyle \xi = \frac{x - x_{i-1}}{h_i}  $（$  h_i = x_i - x_{i-1}  $ ），则：<br>$$<br>\frac{du_h}{dx} = \frac{du_h}{d\xi} \cdot \frac{d\xi}{dx} = \frac{1}{h_i} \left( u_{i-1} N_0’(\xi) + u_{i-1}’ h_i N_1’(\xi) + u_i N_2’(\xi) + u_i’ h_i N_3’(\xi) \right)<br>$$<br>同理，$\displaystyle \frac{dv_h}{dx}  $ 有对称形式</p><h2 id="单元积分与刚度矩阵">单元积分与刚度矩阵</h2><p>单元 $  [x_{i-1}, x_i]  $ 上的导数积分（以 $ \displaystyle \int_{I_i} u_h’ v_h’ dx  $ 为例 ）：<br>$$<br>\int_{I_i} u_h’ v_h’ dx = \int_0^1 \left( u_{i-1} N_0’(\xi) + \cdots \right) \left( v_{i-1} N_0’(\xi) + \cdots \right) \frac{1}{h_i} \cdot h_i d\xi<br>$$<br>对应单元刚度矩阵 $  K_e  $ 与向量内积形式：<br>$$<br>\int_{I_i} u_h’ v_h’ dx = (v_{i-1}, v_{i-1}‘, v_i, v_i’) K_e \begin{bmatrix} u_{i-1} \ u_{i-1}’ \ u_i \ u_i’ \end{bmatrix}<br>$$</p><h2 id="单元刚度矩阵">单元刚度矩阵</h2><p>$$<br>K_e = \begin{bmatrix}<br>\displaystyle \int_0^1 N_0’(\xi) N_0’(\xi) d\xi &amp;\displaystyle  \int_0^1 N_0’(\xi) N_1’(\xi) d\xi &amp; \times &amp; \times \<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots \<br>\times &amp; \times &amp; \times &amp; \times<br>\end{bmatrix} \cdot \frac{1}{h_i}<br>$$</p><h2 id="单元质量矩阵与内积">单元质量矩阵与内积</h2><p>$$<br>\int_{I_i} u_h v_h dx = (v_{i-1}, \cdots, v_i’) M_e \begin{bmatrix} u_{i-1} \ \vdots \ u_i’ \end{bmatrix}<br>$$</p><h2 id="单元载荷积分与近似">单元载荷积分与近似</h2><p>$$<br>\int_{I_i} f v_h dx = \int_0^1 f(x_{i-1} + h_i \xi) \left( v_{i-1} N_0(\xi) + \cdots + v_i’ N_3(\xi) \right) h_i d\xi<br>$$</p><p>数值积分近似：<br>$$<br>\begin{align}<br>\int_{I_i} f v_h dx &amp;\approx (v_{i-1}, \cdots, v_i’) \begin{bmatrix}<br>\frac{1}{6}f(x_{i-1}) + \frac{2}{3}f(x_{i-\frac{1}{2}} ) N_0\left(\frac{1}{2}\right) \<br>\vdots \<br>\frac{2}{3}f(x_{i-1} )N_3\left(\frac{1}{2}\right)+\frac{1}{6}f(x_i) N_3(1) h_i<br>\end{bmatrix}\<br>&amp;=(v_{i-1}, \cdots, v_i’) F_e<br>\end{align}<br>$$</p><h2 id="整体离散系统">整体离散系统</h2><p>最终组装得代数方程：<br>$$<br>V^T A U = V^T F + V^T \begin{bmatrix} 0 \ \vdots \ \beta \0 \end{bmatrix}, \quad A = K + M<br>$$<br>$  K  $ 整体刚度矩阵，$  M  $ 整体质量矩阵，$  F  $ 整体载荷向量</p><h2 id="边界条件与代数系统">边界条件与代数系统</h2><p>已知 $  u(a) = u_0 = \alpha  $，约束 $  v_0 = 0, v_0’ = 0  $，整体系统降维：<br>$$<br>A(2:\text{end}, 2:\text{end}) , U(2:\text{end}) = F(2:\text{end}) - A(2:\text{end}, 1) , \alpha+\begin{bmatrix} 0 \ \vdots \ \beta \0 \end{bmatrix}<br>$$<br>$  U = (u_0, u_0’, \cdots, u_n, u_n’)  $ 为未知向量</p><h2 id="误差阶">误差阶</h2><ul><li><p>一次有限元：$  | u - u_h |_1 = O(h)  $</p></li><li><p>二次有限元：$  | u - u_h |_1 = O(h^2)  $</p></li><li><p>三次 Hermite 有限元：$  | u - u_h |_1 = O(h^3)  $</p></li></ul><h2 id="误差阶拟合">误差阶拟合</h2><p>设误差 $  | e_h | \approx c h^\alpha  $，取对数：<br>$$<br>\log | e_h | \approx \alpha \log h + \log c<br>$$<br>用多组 $  (h_i, | e_{h_i} |)  $ 拟合 $  (\log h_i, \log | e_{h_i} |)  $，线性回归  $  y = rx $</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第六章（1）</title>
      <link href="/2025/06/15/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A313/"/>
      <url>/2025/06/15/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A313/</url>
      
        <content type="html"><![CDATA[<h1>有限元方法</h1><h2 id="一、有限元基本步骤">一、有限元基本步骤</h2><p><strong>1、变分形式</strong>：将微分方程（强形式）转化为变分问题（弱形式，如极小位能原理 ）</p><p><strong>2、区域剖分</strong>：将求解区间 / 区域划分为有限个子单元（如线段剖分为小区间 $I_i = [x_{i-1}, x_i]$ ）</p><p><strong>3、构造有限维子空间</strong>：在剖分单元上定义基函数（如分片线性函数 ），构建解空间 $U_h$</p><p><strong>4、形成有限元方程</strong>：将变分问题离散化，得到线性方程组（刚度矩阵 + 载荷向量 ）</p><p><strong>5、求解有限元方程</strong>：数值求解线性方程组，得到近似解</p><h3 id="ODE-边值问题示例（Dirichlet-边界）">ODE 边值问题示例（Dirichlet 边界）</h3><p>微分方程（强形式）：<br>$$<br>\begin{cases}<br>Lu = -u’’ + u = f, &amp; a &lt; x &lt; b \<br>u(a) = 0, \ u(b) = 0<br>\end{cases}<br>$$</p><p><strong>变分形式（极小位能原理）</strong>：</p><p>找 $u \in H_E^1 = \left\{ u \in H^1(a,b) \mid u(a)=0 \right\}$ 使总位能<br>$$<br>J(u) = \frac{1}{2}\int_{a}^{b} (u’)^2 dx + \frac{1}{2}\int_{a}^{b} u^2 dx - \int_{a}^{b} f u dx<br>$$<br>极小化</p><p><strong>有限元离散（Ritz 法）</strong>：</p><p><strong>区域剖分</strong>：将 $[a,b]$ 划分为 $n$ 个单元 $I_i = [x_{i-1}, x_i]$ ，步长 $h_i = x_i - x_{i-1}$，最大步长 $h = \max h_i$</p><p><strong>子空间 $U_h$</strong>：取 $U_h \subset H_E^1$ ，由分片线性基函数（在每个单元上线性，节点处满足边界条件 ）张成</p><h3 id="一、基函数与插值思想">一、基函数与插值思想</h3><p>有限元解 $u_h$ 是 $n$ 维子空间的函数，通过<strong>节点插值</strong>构造基函数：</p><p>区域剖分后，在单元 $I_i = [x_{i-1}, x_i]$ 上，用节点值 $u_{i-1}, u_i$ 定义分片线性插值函数。</p><h3 id="二、分段-Lagrange-插值（单元层次）">二、分段 Lagrange 插值（单元层次）</h3><p>对单元 $I_i = [x_{i-1}, x_i]$（步长 $h_i = x_i - x_{i-1}$ ），插值函数为：<br>$$<br>u_h(x) = u_{i-1} \cdot \frac{x_i - x}{h_i} + u_i \cdot \frac{x - x_{i-1}}{h_i}<br>$$<br><strong>标准化</strong>：引入参考单元 $[0,1]$，令 $\displaystyle \xi = \frac{x - x_{i-1}}{h_i}$，则插值函数简化为：<br>$$<br>u_h(x) = u_{i-1}(1 - \xi) + u_i \xi<br>$$<br>对应基函数 $N_0(\xi) = 1 - \xi$，$N_1(\xi) = \xi$（单元上的 Lagrange 基 ）</p><h3 id="三、整体基函数（全域拼接）">三、整体基函数（全域拼接）</h3><p>将单元基函数拼接成全域基函数 $y_i(x)$，满足：</p><p>在节点 $x_j$ 处，$y_i(x_j) = \delta_{ij}$（Kronecker  delta，仅在第 $i$ 个节点取 1，其余为 0 ）</p><p>全域解表示为<br>$$<br>u_h(x) = \sum_{i=0}^n u_i y_i(x)<br>$$<br>其中 $u_i$ 是节点 $x_i$ 处的函数值</p><p>基函数 $y_i(x)$ 是<strong>分片线性的 “帽状函数”</strong>：</p><p>在单元 $[x_{i-1}, x_i]$ 上，$\displaystyle y_i(x) = \frac{x - x_{i-1}}{h_i}$；</p><p>在单元 $[x_i, x_{i+1}]$ 上，$\displaystyle y_i(x) = \frac{x_{i+1} - x}{h_{i+1}}$；</p><p>仅在节点 $x_i$ 附近非零，满足 $y_i(x_j) = \delta_{ij}$（Kronecker  delta ）</p><h3 id="四、能量泛函离散（以-J-u-h-为例）">四、能量泛函离散（以 $J(u_h)$ 为例）</h3><p>总位能泛函 $J(u_h)$ 分解为：<br>$$<br>J(u_h) = \frac{1}{2}\int_{a}^{b} (u_h’)^2 dx + \frac{1}{2}\int_{a}^{b} u_h^2 dx - \int_{a}^{b} f u_h dx<br>$$<br><strong>导数计算</strong>：<br>在单元 $[x_{i-1}, x_i]$ 上，$u_h = u_{i-1} N_0^i(\xi) + u_i N_1^i(\xi)$（$\xi$ 是参考坐标 ），求导得：<br>$$<br>u_h’ = \frac{u_i - u_{i-1}}{h_i}<br>$$<br><strong>积分离散</strong>：</p><p>对 $\displaystyle \int_{a}^{b} (u_h’)^2 dx$ 分片积分，得：<br>$$<br>\int_{a}^{b} (u_h’)^2 dx = \sum_{i=1}^n \frac{(u_i - u_{i-1})^2}{h_i}<br>$$<br>同理处理 $u_h^2$ 和 $f u_h$ 的积分，最终将 $J(u_h)$ 转化为节点值 $u_i$ 的二次函数</p><h3 id="五、梯度与刚度矩阵">五、梯度与刚度矩阵</h3><p>对 $J(u_h)$ 关于 $u_j$ 求偏导并令其为 0，得到梯度 $\nabla J(u_h) = K \mathbf{u} - \mathbf{f}$ ，其中</p><p>$K$ 是<strong>刚度矩阵</strong>（由基函数导数的积分确定，对称正定 ）；</p><p>$\mathbf{u} = (u_1, \dots, u_n)^T$ 是节点值向量；</p><p>$\mathbf{f}$ 是载荷向量（由 $f$ 与基函数的积分确定 ）</p><h3 id="六、有限元方程构建（能量泛函离散）">六、有限元方程构建（能量泛函离散）</h3><p>对边值问题 $-u’’ + u = f$（$u(a)=0, u(b)=0$ ），总位能泛函 $J(u_h)$ 分解为：<br>$$<br>J(u_h) = K(u_h) + M(u_h) - F(u_h)<br>$$<br><strong>刚度项 $K(u_h)$</strong>：由 $u_h’$ 的积分导出，对应矩阵 $K$（刚度矩阵 ）<br>$$<br>K(u_h)=\frac{1}{2}\int_{a}^{b} (u_h’)^2 dx = \frac{1}{2}\sum_{i=1}^n \frac{(u_i - u_{i-1})^2}{h_i}<br>$$</p><p>$$<br>\nabla K=KU<br>$$</p><p><strong>质量项 $M(u_h)$</strong>：由 $u_h^2$ 的积分导出，对应矩阵 $M$（质量矩阵 ）<br>$$<br>M(u_h)=\frac{1}{2}\int_{x_{a}}^{b} (u_h)^2 dx = \frac{1}{2}\sum_{i=1}^n \int_0^1 (u_{i-1}(1-\xi) + u_{i}\cdot\xi)^2 \cdot h_i,d\xi<br>$$</p><p>$$<br>\nabla M=MU<br>$$</p><p><strong>载荷项 $F(u_h)$</strong> ：由 $f u_h$ 的积分导出，对应向量 $B$（载荷向量 ）<br>$$<br>F(u_h)=\int_{x_{a}}^{b} fu_h ,dx = \sum_{i=1}^n \int_0^1 f(x_{i-1}+h_i\cdot\xi)(u_{i-1}(1-\xi) + u_{i}\cdot\xi)^2 \cdot h_i,d\xi<br>$$</p><p>$$<br>\nabla F=B<br>$$</p><p>得有限元方程：<br>$$<br>(K + M) \mathbf{u} = B<br>$$</p><h3 id="七、与有限差分方法（FDM）对比">七、与有限差分方法（FDM）对比</h3><p>对同一 ODE 边值问题，FDM 直接离散微分算子：<br>$$<br>-\frac{1}{h^2}(u_{j-1} - 2u_j + u_{j+1}) + u_j = f(x_j)<br>$$<br>$h$ 是步长，$u_j$ 是节点 $x_j$ 处的近似值</p><p>用 FEM ：<br>$$<br>\begin{align}<br>-\frac{1}{h}u_{j-1} +\frac{2}{h} u_j -\frac{1}{h} u_{j+1} + h(\frac{1}{6}u_{j-1}+\frac{2}{3}u_j+\frac{1}{6}u_{j+1}) &amp;= b_j\<br>&amp;\approx \frac{1}{2}f(x_i)+\frac{1}{2} f(x_{j+1})<br>\end{align}<br>$$</p><p><strong>FEM 与 FDM 的核心差异</strong></p><p><strong>FEM</strong>：通过能量泛函离散（基函数 + 分片积分 ），自然引入刚度矩阵 $K$ 和质量矩阵 $M$，适用于复杂几何与边界条件，精度依赖基函数（如分片线性 ）</p><p><strong>FDM</strong>：直接离散微分方程，形式简洁但对复杂域适配性差，精度依赖差分格式（如二阶中心差分 ）</p><h3 id="八、单元矩阵构造（分片线性基函数）">八、单元矩阵构造（分片线性基函数）</h3><p>对 ODE 边值问题的有限元离散，在单元 $I_i = [x_{i-1}, x_i]$ 上，利用分片线性基函数，将能量泛函的积分分解为<strong>单元层次</strong>的矩阵运算：</p><p><strong>单元刚度矩阵 $K^{(i)}$</strong>：</p><p>由导数项 $\displaystyle \int_{I_i} (u_h’)^2 dx$ 推导，通过节点值 $u_{i-1}, u_i$ 的二次型表示：<br>$$<br>\int_{I_i} (u_h’)^2 dx = \mathbf{U}^T K^{(i)} \mathbf{U}<br>$$<br>$\mathbf{U} = (u_0, \dots, u_n)^T$ 是全域节点向量，$K^{(i)}$ 是 $2 \times 2$ 单元刚度矩阵</p><p><strong>单元质量矩阵 $M^{(i)}$</strong>：</p><p>由函数项 $\displaystyle \int_{I_i} u_h^2 dx$ 推导，同理表示为：<br>$$<br>\int_{I_i} u_h^2 dx = \mathbf{U}^T M^{(i)} \mathbf{U}<br>$$<br>$M^{(i)}$ 是 $2 \times 2$ 单元质量矩阵</p><p><strong>单元载荷向量 $b^{(i)}$</strong>：</p><p>由载荷项 $\displaystyle \int_{I_i} f u_h dx$ 推导，表示为：<br>$$<br>\int_{I_i} f u_h dx = \mathbf{U}^T b^{(i)}<br>$$</p><h3 id="九、全域矩阵组装">九、全域矩阵组装</h3><p><strong>刚度与质量矩阵</strong>：</p><p>单元刚度矩阵 $K^{(i)}$ 和质量矩阵 $M^{(i)}$ 组装为全域矩阵 $K$（$(n+1) \times (n+1)$ 稀疏矩阵，通常为三对角 ）和 $M$（同理稀疏 ），满足：<br>$$<br>K = \sum_{i=1}^n K^{(i)}, \quad M = \sum_{i=1}^n M^{(i)}<br>$$<br><strong>总能量泛函</strong>：</p><p>全域能量泛函表示为：<br>$$<br>J(u_h) = \frac{1}{2} \mathbf{U}^T K \mathbf{U} + \frac{1}{2} \mathbf{U}^T M \mathbf{U} - \mathbf{U}^T B<br>$$<br>$\displaystyle B = \sum_{i=1}^n b^{(i)}$ 是全域载荷向量</p><p><strong>本质边界条件处理（Dirichlet 边界）</strong></p><p>对边界条件 $u_0 = 0$ 或 $u_0 = \alpha$（$u_0$ 是边界节点值 ），通过约束能量泛函实现：</p><p><strong>代入边界值</strong>：</p><p>将 $u_0$ 固定为已知值（0 或 $\alpha$ ），剩余节点变量 $u_1, \dots, u_n$ 作为未知量，修改能量泛函的梯度方程（KKT 条件 ），得到降维后的线性方程组</p><p><strong>矩阵修正</strong>：</p><p>若 $u_0 = 0$，直接从刚度矩阵 $K$、质量矩阵 $M$ 和载荷向量 $B$ 中移除对应行和列；若 $u_0 = \alpha$，则修正载荷向量 $B$（减去 $K$ 或 $M$ 中对应列与 $\alpha$ 的乘积 ），保证边界条件满足</p><h3 id="十、有限元实现流程">十、有限元实现流程</h3><p>实际计算中，FEM 先构造<strong>单元刚度 / 质量矩阵</strong>，再通过 “组装” 得到全域矩阵，最终求解 $(K + M)\mathbf{u} = B$ ，体现 “分而治之” 的离散思想</p><h2 id="二、有限元-Galerkin-法">二、有限元 Galerkin  法</h2><h3 id="一、Galerkin-变分形式（虚功原理）">一、Galerkin 变分形式（虚功原理）</h3><p>对边值问题 $-u’’ + u = f$（$u(a)=0, u(b)=0$ ），虚功原理要求：</p><p>找 $u \in H_E^1$ 使 $a(u,v) = (f,v)$ 对任意 $v \in H_E^1$ 成立，其中：<br>$$<br>a(u,v) = \int_{a}^{b} u’v’ dx + \int_{a}^{b} uv ,dx, \quad (f,v) = \int_{a}^{b} fv ,dx<br>$$</p><h3 id="二、有限元离散">二、有限元离散</h3><p><strong>有限维子空间 $U_h$</strong>：</p><p>取 $U_h \subset H_E^1$ ，由分片多项式基函数 ${ \varphi_i }$ 张成（如分片线性，$\displaystyle u_h = \sum_{i=1}^n u_i \varphi_i$ ）</p><p><strong>离散方程</strong>：</p><p>找 $u_h \in U_h$ 使 $a(u_h, v_h) = (f, v_h)$ 对任意 $v_h \in U_h$ 成立。代入基函数展开，得线性方程组：<br>$$<br>\sum_{i=1}^n a(\varphi_i, \varphi_j) u_i = (f, \varphi_j) \quad (j=1,\dots,n)<br>$$</p><h3 id="三、单元矩阵组装">三、单元矩阵组装</h3><p>通过<strong>单元积分→全域组装</strong>构造矩阵：</p><p>设 $\displaystyle u_h=\sum_{i=0}^n u_i\varphi_i$，$\displaystyle v_h=\sum_{i=0}^n v_i\varphi_i$<br>$$<br>\begin{align}<br>\int_a^b u_h’v_h’,dx &amp;=\sum_{i=1}^n \int_{I_i}u_h’v_h’,dx\<br>&amp;=\sum_{i=1}^n \int_{I_i}(u_{i-1}\varphi_{i-1}‘+u_i\varphi_i’)(v_{i-1}\varphi_{i-1}‘+v_i\varphi_i’),dx\<br>&amp;=\sum_{i=1}^n(v_{i-1},v_i)\cdot\begin{bmatrix}<br>\displaystyle\int_{I_i} \varphi_{i-1}’ \cdot \varphi_{i-1} , dx &amp;<br>\displaystyle\int_{I_i} \varphi_{i-1}’ \cdot \varphi_{i} , dx \[10pt]<br>\displaystyle\int_{I_i} \varphi_{i}’ \cdot \varphi_{i-1} , dx &amp;<br>\displaystyle\int_{I_i} \varphi_{i-1}’ \cdot \varphi_{i-1} , dx<br>\end{bmatrix}\cdot\begin{bmatrix}<br>u_{i-1}   \<br>u_{i}<br>\end{bmatrix} \<br>&amp;=\sum_{i=1}^n (v_0,\cdots,v_n)K^{(i)}\cdot\begin{bmatrix}<br>u_{0}   \<br>\vdots\<br>u_{n}<br>\end{bmatrix}\<br>&amp;=V^TKU<br>\end{align}<br>$$<br>同理<br>$$<br>\int_a^b u_hv_h,dx=V^TMU<br>$$</p><p>$$<br>\int_a^b f v_h,dx=V^TB<br>$$</p><p>于是<br>$$<br>V^T(K+M)U-V^TB=0<br>$$</p><p>$$<br>V^TAU-V^TB=0<br>$$</p><p>边值条件：$u_0=\alpha$，$v_0=0$，$v_1,\cdots,v_n$ 任意<br>$$<br>A(2:end,:)\cdot \begin{bmatrix}<br>u_{0}   \<br>\vdots\<br>u_{n}<br>\end{bmatrix}=\begin{bmatrix}<br>b_{1}   \<br>\vdots\<br>b_{n}<br>\end{bmatrix}<br>$$</p><p>$$<br>A(2:end,2:end)\cdot \begin{bmatrix}<br>u_{1}   \<br>\vdots\<br>u_{n}<br>\end{bmatrix}=\begin{bmatrix}<br>b_{1}   \<br>\vdots\<br>b_{n}<br>\end{bmatrix}-A(2:end,1)\cdot u_0<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第五章（2）</title>
      <link href="/2025/06/12/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A312/"/>
      <url>/2025/06/12/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A312/</url>
      
        <content type="html"><![CDATA[<h1>二阶椭圆方程 Dirichlet 边值问题</h1><h2 id="一、问题设定（Dirichlet-边值问题）">一、问题设定（Dirichlet 边值问题）</h2><p>微分方程（强形式）：<br>$$<br>\begin{cases}<br>-\Delta u = f, &amp; G\<br>u = \varphi(x,y), &amp; \partial G<br>\end{cases}<br>$$<br>$\Delta$ 是 Laplace 算子，$\varphi \in C^1(\Gamma)$ 是边界函数</p><h2 id="二、变分问题（弱形式）推导">二、变分问题（弱形式）推导</h2><p><strong>经典解与分部积分</strong>：若 $u$ 是强形式解（$u \in C^2(\bar{G})$ ），对任意 $v \in C_0^\infty(G)$（紧支光滑函数 ），利用 Green 公式分部积分得：<br>$$<br>\int_G-\Delta uvdxdy= \int_{G} \nabla u \cdot \nabla v , dxdy - \int_{G} \frac{\partial u}{\partial \vec{n}}  v , dxdy = 0<br>$$<br><strong>拓展到变分问题</strong>：变分问题（弱形式）要求：对任意 $v \in C_0^\infty(\bar{G})$ 且 $v|_{\partial G}= \varphi$ ，满足<br>$$<br>\int_{G} \nabla u \cdot \nabla v , dxdy - \int_{G} f v , dxdy = 0<br>$$<br>反之，若 $u$ 是变分问题的解，且 $u \in C^2(\bar{G})$，对任意 $v \in C_0^\infty(G)$，对变分方程用格林公式展开得<br>$$<br>\begin{align}<br>&amp;\int_{G} \nabla u \cdot \nabla v , dxdy - \int_{G} f v , dxdy = 0\<br>&amp;=\int_G-\Delta uv,dxdy± \int_{G} \frac{\partial u}{\partial \vec{n}}  v , dxdy -\int_G fv,dxdy\<br>&amp;=\int_G (-\Delta u-f)v,dxdy<br>\end{align}<br>$$<br>则由变分学基本引理有<br>$$<br>-\Delta u-f=0<br>$$<br>又因为变分问题中的 $u$ 满足 $u|_\Gamma$ ，故 $u$ 是原 BVP 的解</p><h2 id="三、广义导数与-Sobolev-空间">三、广义导数与 Sobolev 空间</h2><h3 id="广义偏导数">广义偏导数</h3><p>变分问题中，$u$ 仅需一阶广义导数（基于 Sobolev 空间 $H^1(G)$ ），通过分部积分定义广义偏导数：<br>$$<br>\int_{G} \frac{\partial}{\partial x}(fv) , dxdy = \int_{\partial G} fv \cos\alpha , ds<br>$$<br>$\alpha$ 是边界法向与 $x$ 轴夹角</p><p>若 $v|<em>{\partial \Omega}=0$ ，则有<br>$$<br>\int</em>{G} \frac{\partial f}{\partial x}v , dxdy = -\int_{ G} f \frac{\partial v}{\partial x} , dxdy<br>$$<br>设 $f \in L^2(G)$，若存在 $g \in L^2(G)$，对任意 $v \in C_0^\infty(G)$ 满足：<br>$$<br>\int_{G} g \cdot v , dxdy = -\int_{G} f \cdot \frac{\partial v}{\partial x} , dxdy<br>$$</p><p>则称 $g$ 是 $f$ 关于 $x$ 的<strong>一阶广义偏导数</strong>，记为 $f_x = g$ ；关于 $y$ 的广义偏导数 $f_y$ 同理定义</p><h3 id="二、Sobolev-空间-H-1-G">二、Sobolev 空间  $H^1(G)$</h3><p>定义：$H^1(G) = \left\{ u \mid u, u_x, u_y \in L^2(G) \right\}$（$u_x, u_y$ 是广义偏导数 ）</p><p><strong>内积与范数</strong>：</p><p>内积：<br>$$<br>(f,g)<em>1 = \int</em>{G} \left( fg + f_x g_x + f_y g_y \right) dxdy<br>$$<br>范数：$|u|_1 = \sqrt{(u,u)_1}$</p><p><strong>子空间 $H_0^1(G)$：</strong>$C_0^\infty(G)$ 在 $H^1(G)$ 中的闭包，对应 “齐次 Dirichlet 边界条件” 的函数空间</p><h3 id="三、边值问题的广义解">三、边值问题的广义解</h3><p>对椭圆型边值问题（如 Dirichlet 问题 ），若 $u \in H^1(G)$ 满足 $u|<em>{\partial G} = \varphi$（边界条件 ），且对任意 $v \in H_0^1(G)$ 满足变分方程：<br>$$<br>\int</em>{G} \nabla u \cdot \nabla v , dxdy - \int_{G} f v , dxdy = 0<br>$$<br>则称 $u$ 是边值问题的<strong>广义解</strong>，放宽了解的光滑性要求（仅需一阶广义导数 ）</p><h3 id="四、自然边界条件（混合边值）">四、自然边界条件（混合边值）</h3><p>对含自然边界条件的椭圆方程：<br>$$<br>\begin{cases}<br>-\Delta u = f, &amp; G  \<br>\frac{\partial u}{\partial \vec{n}} + \alpha u = \varphi, &amp;  \partial G  \quad (\alpha \geq 0)<br>\end{cases}<br>$$<br>$\displaystyle \frac{\partial u}{\partial \vec{n}}$ 是法向导数 ，若 $u$ 是此方程的解，则对任意 $v \in C^\infty(G)$ ，有<br>$$<br>\int_{G} \nabla u \cdot \nabla v , dxdy -\int_{\partial G}\frac{\partial u}{\partial \vec{n}}v,ds=\int_G fv,dxdy<br>$$</p><p>$$<br>\int_{G} \nabla u \cdot \nabla v , dxdy + \alpha \int_{\partial G} u v , ds = \int_{G} f v , dxdy + \int_{\partial G} \varphi v , ds \quad (\forall v \in H^1(G))<br>$$</p><p>$H^1(G)$ 是 Sobolev 空间，$C^\infty(G)$ 在 $H^1(G)$ 中稠密，故 $u$ 是如下变分问题的解<br>$$<br>\begin{cases}<br>\displaystyle \int_{G} \nabla u \cdot \nabla v , dxdy + \alpha \int_{\partial G} u v , ds = \int_{G} f v , dxdy + \int_{\partial G} \varphi v , ds \quad \forall v \in H^1(G)  \<br>u \in H^1(G)<br>\end{cases}<br>$$</p><p>反之，若 $u$ 是变分问题的解，且 $u \in C^2(\bar{G}) $，则对任意 $v \in C^\infty(G)$ ，有<br>$$<br>\int_{G} \Delta u \cdot  v , dxdy -\int_{\partial G}\frac{\partial u}{\partial \vec{n}}v,ds +\alpha \int_{\partial G} u v , dxdy -\int_{\partial G} \varphi v , ds - \int_G fv,dxdy=0<br>$$<br>即<br>$$<br>\int_G (-\Delta u-f)v,dxdy+\int_{\partial G}(\frac{\partial u}{\partial \vec{n}}+\alpha u-\varphi)v,ds=0<br>$$<br>则有<br>$$<br>\int_G (-\Delta u-f)v,dxdy=0 \quad \quad \forall v \in C^\infty(G)<br>$$<br>由变分法基本引理得<br>$$<br>-\Delta u-f=0<br>$$<br>于是<br>$$<br>\int_{\partial G}(\frac{\partial u}{\partial \vec{n}}+\alpha u-\varphi)v,ds=0\quad \quad \forall v \in C^\infty(G)<br>$$<br>再由 $\varphi$ 的任意性，则有<br>$$<br>\frac{\partial u}{\partial \vec{n}}+\alpha u=\varphi<br>$$<br>故 $u$ 是原 BVP 的解</p><h1>Ritz-Galerkin 方法</h1><p><strong>边值问题（BVP）统一形式</strong></p><p>椭圆型边值问题（含零边界条件）：<br>$$<br>\begin{cases}<br>Lu = f \<br>B.C.<br>\end{cases}<br>$$</p><h2 id="一、两种变分形式（极小位能原理-虚功原理）">一、两种变分形式（极小位能原理 + 虚功原理）</h2><p><strong>极小位能原理（Ritz 法）</strong>：</p><p>找 $u \in U$ 使总位能<br>$$<br>J(u)=\frac{1}{2}a(u,u)-(f,u)<br>$$<br>取得极小</p><p>其中：$a(u,v)$ 是双线性形式（对称、正定、有界）</p><p>如 $-u’‘=f$ 时<br>$$<br>a(u,v)=\int_{a}^{b} u’v’ dx<br>$$<br>$-\Delta u=f$ 时<br>$$<br>a(u,v)=\int_{G} \nabla u \cdot \nabla v dxdy<br>$$<br>有界性：$|a(u,v)| \leq C_1 |u|_1 |v|_1$</p><p>正定性：$a(u,u) \geq C_2 |u|_1^2$（由 Poincaré 不等式保证 ）</p><p><strong>虚功原理（Galerkin 法）</strong>：找 $u \in U$ 使 $a(u,v)=(f,v)$ 对任意 $v \in U$ 成立，$a(u,v)$ 可不对称、不正定，适用更广</p><h2 id="二、有限维逼近思想">二、有限维逼近思想</h2><p>用有限维子空间 $U_n \subset U$ 近似无穷维解空间 $U$ ，设 $U_n$ 的基为 ${ \varphi_1, \varphi_2, \dots, \varphi_n }$ ，则近似解 $\displaystyle u_n = \sum_{i=1}^{n} c_i \varphi_i$ ，代入变分形式（极小位能或虚功原理 ）得到线性方程组，求解系数 $c_i$ ，是有限元方法 “离散化” 的核心步骤</p><h2 id="三、Ritz-法（极小位能离散化）">三、Ritz 法（极小位能离散化）</h2><p><strong>离散近似解</strong>：设有限维子空间 $U_n = \text{span}{ \varphi_1, \dots, \varphi_n }$ ，近似解 $\displaystyle u_n = \sum_{i=1}^{n} c_i \varphi_i$</p><p><strong>总位能泛函</strong>：<br>$$<br>J(u_n)=\frac{1}{2}a(u_n,u_n)-(f,u_n)<br>$$<br>展开为关于 $c_i$ 的二次型：<br>$$<br>\begin{align}<br>J(u_n) &amp;=\frac{1}{2}a(u_n,u_n)-(f,u_n) \<br>&amp;= \frac{1}{2}a (\sum_{i=1}^{n}c_i \varphi_i,\sum_{j=1}^{n}c_j \varphi_j)-\sum_{j=1}^{n}(f,\varphi_i)c_j\<br>&amp;=\frac{1}{2}\sum_{i,j=1}^{n} a(\varphi_i,\varphi_j)c_i c_j - \sum_{j=1}^{n} (f,\varphi_j)c_j<br>\end{align}<br>$$<br><strong>极小值条件</strong>：记<br>$$<br>F(c_1,\cdots,c_n)\triangleq J(u_n)=\frac{1}{2}C^TAC-C^T\bar{f}<br>$$<br>令<br>$$<br>\frac{\partial F}{\partial c_j}=0,\quad j=1, \cdots,n<br>$$<br>即 $\nabla F=0$</p><p>则<br>$$<br>Ac-\bar{f}=0<br>$$<br>即<br>$$<br>\sum_{i=1}^{n}a(\varphi i,\varphi j)c_i-(f,\varphi_j)=0<br>$$<br>其中：</p><p>刚度矩阵 $A = [a(\varphi_i,\varphi_j)]$（对称正定，因 $a(\cdot,\cdot)$ 双线性、正定 ）；<br>$$<br>A_{ij}=[a(\varphi i,\varphi j)]<br>$$<br>载荷向量 $\bar{f} = [(f,\varphi_j)]$</p><h2 id="四、Galerkin-法（虚功原理离散化）">四、Galerkin 法（虚功原理离散化）</h2><p><strong>离散方程</strong>：找 $\displaystyle u_n = \sum_{i=1}^{n} c_i \varphi_i$ 使 $a(u_n,v)=(f,v)$ 对任意 $v \in U_n$ 成立。</p><p><strong>基函数代入</strong>：取 $v = \varphi_j$（$j=1,\dots,n$ ），得线性方程组：<br>$$<br>\sum_{i=1}^{n} a(\varphi_i,\varphi_j)c_i = (f,\varphi_j)<br>$$<br>与 Ritz 法导出的 $Ac = \mathbf{f}$ 完全一致，故 <strong>Ritz - Galerkin 方法等价</strong></p><h2 id="五、误差估计定理">五、误差估计定理</h2><p>设 $u$ 是变分问题真解，$u_n$ 是 Ritz - Galerkin 近似解，则存在与 $u, u_n$ 无关的常数 $\beta$ ，满足：<br>$$<br>| u - u_n |<em>1 \leq \beta \inf</em>{v \in U_n} | u - v |_1<br>$$<br>$|\cdot|_1$ 是 $H^1$ 范数，体现近似解误差不超过真解到子空间 $U_n$ 的最小距离，刻画离散方法的收敛性</p><p>若基函数系 ${ \varphi_i }_{i=1}^\infty$ 在解空间 $U$ 中完全（稠密），则由误差估计式</p><p>可得 $u_n \to u$（当 $n \to \infty$ 时，$| u - u_n |_1 \to 0$ ）</p><p><strong>推导</strong>：对任意 $\varepsilon &gt; 0$，因基函数完全，存在 $\displaystyle v_m = \sum_{i=1}^m d_i \varphi_i \in U_m$ 使<br>$$<br>| u - v_m |<em>1 &lt; \frac{\varepsilon}{\beta}<br>$$<br>当 $n &gt; m$ 时，$U_m \subset U_n$，故<br>$$<br>\inf</em>{v \in U_n} | u - v |_1 \leq | u - v_m |_1 &lt; \frac{\varepsilon}{\beta}<br>$$<br>代入误差估计式得 $| u - u_n |_1 &lt; \varepsilon$，即 $u_n$ 依 $H^1$ 范数收敛到 $u$</p><p>现证误差估计式$$a(u, v_n) = (f, v_n)$$<br>$$<br>| u - u_n |<em>1 \leq \beta \inf</em>{v \in U_n} | u - v |_1<br>$$<br>成立</p><p>对原变分问题 $a(u,v)=(f,v)$</p><p>Ritz-Galerkin：<br>$$<br>\begin{align}<br>a(u_n,v_n) &amp;=(f,v_n)  \quad \forall v \in U_n\<br>a(u,v_n) &amp;=(f,v_n)\<br>\end{align}<br>$$<br>故 $a(u-u_n, v_n) = 0$, 对 $\forall v_n \in U_n$</p><p>由于 $a(u, u)$ 正定：<br>$$<br>\begin{align}<br>|u-u_n|_1^2 &amp;\leq \frac{1}{r} a(u-u_n, u-u_n)\<br>&amp;= \frac{1}{r} a(u-u_n, u)\<br>&amp;= \frac{1}{r} a(u-u_n, u-u_n)\<br>&amp;\leq \frac{M}{r} \cdot |u-u_n|_1 \cdot |u-v_n|_1<br>\end{align}<br>$$</p><p>$$<br>\Rightarrow |u-u_n|_1 \leq \frac{M}{r} |u-v_n|_1  \quad \forall v_n \in U_n<br>$$</p><p>取下确界：<br>$$<br>|u-u_n|<em>1 \leq \beta \cdot \inf</em>{v \in U_n} |u-v|_1<br>$$<br><strong>注</strong>：</p><p>1、非零边值条件时，变分问题为 求 $u \in H_\alpha^1 $ 使得<br>$$<br>\begin{align}<br>\int_a^bu’\varphi’,dx &amp;=\int_a^bf\varphi,dx+\beta\varphi(b) \<br>a(u,\varphi) &amp;=(f,\varphi)+\beta \varphi(b)<br>\end{align}<br>$$<br>设<br>$$<br>u_n=u_0(x)+\sum_{i=1}^{n}c_i\varphi_i<br>$$<br>其中 $u_0(x)$ 已知，$u_0(a)=\alpha$</p><p>Ritz-Galerkin：<br>$$<br>\begin{align}<br>a(u_n,\varphi j) &amp;= (f,\varphi_j)+\beta \varphi_i(b)\<br>\sum_{i=1}^{n}a(\varphi_i,\varphi_j)c_i &amp;= (f,\varphi_j)+\beta \varphi_j(b)-a(u_0,\varphi_j)<br>\end{align}<br>$$<br>2、对带一阶导数的微分方程，只能用 Ritz-Galerkin 方法<br>3、$U_n,\varphi_j$ 的不同选取可导出不同方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第五章（1）</title>
      <link href="/2025/06/08/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A311/"/>
      <url>/2025/06/08/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A311/</url>
      
        <content type="html"><![CDATA[<h1>边值问题的变分形式</h1><h2 id="有限元方法基础">有限元方法基础</h2><h3 id="一、数学基础（二次函数极值与线性方程组）">一、数学基础（二次函数极值与线性方程组）</h3><p>矩阵 $A \in \mathbb{R}^{n \times n}$ 对称正定</p><p>定理：求<br>$$<br>\min_{x} J(x)=\frac{1}{2}(Ax, x)-(b, x)<br>$$<br>等价于解线性方程组 $Ax = b$</p><h3 id="二、弦的平衡问题（两点边值问题）">二、弦的平衡问题（两点边值问题）</h3><p><strong>物理模型</strong>：弦在分布外力 $f(x)$ 作用下，平衡位置 $u = u(x)$ 满足微分方程边值问题：<br>$$<br>\begin{cases}<br>-Tu’’ = f(x), &amp; 0 &lt; x &lt; L \<br>u(0) = 0, \ u(L) = 0<br>\end{cases}<br>$$<br>$T$ 为弦的张力，$L$ 为弦长</p><p><strong>总位势与变分原理</strong>：总位势 $J(u)=W_{\text{内}} + W_{\text{外}}$ ，展开为<br>$$<br>\frac{1}{2}\int_{0}^{L} T(u’)^2 dx - \int_{0}^{L} f u dx<br>$$<br>应变能 + 外力位能</p><p><strong>极小位能原理</strong>：弦的平衡位置是满足边界条件的所有可能位移中，使总位能最小的位移，对应变分问题 $\displaystyle \min_{u \in H_0^1} J(u)$ ，是有限元方法（基于 Ritz - Galerkin 法 ）求解边值问题的物理基础</p><h4 id="从数学角度分析">从数学角度分析</h4><p><strong>微分方程（ODE - BVP）</strong>：设 $T = 1$ ，方程为<br>$$<br>\begin{cases}<br>-u’’ = f(x), &amp; 0 &lt; x &lt; L \<br>u(0) = 0, \ u(L) = 0<br>\end{cases}<br>$$<br><strong>对应变分问题</strong>：最小化总位势<br>$$<br>J(u)=\frac{1}{2}\int_{0}^{L} (u’)^2 dx - \int_{0}^{L} f u dx<br>$$<br>定义域<br>$$<br>E = \left{ u \in C^2[0,L] \mid u(0)=0 = u(L) \right}<br>$$</p><h4 id="等价性证明（变分问题→微分方程）">等价性证明（变分问题→微分方程）</h4><p>1.设 $\bar{u}$ 是 $J(u)$ 在 $E$ 中的极小值点，取任意 $v \in C^2[0,l]$ 满足 $v(0)=0 = v(l)$ ，构造 $\bar{u}+\lambda v \in E$（$\lambda \in \mathbb{R}$ ）</p><p>2.定义 $\varphi (\lambda)=J(\bar{u}+\lambda v)$ ，因 $\bar{u}$ 是极小值点，故 $\varphi(\lambda)$ 在 $\lambda = 0$ 处取极小，即 $\varphi^\prime(0)=0$</p><p>3.展开 $\varphi(\lambda)$ 并对 $\lambda$ 求导，代入 $\lambda = 0$ 得：<br>$$<br>\begin{align}<br>\left. \frac{d\varphi}{d\lambda} \right|<em>{\lambda = 0} &amp;=\int</em>{0}^{l} \bar{u}^\prime v^\prime dx - \int_{0}^{l} f v dx \<br>&amp;=\bar{u}‘v|^l_0-\int_0^l\bar{u}’‘vdx-\int^l_0fvdx\<br>&amp;=-\int_0^l(\bar{u}’'+f)vdx\<br>&amp;=0</p><p>\end{align}<br>$$<br>4.由<strong>变分法基本引理</strong></p><p>若 $g \in C^2$ 且<br>$$<br>\int_{a}^{b} g \varphi dx = 0<br>$$<br>对任意 $\varphi \in C_0^\infty[a,b]$ 成立，则 $g \equiv 0$</p><p>得 $\bar{u}^{\prime\prime}+f = 0$ ，即 $\bar{u}$ 满足原微分方程 ，又因 $\bar{u}\in E$，故 $\bar{u}(0)=\bar{u}(1)=0$，即 $\bar{u}$ 是原 ODE-BVP 的解</p><h4 id="微分方程→变分问题">微分方程→变分问题</h4><p>1.设 $\bar{u}(x)$ 是原 ODE - BVP（$-u’’ = f(x),\ u(0)=u(l)=0$ ）的解，任取 $w \in E$，其中 $E = \{ u \in C^2[0,l] \mid u(0)= 0 = u(l) \} $，令<br>$$<br>v = w - \bar{u}<br>$$<br>则 $v \in C^2[0,l]$  且 $v(0)=v(l)=0$</p><p>2.展开化简<br>$$<br>\begin{align}<br>J(w) &amp;=J(\bar{u}+v)=\frac{1}{2}\int_0^l(\bar{u}‘+f)^2dx-\int_0^lf(\bar{u}+v)dx\<br>&amp;= \frac{1}{2}\int_0^l[(\bar{u}’)^2+2\bar{u}‘v’+(v’)^2]dx-\int_0^lf(\bar{u}+v)dx\<br>&amp;=J(\bar{u})+\int_0^l\bar{u}‘v’dx+\frac{1}{2}\int_0^l(v’)^2dx-\int_0^lfvdx\<br>&amp;=J(\bar{u})+\frac{1}{2}\int_0^l(v’)^2dx+\bar{u}‘v|^l_0-\int_0^l(\bar{u}’‘+f)vdx\<br>&amp;=J(\bar{u})+\frac{1}{2}\int_0^l(v’)^2dx \geq J(\bar{u})<br>\end{align}<br>$$<br>故 $\bar{u}$ 是变分问题（极小化 $J(u)$ ）的解，证明 ODE - BVP 的解等价于变分问题的解</p><h3 id="三、变分法基本引理及拓展">三、变分法基本引理及拓展</h3><p><strong>基本引理</strong>：若<br>$$<br>\int_{a}^{b} f(x) \varphi(x) dx = 0<br>$$<br>对任意 $\varphi \in C_0^\infty(I)$ 成立，则</p><p>若 $f \in C[a,b]$ ，则 $f(x) \equiv 0$ 于 $[a,b]$ ；</p><p>若 $f \in L^2(I)$ ，则 $f(x) = 0$ 几乎处处（a.e.）于 $[a,b]$</p><p><strong>泛函角度</strong>：$-u’’ - f = 0$ 是 $J(u)$ 的 Euler - Lagrange 方程，$J(u)$ 的一阶变分 $\delta J(u)=-u’’ - f$（Frechet 导数 ）</p><p><strong>广义导数（分部积分推广）</strong>：通过分部积分引入广义导数概念，处理 $f(x) \in C^1[a,b]$ 时，对 $\varphi \in C_0^\infty[a,b]$ 有<br>$$<br>\int_{a}^{b} f’(x) \varphi(x) dx = -\int_{a}^{b} f(x) \varphi’(x) dx<br>$$</p><p>设 $f \in L^2[a,b]$，若存在 $g(x) \in L^2[a,b]$，使得对任意 $\varphi \in C_0^\infty[a,b]$（紧支光滑函数），满足：<br>$$<br>\int_{a}^{b} g(x) \varphi(x) dx = -\int_{a}^{b} f(x) \varphi’(x) dx<br>$$<br>则称 $g(x)$ 是 $f(x)$ 的<strong>广义导数</strong>，记为  $f’(x) = g(x)$</p><h3 id="四、Sobolev-空间-H-1-I">四、Sobolev 空间  $H^1(I)$</h3><p>定义：<br>$$<br>H^1(I) = \left{ f \mid f \in L^2(I),\ f’ \in L^2(I) \right}<br>$$<br>$I = [a,b]$ ，其中 $f’$ 是广义导数</p><p><strong>内积与范数</strong>：</p><p>内积：<br>$$<br>(f,g)<em>1 = \int</em>{a}^{b} (fg + f’g’) dx<br>$$<br>范数：<br>$$<br>|f|_1 = \sqrt{(f,f)_1}<br>$$<br><strong>空间性质</strong>：$H^1(I)$ 是 Hilbert 空间（完备内积空间 ）</p><h3 id="五、一般-Sobolev-空间-W-k-p-I">五、一般 Sobolev 空间  $W^{k,p}(I)$</h3><p>定义：<br>$$<br>W^{k,p}(I) = \left{ f \mid f, f’, \dots, f^{(k)} \in L^p(I) \right}<br>$$<br>其中 $f^{(m)}$（$m \leq k$ ）是 $m$ 阶广义导数，满足：<br>$$<br>\int_{a}^{b} g(x) \varphi(x) dx = (-1)^k \int_{a}^{b} f(x) \varphi^{(k)}(x) dx \quad (\forall \varphi \in C_0^\infty(I))<br>$$<br><strong>推广</strong>：可拓展到平面区域 $G$，记为 $W^{k,p}(G)$ ，是偏微分方程弱解理论的核心空间框架</p><h3 id="六、广义解定义">六、广义解定义</h3><p>对 ODE - BVP 的变分问题：<br>$$<br>\begin{align}<br>&amp;\min_{u \in E} J(u)=\frac{1}{2}\int_{0}^{L} (u’)^2 dx - \int_{0}^{L} f u dx\<br>&amp;E = \left{ u \in H^1(0,L) \mid u(0)=0 = u(L) \right}<br>\end{align}<br>$$<br>若变分问题有解 $\bar{u}$，则称 $\bar{u}$ 是原 ODE - BVP 的<strong>广义解</strong></p><h3 id="七、边界条件分类（本质边值-vs-自然边值）">七、边界条件分类（本质边值 vs 自然边值）</h3><p><strong>本质边值条件</strong>：直接约束函数值的边界条件（如 $u(a)=\alpha, u(b)=\beta$ ），对应变分问题中定义域 $E$ 的约束（$u \in E$ 需满足 $u(a)=\alpha, u(b)=\beta$ ）。</p><p><strong>自然边值条件</strong>：通过变分推导自动满足的边界条件（如 $u’(b)=\beta$ ），无需显式加入定义域约束，由变分问题极小值点的一阶条件导出 。</p><p><strong>不同边界条件的变分问题：</strong></p><p>**本质边值（ $u(a)=\alpha, u(b)=\beta$ ）：**变分问题为<br>$$<br>\begin{align}<br>&amp;\min_{u \in E} J(u)=\frac{1}{2}\int_{a}^{b} (u’)^2 dx - \int_{a}^{b} f u dx\<br>&amp;E = \left{ u \in C^2[a,b] \mid u(a)=\alpha, u(b)=\beta \right}<br>\end{align}<br>$$<br>**混合边值（ $u(a)=\alpha$ ）：**变分问题为<br>$$<br>\begin{align}<br>&amp;\min_{u \in E} J(u)=\frac{1}{2}\int_{a}^{b} (u’)^2 dx - \int_{a}^{b} f u dx - \beta u(b)\<br>&amp;E = \left{ u \in C^2[a,b] \mid u(a)=\alpha \right}<br>\end{align}<br>$$</p><h3 id="八、自然边值条件的证明">八、自然边值条件的证明</h3><p><strong>先证必要性：</strong></p><p>设 $\bar{u}$ 是变分问题极小值点，取 $v \in C^2[a,b]$ 满足 $v(a)=0$ ，构造 $\bar{u}+\lambda v \in E$（$\lambda \in \mathbb{R}$ ）</p><p>定义 $\varphi(\lambda)=J(\bar{u}+\lambda v)$ ，因 $\bar{u}$ 是极小值点，故 $\varphi’(0)=0$ 。展开并化简得：<br>$$<br>\begin{align}<br>\varphi(\lambda) &amp;= J(\bar{u}+\lambda v)\<br>&amp;=\frac{1}{2}\int_a^b(\bar{u}‘+\lambda v’)^2dx-\int_a^b f(\bar{u}+\lambda v)dx-\beta(\bar{u}(b)+\lambda v(b))\<br>&amp;=\frac{1}{2}\int_a^b(\bar{u}‘)^2dx-\int_a^b f\bar{u}dx-\beta \bar{u}(b)+\frac{1}{2}\int_a^b(v’)^2dx\cdot\lambda^2+\lambda[\int_a^b(\bar{u}‘v’-fv)dx-\beta v(b)]\<br>&amp;=J(\bar{u})+\frac{1}{2}\int_a^b(v’)^2dx\cdot\lambda^2+\lambda[\int_a^b(\bar{u}‘v’-fv)dx-\beta v(b)]<br>\end{align}<br>$$<br>由 $\bar{u}$ 是变分问题极小值点，故 $\varphi’(0)=0$<br>$$<br>\begin{align}<br>\varphi’(0) &amp;= \int_a^b(\bar{u}‘v’-fv)dx-\beta v(b)\<br>&amp;=\bar{u}v|_a^b-\int_a^b(\bar{u}‘’+f)vdx-\beta v(b)\<br>&amp;=-\int_a^b(\bar{u}‘’+f)vdx+(\bar{u}‘(b)-\beta)v(b)\<br>&amp;=0<br>\end{align}<br>$$<br>由变分法基本引理得<br>$$<br>-\bar{u}’‘-f=0<br>$$<br>进而 $u’(b)=\beta$ 自动满足</p><p><strong>再证充分性：</strong></p><p>设 $\bar{u}$ 是 ODE - BVP 的解，任取 $w \in E$ ，令 $v = w - \bar{u}$ ，则 $v \in C^2[a,b],v(a)=0$</p><p>展开 $J(w)$ 并化简<br>$$<br>\begin{align}<br>J(w) &amp;=J(\bar{u}+v)=\frac{1}{2}\int_a^b(\bar{u}‘+v’)^2dx-\int_a^bf(\bar{u}+b)dx-\beta (\bar{u}(b)+v(b))\<br>&amp;=J(\bar{u}) +\frac{1}{2}\int_a^b(v’)^2dx+\int_a^b\bar{u}‘v’dx-\int_a^bfvdx-\beta v(b)\<br>&amp;=J(\bar{u})+\frac{1}{2}\int_0^l(v’)^2dx+\bar{u}‘v|^b_a-\int_0^l(\bar{u}’‘+f)vdx-\beta v(b)\<br>&amp;=J(\bar{u})+\frac{1}{2}\int_0^l(v’)^2dx \geq J(\bar{u})<br>\end{align}<br>$$<br>即 $\bar{u}$ 是变分问题的解</p><h3 id="九、虚功原理（弱形式与广义解）">九、虚功原理（弱形式与广义解）</h3><p><strong>虚功原理表述</strong>：对 ODE - BVP（$-u’’ = f,\ u(a)=0,\ u(b)=0$ ），$\bar{u} \in C^2$ 是解等价于满足变分方程：<br>$$<br>\int_{a}^{b} \bar{u}’ v’ dx - \int_{a}^{b} f v dx = 0 \quad (\forall v \in H_E^1)<br>$$<br>其中<br>$$<br>H_E^1 = \left{ u \in H^1(a,b) \mid u(a)=0 \right}<br>$$<br>称为 Sobolev 空间约束</p><p><strong>广义解</strong>：变分方程的解允许 $u$ 不光滑（仅需 $u \in H_E^1$ ），称为 ODE - BVP 的<strong>广义解</strong>，拓展了经典解的适用范围，是有限元方法求解偏微分方程的核心理论（弱解框架 ）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第四章（2）</title>
      <link href="/2025/06/02/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A310/"/>
      <url>/2025/06/02/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A310/</url>
      
        <content type="html"><![CDATA[<h1>初值问题的差分逼近</h1><p>对于一阶双曲方程<br>$$<br>\begin{cases}u_t + a u_x = 0 \ \text{初值条件、边值}\end{cases}<br>$$<br>周期边界：$u(0,t)=u(L,t)$</p><p>Dirichlet 边界：$\begin{cases}a&gt;0时，u(0,t)=g(t) \ a&lt;0时，u(L,t)=g(t) \end{cases}$</p><p>双曲、椭圆、抛物型方程区别</p><p>依据<strong>特征</strong>来区分，初值的性质体现为沿特征传播，无间断</p><h2 id="几种常见差分格式（迎风格式相关）">几种常见差分格式（迎风格式相关）</h2><p>设时间步长为$\tau$，空间步长为$h$，$\displaystyle r = \frac{a\tau}{h}$，以下为时间向前的三种显式格式：</p><h3 id="格式-一：空间向后">格式 一：空间向后</h3><p>$$<br>\frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_j^n - u_{j - 1}^n}{h} = 0<br>$$</p><p>精度 $O(\tau + h)$ ，对应 Fourier 方法变换（设 $u_j^n = v^n e^{i\lambda x_j}$ ）<br>$$<br>\begin{align}<br>u_j^{n+1} &amp;= (1 - r)u_j^n + r u_{j - 1}^n \<br>\implies v^{n+1} &amp;= [(1 - r) + r e^{-i\lambda h}]v^n \<br>&amp;= \lambda_1 v^n<br>\end{align}<br>$$</p><h3 id="格式-二：空间向前">格式 二：空间向前</h3><p>$$<br>\frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_{j + 1}^n - u_j^n}{h} = 0<br>$$</p><p>精度 $O(\tau + h)$ ，Fourier 变换后：<br>$$<br>\begin{align}<br>u_j^{n+1} &amp;= (1 + r)u_j^n - r u_{j + 1}^n \<br>\implies v^{n+1} &amp;= [(1 + r) - r e^{i\lambda h}]v^n \<br>&amp;= \lambda_2 v^n<br>\end{align}<br>$$</p><h3 id="格式-三：空间中心">格式 三：空间中心</h3><p>$$<br>\frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_{j + 1}^n - u_{j - 1}^n}{2h} = 0<br>$$</p><p>精度 $O(\tau + h^2)$ ，Fourier 变换后：<br>$$<br>\begin{align}<br>u_j^{n+1} &amp;= u_j^n + \frac{r}{2}u_{j - 1}^n - \frac{r}{2}u_{j + 1}^n \<br>\implies v^{n+1} &amp;= \left[1 - \frac{r}{2}(e^{i\lambda h} - e^{-i\lambda h})\right]v^n \<br>&amp;= \lambda_3 v^n<br>\end{align}<br>$$</p><h2 id="差分格式稳定性（Fourier-分析）">差分格式稳定性（Fourier 分析）</h2><p>设三种差分格式对应增长因子为 $\lambda_1$、$\lambda_2$、$\lambda_3$ ，通过模长 $|\lambda|^2$ 分析稳定性：</p><h3 id="格式-一：（空间向后，-a-0-场景）">格式 一：（空间向后，$a&gt;0$ 场景）</h3><p>$$<br>\begin{align}<br>|\lambda_1|^2 &amp;=(1 - r + r\cos\lambda h)^2 + (-r\sin\lambda h)^2 \<br>&amp;= 1 + 2r(1 - r)(\cos\lambda h - 1)<br>\end{align}<br>$$</p><p>由 $2r(1 - r)\geq0$（需 $0\leq r\leq1$ ，即 $\displaystyle \frac{a\tau}{h}\leq1$ 且 $a&gt;0$ ），当 $a&gt;0$ 且 $\displaystyle \frac{a\tau}{h}\leq1$ 时，格式 1 稳定</p><h3 id="格式-二：（空间向前，-a-0-场景）">格式 二：（空间向前，$a&lt;0$ 场景）</h3><p>$$<br>|\lambda_2|^2=1 + 2r(r + 1)(1 - \cos\lambda h)<br>$$</p><p>由 $r(r + 1)\leq0$（需 $-1\leq r\leq0$ ，即 $\displaystyle \frac{a\tau}{h}\geq -1$ 且 $a&lt;0$ ），对应情况下格式 2 稳定</p><h3 id="格式-三：（空间中心）">格式 三：（空间中心）</h3><p>$$<br>|\lambda_3|^2=1 + r^2\sin^2\lambda h &gt; 1<br>$$</p><p>增长因子模长恒大于 1，<strong>格式 3 恒不稳定</strong></p><h3 id="稳定性条件的特征线解释">稳定性条件的特征线解释</h3><p>特征线方程 $\displaystyle \frac{dx}{dt}=a$ ，沿特征线 $u = \text{const}$ 。以 $a&gt;0$ 为例，利用特征线附近节点（$Q_1,Q_0$ 等）做线性插值构造数值解，推导得数值解形式 $u_j^{n+1}=ru_{j - 1}^n + (1 - r)u_j^n$（即格式 1 ），稳定性条件要求<strong>数值解依赖域包含精确解依赖域</strong> ；$a&lt;0$ 时同理分析格式 2</p><h2 id="迎风格式总结">迎风格式总结</h2><h3 id="一、显式迎风格式">一、显式迎风格式</h3><p>$$<br>\begin{cases}<br>\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_j^n - u_{j - 1}^n}{h} = 0, &amp; a&gt;0 \<br>\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_{j + 1}^n - u_j^n}{h} = 0, &amp; a&lt;0<br>\end{cases}<br>$$</p><h3 id="二、隐式迎风格式">二、隐式迎风格式</h3><p>$$<br>\begin{cases}<br>\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_j^{n+1} - u_{j - 1}^{n+1}}{h} = 0, &amp; a&gt;0 \<br>\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} + a\frac{u_{j + 1}^{n+1} - u_j^{n+1}}{h} = 0, &amp; a&lt;0<br>\end{cases}<br>$$</p><h3 id="三、变系数情形（-a-x-为系数）">三、变系数情形（$a(x)$ 为系数）</h3><p>对于方程<br>$$<br>u_t + a(x) u_x = 0<br>$$<br><strong>显式迎风格式：</strong><br>$$<br>\begin{cases}<br>\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} + a(x_j)\frac{u_j^n - u_{j - 1}^n}{h} = 0, &amp; a(x_j)\geq0 \<br>\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} + a(x_j)\frac{u_{j + 1}^n - u_j^n}{h} = 0, &amp; a(x_j)&lt;0<br>\end{cases}<br>$$<br><strong>稳定性充分条件：</strong><br>$$<br>\frac{\tau}{h}\max_j|a(x_j)|\leq1<br>$$</p><h2 id="一阶双曲方程组">一阶双曲方程组</h2><p>形式为<br>$$<br>\frac{\partial U}{\partial t} + A(x)\frac{\partial U}{\partial x} = F<br>$$<br>也有迎风格式，空间导数离散依赖 $A(x)$ 特征值的正交性</p><h2 id="积分守恒格式（有限体积法）">积分守恒格式（有限体积法）</h2><p>针对散度型 PDE：<br>$$<br>\frac{\partial u}{\partial t} + \frac{\partial f(t,u)}{\partial x} = 0<br>$$<br>设 $G$ 为 $x$ - $t$ 平面有界域，由 Green 公式：<br>$$<br>\iint_G \left(\frac{\partial u}{\partial t} + \frac{\partial f(u)}{\partial x}\right)dxdt = \int_{\Gamma} (f dt - u dx)<br>$$</p><p>结合边界积分关系，得<br>$$<br>\int_{\Gamma} (f dt - u dx) = 0<br>$$<br>体现积分守恒特性，是有限体积法离散的理论基础</p><h3 id="一、Lax-Friedrichs-格式">一、Lax - Friedrichs 格式</h3><p><strong>推导</strong>：通过对积分守恒形式（在区域 $G = ABCD$ 上积分  $\displaystyle \int_{\Gamma} fdt - udx = 0$ ）做数值积分近似，得到格式：<br>$$<br>\frac{u_j^{n + 1}-\frac{u_{j + 1}^n + u_{j - 1}^n}{2}}{\tau}+\frac{f_{j + 1}^n - f_{j - 1}^n}{2h}=0<br>$$<br>截断误差 $O(\tau + h^2)$</p><p><strong>特殊情形（$f=au$ 时）</strong>：格式为<br>$$<br>\frac{u_j^{n + 1}-\frac{u_{j + 1}^n + u_{j - 1}^n}{2}}{\tau}+a\frac{u_{j + 1}^n - u_{j - 1}^n}{2h}=0<br>$$<br>变形得<br>$$<br>u_j^{n + 1}=\frac{1}{2}(1 - r)u_{j + 1}^n+\frac{1}{2}(1 + r)u_{j - 1}^n<br>$$<br><strong>增长因子与稳定性</strong>：</p><p>增长因子<br>$$<br>\lambda=\frac{1}{2}(1 - r)e^{i\lambda h}+\frac{1}{2}(1 + r)e^{-i\lambda h}<br>$$<br>模长平方<br>$$<br>|\lambda|^2 = 1+\frac{r^2}{2}(\cos\lambda h - 1)<br>$$<br>由 $|\lambda|$ 一致有界得 $|r|\leq1$（即 $\displaystyle \left|\frac{a\tau}{h}\right|\leq1$ ）时稳定</p><h3 id="二、盒式格式（Box-scheme）">二、盒式格式（Box scheme）</h3><p><strong>形式</strong>：在区域 $G = ABCD$ 上，格式为<br>$$<br>\frac{u_j^{n + 1}-u_j^n}{\tau}+\frac{u_{j + 1}^{n + 1}-u_{j - 1}^{n + 1}}{2h}+\frac{f_j^n - f_{j - 1}^n}{h}+\frac{f_{j + 1}^{n + 1}-f_j^{n + 1}}{h}=0<br>$$<br><strong>截断误差</strong>：$O(\tau^2 + h^2)$</p><p><strong>特殊情形（$f=au$ 时）</strong>：化简得<br>$$<br>(1 + r)au_j^{n + 1}+(1 - r)au_{j + 1}^{n + 1}=(1 - r)au_j^n+(1 + r)au_{j - 1}^n<br>$$<br>显式实现时，$a&gt;0$ 给左边值，$a&lt;0$ 给右边值</p><p>增长因子 $\lambda$ 满足<br>$$<br>\lambda =\frac{(1-r)+(1+r)\cos{\alpha h}-i(1+r)\sin{\alpha h}}{(1+r)+(1-r)\cos{\alpha h}-i(1-r)\sin{\alpha h}}<br>$$<br>$|\lambda|=1$，故盒式格式<strong>恒稳定</strong></p><h3 id="三、粘性差分格式（迎风格式改写）">三、粘性差分格式（迎风格式改写）</h3><p>对迎风格式<br>$$<br>\frac{u_j^{n+1}-u_j^n}{\tau}+a_j\frac{u_j^n - u_{j - 1}^n}{h}=0 \quad (a_j\geq0)<br>$$<br>改写、变形，可等价为带小参数的抛物方程中心差分格式：<br>$$<br>u_t + a(x)u_x = a(x)\cdot\frac{h}{2}\cdot u_{xx}<br>$$<br>构造方式含<strong>自然粘性项</strong>与<strong>人工粘性项</strong>，通过引入小参数正则化，改善格式稳定性精度</p><h3 id="四、Lax-Wendroff-格式">四、Lax - Wendroff 格式</h3><p>从守恒律方程<br>$$<br>\frac{\partial u}{\partial t}+\frac{\partial f(u)}{\partial x}=0<br>$$<br>出发，对$u$做 Tayler 展开并消去余项，用中心差商代换导数，得到格式：<br>$$<br>u_j^{n+1}=u_j^n+(-\tau)\frac{f_{j + 1}^n - f_{j - 1}^n}{2h}+\frac{\tau^2}{2}\cdot\frac{a_{j + \frac{1}{2}}^n (f_{j + 1}^n-f_j^n) -   a_{j - \frac{1}{2}}^n (f_j^n-f_{j - 1}^n)}{h^2}<br>$$<br>其中<br>$$<br>a_{j+\frac{1}{2}}^n = f^\prime(\frac{u_{j}^n+u_{j+1}^n}{2})<br>$$<br>本质是<strong>带粘性项方程的中心差分格式</strong>，利用泰勒展开和差商构造，实现二阶精度离散<br>$$<br>\frac{\partial u}{\partial t}+\frac{\partial f}{\partial x}=\frac{\tau}{2}\cdot \frac{\partial}{\partial x}(f^{\prime}(u)\frac{\partial f}{\partial x})<br>$$<br><strong>特殊情形（$f = au$ 时）</strong></p><p>方程：<br>$$<br>\frac{\partial u}{\partial t}+a\frac{\partial u}{\partial x}=\frac{\tau}{2}\cdot a^2\frac{\partial^2 u}{\partial x^2}<br>$$<br>截断误差 $O(\tau^2 + h^2)$</p><p>差分格式：<br>$$<br>u_j^{n+1}=\frac{1}{2}r(r - 1)u_{j + 1}^n+(1 - r^2)u_j^n+\frac{1}{2}r(r + 1)u_{j - 1}^n<br>$$<br>增长因子：<br>$$<br>G = 1 + r^2(\cos\lambda h - 1)-ir\sin\lambda h<br>$$<br><strong>稳定性条件</strong>：$|r|\leq1$</p><h3 id="五、隐式中心格式">五、隐式中心格式</h3><p>格式：<br>$$<br>\frac{u_j^{n+1}-u_j^n}{\tau}+a\frac{u_{j + 1}^{n+1}-u_{j - 1}^{n+1}}{2h}=0<br>$$<br><strong>性质</strong>：恒稳定</p><h3 id="六、跳蛙格式（Leap-frog）">六、跳蛙格式（Leap - frog）</h3><p>格式：<br>$$<br>\frac{u_j^{n+1}-u_j^{n-1}}{2\tau}+a\frac{u_{j + 1}^n - u_{j - 1}^n}{2h}=0<br>$$<br><strong>稳定性条件</strong>：$|r|\leq1$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第四章（1）</title>
      <link href="/2025/06/02/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A39/"/>
      <url>/2025/06/02/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A39/</url>
      
        <content type="html"><![CDATA[<h1>双曲方程的有限差分法</h1><p><strong>一阶双曲方程 $u_t+au_x=0$</strong></p><p><strong>特征方程与特征线</strong>：特征方程为 $\frac{dx}{dt}=a$ ，其特征线为 $x = at + C$ 。沿特征线 $x(t)=at + C$ ，对 $u(x(t),t)$ 求关于 $t$ 的全导数，由链式法则 $\frac{du}{dt}=u_x\cdot a + u_t = 0$ ，这表明 $u$ 沿着特征线的值是常数 。若已知初始条件 $u(x,0)=u_0(x)$ ，那么在特征线 $x = at + x_0$ 上，$u(x,t)=u(x - at,0)=u_0(x - at)$</p><p><strong>二阶双曲方程 $u_{tt}-a^2u_{xx}=0$（波动方程 ）</strong></p><p><strong>特征方程与特征线</strong>：特征方程为 $\displaystyle (\frac{dx}{dt})^2 = a^2$ ，即 $\displaystyle \frac{dx}{dt}=\pm a$ ，特征线为 $x = at + C_1$ 和 $x=-at + C_2$ 。</p><p><strong>变量变换与化简</strong>：令 $\xi = x - at$ ，$\eta = x + at$ ，对 $u$ 进行变量替换 $u(x,t)=\tilde{u}(\xi,\eta)=\tilde{u}(x - at,x + at)$ 。根据链式法则求偏导数<br>$$<br>\begin{align}<br>\frac{\partial u}{\partial t} &amp;=-a\frac{\partial\tilde{u}}{\partial\xi}+a\frac{\partial\tilde{u}}{\partial\eta} \quad\quad<br>\frac{\partial^2 u}{\partial t^2} =a^2(\frac{\partial^2\tilde{u}}{\partial\xi^2}-2\frac{\partial^2\tilde{u}}{\partial\xi\partial\eta}+\frac{\partial^2\tilde{u}}{\partial\eta^2})\<br>\frac{\partial u}{\partial x} &amp;=\frac{\partial\tilde{u}}{\partial\xi}+\frac{\partial\tilde{u}}{\partial\eta}\quad \quad \quad\quad\frac{\partial^2 u}{\partial x^2}=\frac{\partial^2\tilde{u}}{\partial\xi^2}+2\frac{\partial^2\tilde{u}}{\partial\xi\partial\eta}+\frac{\partial^2\tilde{u}}{\partial\eta^2}</p><p>\end{align}<br>$$<br>代入原方程<br>$$<br>\frac{\partial^2 u}{\partial t^2}=a^2\frac{\partial^2 u}{\partial x^2}<br>$$<br>化简可得 $\displaystyle \frac{\partial^2\tilde{u}}{\partial\xi\partial\eta}=0$</p><p><strong>求解方程</strong>：对 $\displaystyle \frac{\partial^2\tilde{u}}{\partial\xi\partial\eta}=0$ 关于 $\xi$ 积分得 $\displaystyle \frac{\partial\tilde{u}}{\partial\xi}=\overline{f}_1(\xi)$ ，再关于 $\xi$ 积分得<br>$$<br>\begin{align}<br>\tilde{u} &amp;=\int\overline{f}<em>1(\xi)d\xi + f_2(\eta)\<br>&amp;=f_1(\xi)+f_2(\eta)<br>\end{align}<br>$$<br>即<br>$$<br>u(x,t)=f_1(x - at)+f_2(x + at)<br>$$<br>结合初始条件 $u(x,0)=\varphi(x)$ 和 $u_t(x,0)=\psi(x)$ ，通过求导和积分运算确定<br>$$<br>\begin{align}<br>f_1(x)=\frac{1}{2}\varphi(x)-\frac{1}{2a}\int_0^x\psi(s)ds\<br>f_2(x)=\frac{1}{2}\varphi(x)+\frac{1}{2a}\int_0^x\psi(s)ds<br>\end{align}<br>$$<br>最终得到 <strong>d′Alembert公式</strong><br>$$<br>u(x,t)=\frac{1}{2}[\varphi(x - at)+\varphi(x + at)]+\frac{1}{2a}\int</em>{x - at}^{x + at}\psi(s)ds<br>$$<br><strong>d′Alembert 公式的依赖域、影响域、决定域</strong></p><p><strong>依赖域</strong>：点 $(x_0,t_0)$ 的依赖域是初始线 $t = 0$ 上由特征线 $x = x_0 - at_0$ 和 $x = x_0 + at_0$ 所界定的区间 $[x_0 - at_0,x_0 + at_0]$ ，解在该点的值仅依赖于初始条件在这个区间的部分</p><p><strong>影响域</strong>：初始点 $(x_0,0)$ 的影响域是由特征线 $x = x_0 + at$ 和 $x = x_0 - at$ 所界定的区域，初始条件在该点的扰动会影响这个区域内解的值</p><p><strong>决定域</strong>：初始区间 $[x_1,x_2]$ 的决定域是由特征线 $x = x_1 + at$ 、$x = x_2 - at$ 所围的区域，解在这个区域内的值由初始区间 $[x_1,x_2]$ 上的初始条件决定</p><h2 id="二阶波动方程显式差分格式">二阶波动方程显式差分格式</h2><p>对于波动方程 $u_{tt}=a^2u_{xx}$ ，初值条件 $u(x,0)=\varphi(x)$ ，$u_t(x,0)=\psi(x)$ ，空间步长 $h$ ，时间步长 $\tau$ ，网格点 $x_j = jh$ ，$t_n = n\tau$</p><p>显式差分格式为<br>$$<br>\frac{u_j^{n + 1}-2u_j^n + u_j^{n - 1}}{\tau^2}=a^2\frac{u_{j + 1}^n - 2u_j^n + u_{j - 1}^n}{h^2}<br>$$<br>截断误差为 $O(\tau^2 + h^2)$ ，令 $\displaystyle r=\frac{a\tau}{h}$ （网格比 ），格式可整理为<br>$$<br>u_j^{n + 1}=r^2u_{j + 1}^n+(2 - 2r^2)u_j^n + r^2u_{j - 1}^n - u_j^{n - 1}<br>$$<br>初始条件为 $u_j^0=\varphi(x_j)$</p><p><strong>$u_j^1$ 的计算</strong></p><p><strong>一阶近似</strong>：由<br>$$<br>\frac{u_j^1 - u_j^0}{\tau}=\psi(x_j)+O(\tau)<br>$$<br>可得<br>$$<br>u_j^1 = u_j^0+\tau\psi(x_j)+O(\tau^2)<br>$$<br>这是利用一阶向前差分近似时间导数 $u_t$</p><p><strong>二阶近似</strong>：由<br>$$<br>\frac{u_j^1 - u_j^{-1}}{2\tau}=\psi(x_j)+O(\tau^2)<br>$$<br>结合波动方程的显式差分格式<br>$$<br>\frac{u_j^1 - 2u_j^0 + u_j^{-1}}{\tau^2}=a^2\frac{u_{j + 1}^0 - 2u_j^0 + u_{j - 1}^0}{h^2}<br>$$<br>消去 $u_j^{-1}$ 后得到<br>$$<br>u_j^1=\frac{r^2}{2}u_{j + 1}^0+(1 - r^2)u_j^0+\frac{r^2}{2}u_{j - 1}^0+\tau\psi(x_j)<br>$$</p><p>其中 $\displaystyle r = \frac{a\tau}{h}$ ，此为二阶精度的 $u_j^1$ 计算式，通过联立方程消元，利用差分格式的二阶精度要求推导得出</p><h2 id="显式格式的稳定性分析（变量替换法-）">显式格式的稳定性分析（变量替换法 ）</h2><p><strong>一阶导数替换</strong>：令 $\displaystyle v=\frac{\partial u}{\partial t}$ ，则波动方程 $u_{tt}=a^2u_{xx}$ 可转化为一阶方程组<br>$$<br>\begin{cases}\frac{\partial u}{\partial t}=v\\frac{\partial v}{\partial t}=a^2\frac{\partial^2 u}{\partial x^2}\end{cases}<br>$$<br>其矩阵形式为<br>$$<br>\frac{\partial}{\partial t}\begin{bmatrix}u\v\end{bmatrix}=\begin{bmatrix}0&amp;1\a^2\frac{\partial^2}{\partial x^2}&amp;0\end{bmatrix}\begin{bmatrix}u\v\end{bmatrix}<br>$$<br><strong>二阶导数替换（另一种形式 ）</strong>：令 $v=\frac{\partial u}{\partial t}$ ，$w = a\frac{\partial u}{\partial x}$ ，则方程组变为<br>$$<br>\begin{cases}\frac{\partial v}{\partial t}=a\frac{\partial w}{\partial x}\\frac{\partial w}{\partial t}=a\frac{\partial v}{\partial x}\end{cases}<br>$$<br>矩阵形式为<br>$$<br>\frac{\partial}{\partial t}\begin{bmatrix}v\w\end{bmatrix}=\begin{bmatrix}0&amp;a\frac{\partial}{\partial x}\a\frac{\partial}{\partial x}&amp;0\end{bmatrix}\begin{bmatrix}v\w\end{bmatrix}<br>$$<br>通过将波动方程的二阶显式差分格式<br>$$<br>\frac{u_j^{n + 1}-2u_j^n + u_j^{n - 1}}{\tau^2}=a^2\frac{u_{j + 1}^n - 2u_j^n + u_{j - 1}^n}{h^2}<br>$$<br>转化为关于时间一阶差分的形式，如<br>$$<br>\frac{\frac{u_j^{n + 1}-u_j^n}{\tau}-\frac{u_j^n - u_j^{n - 1}}{\tau}}{\tau}=a^2\frac{\frac{u_{j + 1}^n - u_j^n}{h}-\frac{u_j^n - u_{j - 1}^n}{h}}{h}<br>$$<br>令<br>$$<br>v_j^n=\frac{u_j^n - u_j^{n - 1}}{\tau} \quad \quad w_{j-\frac{1}{2}}^n=a\frac{u_j^n - u_{j - 1}^n}{h}<br>$$<br>将波动方程转化为一阶方程组<br>$$<br>\begin{cases}v_j^{n + 1}=r(w_{j+\frac{1}{2}}^n - w_{j-\frac{1}{2}}^n)+v_j^n\w_{j-\frac{1}{2}}^{n + 1}=r(v_j^{n + 1}-v_{j - 1}^{n + 1})+w_{j-\frac{1}{2}}^n\end{cases}<br>$$<br>其中 $\displaystyle r = \frac{a\tau}{h}$ ，这是基于对波动方程时间和空间导数的差分近似，把二阶方程转化为一阶方程组形式，便于分析稳定性</p><h3 id="Fourier-方法分析稳定性">Fourier 方法分析稳定性</h3><p>设周期边值条件下的通项解<br>$$<br>\begin{align}<br>v_j^n &amp;= V_1^n e^{i\lambda x_j}\<br>w_{j}^n &amp;= V_2^n e^{i\lambda x_{j}}<br>\end{align}<br>$$<br>$\displaystyle \lambda=\frac{2p\pi}{L}$ ，$p$ 为整数</p><p>将通项解代入差分方程组，经过化简得到关于 $V_1^{n + 1}$ 和 $V_2^{n + 1}$ 的递推关系<br>$$<br>\begin{cases}<br>\begin{align}<br>V_1^{n + 1}&amp;=icV_2^n + V_1^n\<br>V_2^{n + 1}&amp;=icV_1^{n + 1}+V_2^n\<br>&amp;=icV_1^{n }+(1-c^2)V_2^n<br>\end{align}<br>\end{cases}<br>$$<br>其中 $\displaystyle c = 2r\sin\frac{\lambda h}{2}$</p><p>写成矩阵向量形式<br>$$<br>\begin{bmatrix}v^{n + 1}\w^{n + 1}\end{bmatrix}=\begin{bmatrix}1&amp;ic\ic&amp;1 - c^2\end{bmatrix}\begin{bmatrix}v^n\w^n\end{bmatrix}=G\begin{bmatrix}v^n\w^n\end{bmatrix}<br>$$</p><p>其中 $\displaystyle  c = 2r\sin\frac{\lambda h}{2}$ ，$\displaystyle r=\frac{a\tau}{h}$</p><p>显式格式稳定等价于 ${G^n}$ 一致有界，当 $\displaystyle r=\frac{a\tau}{h}\leq1$ 时满足，此为 CFL（Courant - Friedrichs - Lewy）条件</p><p><strong>CFL 条件几何解释</strong>：数值解依赖域 $[x_j - n\tau,x_j + n\tau]$ 需包含精确解依赖域 $[x_j - a n\tau,x_j + a n\tau]$ 。若数值依赖域小于精确依赖域（如 $\overline{P’Q’}&gt;\overline{PQ}$ ），初始条件在 $\overline{P’Q’}\setminus\overline{PQ}$ 部分改变时，数值解不变但精确解改变，不符合实际。故需 $\overline{PQ}\geq\overline{P’Q’}$ ，推导出 $\displaystyle r=\frac{a\tau}{h}\leq1$ ，保证数值解能捕捉精确解的依赖关系</p><h2 id="隐式格式">隐式格式</h2><p><strong>格式形式</strong>：用 $n - 1,n,n + 1$ 层中心差分加权平均逼近 $u_{xx}$ ，格式为<br>$$<br>\frac{u_j^{n + 1}-2u_j^n + u_j^{n - 1}}{\tau^2}=\frac{a^2}{h^2}[\theta\delta_x^2u_j^{n + 1}+(1 - 2\theta)\delta_x^2u_j^n+\theta\delta_x^2u_j^{n - 1}] \quad (0\leq\theta\leq1)<br>$$<br>整理得<br>$$<br>u_j^{n + 1}-r^2\theta\delta_x^2u_j^{n + 1}=(2 + r^2(1 - 2\theta)\delta_x^2)u_j^n+(r^2\theta\delta_x^2 - 1)u_j^{n - 1}<br>$$<br>当 $\theta = 0$ 时退化为显式格式；$\theta&gt;0$ 为隐式格式</p><p><strong>计算 $\boldsymbol{\theta=\frac{1}{4}}$ 时隐式格式稳定性（Fourier 方法）</strong></p><p><strong>格式推导与变量替换</strong></p><p>针对波动方程隐式格式，当 $\theta=\frac{1}{4}$<br>$$<br>\frac{\displaystyle \frac{u_j^{n+1} - u_j^n}{\tau} - \frac{u_j^n - u_j^{n-1}}{\tau}}{\tau}  = a^2 \cdot \frac{1}{4} \cdot \left[<br>\frac{\displaystyle \frac{u_{j+1}^{n+1} - u_j^{n+1}}{h} - \frac{u_j^{n+1} - u_{j-1}^{n+1}}{h}}{h}  + \frac{1}{2} \cdot \frac{\displaystyle \frac{u_{j+1}^{n+1} - u_j^{n+1}}{h} - \frac{u_j^{n+1} - u_{j-1}^{n+1}}{h}}{h}  + \frac{1}{4} \cdot \frac{\displaystyle \frac{u_{j+1}^{n+1} - u_j^{n+1}}{h} - \frac{u_j^{n+1} - u_{j-1}^{n+1}}{h}}{h}<br>\right]<br>$$</p><p>$$<br>= a \cdot \frac{1}{2} \cdot \frac{<br>a \cdot \left( \frac{1}{2} \cdot \frac{u_{j+1}^{n+1} - u_j^{n+1}}{h} + \frac{1}{2} \cdot \frac{u_{j+1}^n - u_j^n}{h} \right)  - a \cdot \left( \frac{1}{2} \cdot \frac{u_j^{n+1} - u_{j-1}^{n+1}}{h} + \frac{1}{2} \cdot \frac{u_j^n - u_{j-1}^n}{h} \right)<br>}{h} \</p><ul><li>a \cdot \frac{1}{2} \cdot \frac{<br>a \cdot \left( \frac{1}{2} \cdot \frac{u_{j+1}^{n+1} - u_j^{n+1}}{h} + \frac{1}{2} \cdot \frac{u_{j+1}^n - u_j^n}{h} \right)  - a \cdot \left( \frac{1}{2} \cdot \frac{u_j^{n+1} - u_{j-1}^{n+1}}{h} + \frac{1}{2} \cdot \frac{u_j^n - u_{j-1}^n}{h} \right)<br>}{h}<br>$$</li></ul><p>令<br>$$<br>V_j^n=\frac{u_j^n - u_j^{n - 1}}{\tau}\quad \quad w_{j+\frac{1}{2}}^n=a(\frac{1}{2}\frac{u_{j + 1}^n - u_j^n}{h}+\frac{1}{2}\frac{u_{j + 1}^{n - 1}-u_j^{n - 1}}{h})<br>$$<br>则差分方程组化为<br>$$<br>\frac{V_j^{n + 1} - V_j^n}{\tau}<br>= a \left[<br>\frac{1}{2} \cdot \frac{W_{j + \frac{1}{2}}^{n + 1} - W_{j - \frac{1}{2}}^{n + 1}}{h}</p><ul><li>\frac{1}{2} \cdot \frac{W_{j + \frac{1}{2}}^n - W_{j - \frac{1}{2}}^n}{h}<br>\right]<br>$$</li></ul><p>$$<br>\frac{W_{j - \frac{1}{2}}^{n + 1} - W_{j - \frac{1}{2}}^n}{\tau}<br>= a \left[<br>\frac{1}{2} \cdot \frac{V_j^{n + 1} - V_{j - 1}^{n + 1}}{h}</p><ul><li>\frac{1}{2} \cdot \frac{V_j^n - V_{j - 1}^n}{h}<br>\right]<br>$$</li></ul><h3 id="Fourier-方法分析">Fourier 方法分析</h3><p>设周期解形式<br>$$<br>V_j^n = v^n e^{i\lambda x_j}\quad w_{j}^n = w^n e^{i\lambda x_{j}}<br>$$<br>代入差分方程组，化简得到增长矩阵<br>$$<br>G_n=\frac{1}{1 + \frac{c^2}{4}}\begin{bmatrix}1 - \frac{c^2}{4}&amp;ic\ic&amp;1 - \frac{c^2}{4}\end{bmatrix}<br>$$<br>其中 $\displaystyle c = 2r\sin\frac{\lambda h}{2}$ ，$\displaystyle r=\frac{a\tau}{h}$</p><p>计算增长矩阵的特征值，可得 $G^HG=1$ ，且矩阵的 $L^2$ 范数 $|G_n|_2 = 1$ 。根据稳定性判定，增长矩阵的幂次 $G_n^n$ 一致有界，故当 $\theta=\frac{1}{4}$ 时，该隐式差分格式恒稳定</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第三章（3）</title>
      <link href="/2025/06/02/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A38/"/>
      <url>/2025/06/02/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A38/</url>
      
        <content type="html"><![CDATA[<h1>Fourier 方法分析差分格式稳定性</h1><h2 id="问题设定与格式回顾">问题设定与格式回顾</h2><p>考虑抛物方程<br>$$<br>\begin{cases}Lu = u_t - au_{xx}=f(x)\u(x,0)=\varphi(x)\u(0,t)=u(l,t)=0\end{cases}<br>$$<br>以向前差分格式<br>$$<br>u_j^{n + 1}=ru_{j - 1}^n+(1 - 2r)u_j^n+ru_{j + 1}^n+\tau f_j<br>$$<br>为例</p><p>设精确解为 $u_j^n$ ，近似解为 $v_j^n$ ，误差 $e_j^n = u_j^n - v_j^n$ ，误差满足<br>$$<br>e_j^{n + 1}=re_{j - 1}^n+(1 - 2r)e_j^n+re_{j + 1}^n<br>$$<br><strong>分离变量法求解原方程</strong></p><p>对于不含源项的初边值问题<br>$$<br>\begin{cases}u_t = au_{xx}\u(x,0)=\varphi(x)\u(0,t)=u(l,t)=0\end{cases}<br>$$<br>使用分离变量法设<br>$$<br>u(x,t)=X(x)T(t)<br>$$<br>代入方程可得<br>$$<br>\frac{T’(t)}{aT(t)}=\frac{X’'(x)}{X(x)}=-\lambda<br>$$<br>$\lambda$ 为分离常数</p><p>求解 $X(x)$ ：结合边界条件 $X(0)=X(l)=0$ ，可得<br>$$<br>X_k(x)=b_k\sin\frac{k\pi}{l}x,\quad k = 1,2,\cdots<br>$$<br>求解 $T(t)$ ：<br>$$<br>T_k(t)=a_ke^{-(\frac{k\pi}{l})^2at}<br>$$<br>则原方程解<br>$$<br>\begin{align}<br>u(x,t)&amp;=\sum_{k = 1}^{\infty}a_kb_k e^{-(\frac{k\pi}{l})^2at}\sin(\frac{k\pi}{l})x\<br>&amp;=\sum_{k = 1}^{\infty}c_ke^{-(\frac{k\pi}{l})^2at}e^{i\frac{k\pi}{l}x}<br>\end{align}<br>$$</p><p>其中 $c_k$ 由初始条件确定<br>$$<br>\varphi(x)=\sum_{k = 1}^{\infty}c_ke^{i\frac{k\pi}{l}x}<br>$$<br>已知<br>$$<br>\begin{align}<br>u(x,t_{n + 1})&amp;=\sum c_ke^{-a(\frac{k\pi}{l})^2(t_n+\tau)}e^{i\frac{k\pi}{l}x}\<br>u(x,t_n)&amp;=\sum c_ke^{-a(\frac{k\pi}{l})^2t_n}e^{i\frac{k\pi}{l}x}<br>\end{align}<br>$$<br>对应级数每一项的 “振幅” 和增长因子为<br>$$<br>e^{\displaystyle -a(\frac{k\pi}{l})^2\tau}<br>$$</p><h2 id="将差分格式解表示为-Fourier-级数">将差分格式解表示为 Fourier 级数</h2><p>把 $u_j^n$ 看成是区间上的分片常数函数 $u^n(x)$ ，即<br>$$<br>u^n(x)=u_j^n \quad (x_{j - \frac{1}{2}}&lt;x&lt;x_{j + \frac{1}{2}})<br>$$<br>且<br>$$<br>u^n(x)=\sum_{k = -\infty}^{+\infty}v_k^ne^{i\frac{k\pi}{l}x}\quad (Fourier)<br>$$</p><p>$$<br>u^{n + 1}(x)=\sum_{k = -\infty}^{+\infty}v_k^{n + 1}e^{i\frac{k\pi}{l}x}<br>$$</p><p>由向前差分格式<br>$$<br>u^{n + 1}(x)=ru^n(x - h)+(1 - 2r)u^n(x)+ru^n(x + h)<br>$$<br>将 Fourier 级数代入可得：<br>$$<br>\begin{align}<br>\sum_{k = -\infty}^{+\infty}v_k^{n + 1}e^{i\frac{k\pi}{l}x}=&amp;r\sum_{k = -\infty}^{+\infty}v_k^ne^{i\frac{k\pi}{l}(x - h)}\</p><p>&amp;+(1 - 2r)\sum_{k = -\infty}^{+\infty}v_k^ne^{i\frac{k\pi}{l}x}\</p><p>&amp;+r\sum_{k = -\infty}^{+\infty}v_k^ne^{i\frac{k\pi}{l}(x + h)}<br>\end{align}<br>$$<br>整理得到<br>$$<br>\begin{align}<br>v_k^{n + 1}&amp;=v_k^n(r e^{-i\frac{k\pi}{l}h}+(1 - 2r)+r e^{i\frac{k\pi}{l}h}) \<br>&amp;= G(\lambda h)v_k^n<br>\end{align}<br>$$<br>其中 $\displaystyle \lambda=\frac{k\pi}{l}$ ，$G(\lambda h)$ 为增长因子 。进而有<br>$$<br>v_k^n = G^n(\lambda h)v_k^0<br>$$</p><h2 id="推导增长因子并分析稳定性">推导增长因子并分析稳定性</h2><p>计算增长因子<br>$$<br>\begin{align}<br>G(\lambda h) &amp;=1 - 2r + 2r\cos\frac{k\pi}{l}x \<br>&amp;=1 - 4r\sin^2\frac{\lambda h}{2}<br>\end{align}<br>$$<br>进一步近似<br>$$<br>\begin{align}<br>G(\lambda h)&amp;\approx1 - 4r(\frac{\lambda\pi}{2l}\cdot h)^2 \<br>&amp;=1 - a\tau(\frac{\lambda\pi}{h})^2\<br>&amp;\approx e^{\displaystyle-a\tau(\frac{\lambda\pi}{h})^2}<br>\end{align}<br>$$<br>对一般的抛物方程差分格式，增长因子 $G$ 还可能与 $\tau$ 有关，记为 $G(\alpha h,\tau)$</p><p><strong>例如 带低阶项抛物方程差分格式</strong></p><p>对于带低阶项的抛物方程<br>$$<br>u_t = au_{xx}+bu<br>$$<br>其差分格式为<br>$$<br>\frac{u_j^{n + 1}-u_j^n}{\tau}=a\cdot\frac{1}{h^2}\cdot\delta_x^2u_j^n + bu_j^n<br>$$<br>其中 $\delta_x^2$ 是二阶中心差分算子</p><p>推导出增长因子<br>$$<br>G = 1 - 4r\sin^2\frac{\lambda h}{2}+b\tau<br>$$</p><p>这里 $\displaystyle r=\frac{a\tau}{h^2}$ 。通过分析 $|G|\leq1$ 的条件来确定格式的稳定性，例如当 $b$ 和 $r$ 满足一定关系时，可保证增长因子的模不大于 1，从而使格式稳定</p><h3 id="一般二层差分格式稳定性判定">一般二层差分格式稳定性判定</h3><p>对于线性常系数一维抛物方程（且 $f = 0$ ）的二层差分格式<br>$$<br>\sum_{m\in N}a_mu_{j + m}^{n + 1}=\sum_{m\in N_0}b_mu_{j + m}^n \quad (j = 0,1,\cdots)<br>$$<br>格式稳定的充要条件是存在 $\tau_0$ 和 $k$ ，使得当 $0 &lt; n\leq\frac{T}{\tau}$ ，$0 &lt; \tau\leq\tau_0$ 时<br>$$<br>|U^n|\leq k|U^0|<br>$$<br>这等价于在 $L^2$ 范数下<br>$$<br>|u^n(x)|<em>{L^2}^2\leq k^2|u^0(x)|</em>{L^2}^2<br>$$<br>将 $u^n(x)$ 用 Fourier 级数表示为<br>$$<br>u^n(x)=\sum_{k = -\infty}^{+\infty}v_k^ne^{i\frac{k\pi}{l}x}<br>$$<br>进而<br>$$<br>k_l\sum_{k = -\infty}^{+\infty}|v_k^n|^2\leq k^2k_l \sum_{k=-\infty}^{+\infty}|v_k^0|^2<br>$$</p><p>$$<br>\sum_{k = -\infty}^{+\infty}|G^n(\alpha h,\tau)v_k^0|^2\leq k^2 \sum_{k=-\infty}^{+\infty}|v_k^0|^2<br>$$</p><p>取特殊的 $v_k^0$ （只有一个 $v_k^0 = 1$ ，其他为 0 ），可得到稳定性等价于<br>$$<br>|G^n(\lambda h,\tau)|\leq k<br>$$<br>即增长因子的幂次一致有界 。反之，若 $G^n(\lambda h,\tau)$ 一致有界，也能推出<br>$$<br>|u^n(x)|<em>{L^2}^2\leq k^2|u^0(x)|</em>{L^2}^2<br>$$<br>从而确定差分格式稳定</p><p><strong>命题3.1</strong></p><p>差分格式稳定等价于 $G^n(\lambda h,\tau)$ 一致有界，也等价于<br>$$<br>|G(\lambda h,\tau)|\leq1 + M\tau<br>$$<br>称为 Von Neumann 条件</p><h2 id="增长因子的计算与稳定性判定">增长因子的计算与稳定性判定</h2><p>将<br>$$<br>u_j^n = v^n e^{i\lambda jh}<br>$$<br>代入向前差分格式<br>$$<br>u_j^{n + 1}=ru_{j - 1}^n+(1 - 2r)u_j^n+ru_{j + 1}^n<br>$$<br>经过推导可得增长因子<br>$$<br>\begin{align}<br>G(\lambda h) &amp;=1 - 2r + 2r\cos\lambda h \<br>&amp;= 1 - 4r\sin^2\frac{\lambda h}{2}<br>\end{align}<br>$$<br>当 $G(\lambda h)$ 满足 Von Neumann 条件，即 $|G(\lambda h)|\leq1$ 时，可推出 $r\leq\frac{1}{2}$</p><p>所以当 $r\leq\frac{1}{2}$ 时，向前差分格式稳定</p><h3 id="多层差分格式增长因子的计算">多层差分格式增长因子的计算</h3><p><strong>二层差分格式</strong>：一般二层差分格式，同样用 $u_j^n = v^n e^{i\lambda jh}$ 代入格式，通过化简计算得到增长因子 $G$ ，进而根据 Von Neumann 条件判断稳定性</p><p><strong>三层差分格式（以 Richardson 格式为例 ）</strong>：Richardson 格式<br>$$<br>u_j^{n + 1}=2r(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+u_j^{n - 1}<br>$$<br>令<br>$$<br>w_j^{n + 1}=u_j^n<br>$$<br>改写成方程组<br>$$<br>\begin{cases}u_j^{n + 1}=2r(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+w_j^n\w_j^{n + 1}=u_j^n\end{cases}<br>$$<br>设<br>$$<br>\begin{align}<br>u_j^n &amp;= v_1^n e^{i\lambda jh}\<br>w_j^n &amp;= v_2^n e^{i\lambda jh}<br>\end{align}<br>$$<br>代入方程组</p><p>化简得到<br>$$<br>\begin{cases}v_1^{n + 1}=4r(\cos\lambda h - 1)v_1^n + v_2^n\v_2^{n + 1}=v_1^n\end{cases}<br>$$<br>写成矩阵形式<br>$$<br>\begin{bmatrix}v_1^{n + 1}\v_2^{n + 1}\end{bmatrix}=\begin{bmatrix}4r(\cos\lambda h - 1)&amp;1\1&amp;0\end{bmatrix}\begin{bmatrix}v_1^n\v_2^n\end{bmatrix}<br>$$<br>此时增长矩阵<br>$$<br>G(\lambda h)=\begin{bmatrix}4r(\cos\lambda h - 1)&amp;1\1&amp;0\end{bmatrix}<br>$$<br>通过求该矩阵的特征值来分析稳定性，其特征方程<br>$$<br>\lambda^2 - 4r(\cos\lambda h - 1)\lambda - 1 = 0<br>$$<br>特征值会使谱半径大于 $1 + O(\tau)$ ，不满足 Von Neumann 条件，所以 Richardson 格式不稳定</p><h3 id="一般的-s-1-层差分格式稳定性分析">一般的 s + 1 层差分格式稳定性分析</h3><p>对于一般的 $s + 1$ 层差分格式，其稳定性分析将归结于考虑如下差分方程组<br>$$<br>\sum_{m\in N_1}A_m\overline{U}<em>{j + m}^{n + 1}=\sum</em>{m\in N_0}B_m\overline{U}_{j + m}^n<br>$$<br>设<br>$$<br>\overline{U}^n = V^n e^{i\lambda jh}<br>$$<br>代入消去 $e^{i\lambda jh}$ ，得到 $s$ 阶矩阵 $G(\lambda h,\tau)$</p><p><strong>命题 3.2</strong>：差分格式稳定等价于<br>$$<br>{G^n(\lambda h,\tau):0 &lt; n\leq\frac{T}{\tau},0 &lt; \tau\leq\tau_0}<br>$$<br>一致有界，这是从稳定性定义出发，强调增长矩阵的幂次在一定时间步长和步长范围内不会使误差无限增长</p><p><strong>命题 3.3</strong>：${G^n(\lambda h,\tau)}$ 一致有界可推出 $\rho(G)\leq1 + O(\tau)$ （Von Neumann 条件 ）。当 $G(\lambda h,\tau)$ 是正规矩阵时，两者等价</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第三章（2）</title>
      <link href="/2025/05/27/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A37/"/>
      <url>/2025/05/27/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A37/</url>
      
        <content type="html"><![CDATA[<h1>稳定性与收敛性</h1><p><strong>ODE - IVP 的稳定性回顾</strong></p><p><strong>Euler 法</strong>：误差 $e_n$ 满足 $\displaystyle |e_n|\leq|e_{n - 1}|+L\tau|e_{n - 1}|=(1 + L\tau)|e_{n - 1}|$ ，递推可得<br>$$<br>|e_n|\leq(1 + L\tau)^n|e_0|\leq e^{LT}|e_0|<br>$$<br>这里 $L$ 是 Lipschitz 常数，$\tau$ 是步长，$T$ 是总时间，说明在一定条件下 Euler 法的误差可控</p><p><strong>多步法</strong>：设 $\displaystyle E_n=(e_{n + k - 1},\cdots,e_n)^T$ ，则 $E_{n + 1}=CE_n + B_n$ ，要求 ${C^n}$ 一致有界，这样多步法的误差增长才能得到控制，保证方法的稳定性</p><p><strong>椭圆方程 BVP 差分法稳定性回顾</strong></p><p>对于椭圆方程边值问题<br>$$<br>\begin{cases}L_hv_i = f_i\v_0 = v_N = 0\end{cases}<br>$$<br>若满足 $|v_h|\leq M|f_h|_R$ ，则称该差分法按右端稳定，即解的范数能被右端项范数控制，保证了方法在求解椭圆方程时的稳定性</p><p><strong>抛物方程初边值问题的稳定性类型</strong></p><p><strong>按初值稳定</strong>：关注初始条件误差对解的影响，若初始条件有小扰动，解不会产生过大偏差，则格式按初值稳定</p><p><strong>按边值稳定</strong>：考虑边界条件误差对解的作用，当边界条件存在误差时，解仍能保持在合理范围，格式按边值稳定</p><h2 id="抛物方程差分格式的统一形式">抛物方程差分格式的统一形式</h2><h3 id="向前差分格式">向前差分格式</h3><p>$$<br>u_j^{n + 1}=ru_{j - 1}^n+(1 - 2r)u_j^n+ru_{j + 1}^n+\tau f_j<br>$$</p><p>可写成矩阵形式<br>$$<br>\begin{align}<br>U^{n + 1} &amp;=\begin{bmatrix}1 - 2r&amp;r&amp; &amp; \r&amp;1 - 2r&amp;r&amp; \&amp; \ddots&amp;\ddots&amp;\ddots \&amp; &amp;r&amp;1 - 2r\end{bmatrix}U^n+\tau F\<br>&amp;=BU^n+\tau F<br>\end{align}<br>$$<br>其中 $B=(1 - 2r)I + rS$ ，$S$ 是特定的 $(J - 1)\times(J - 1)$ 矩阵</p><h3 id="向后差分格式">向后差分格式</h3><p>$$<br>-ru_{j - 1}^{n + 1}+(1 + 2r)u_j^{n + 1}-ru_{j + 1}^{n + 1}=u_j^n+\tau f_j<br>$$</p><p>写成矩阵形式为<br>$$<br>\begin{bmatrix}1 + 2r&amp;-r&amp; &amp; \-r&amp;1 + 2r&amp;-r&amp; \&amp; \ddots&amp;\ddots&amp;\ddots \&amp; &amp;-r&amp;1 + 2r\end{bmatrix}U^{n + 1}=U^n+\tau F<br>$$<br>即<br>$$<br>AU^{n + 1}=U^n+\tau F<br>$$</p><h3 id="Crank-Nicolson-格式">Crank - Nicolson 格式</h3><p>$$<br>-\frac{r}{2}u_{j - 1}^{n + 1}+(1 + r)u_j^{n + 1}-\frac{r}{2}u_{j + 1}^{n + 1}=\frac{r}{2}u_{j - 1}^n+(1 - r)u_j^n+\frac{r}{2}u_{j + 1}^n+\tau f_j<br>$$</p><p>矩阵形式为<br>$$<br>\begin{bmatrix}1 + r&amp;-\frac{r}{2}&amp; &amp; \-\frac{r}{2}&amp;1 + r&amp;-\frac{r}{2}&amp; \&amp; \ddots&amp;\ddots&amp;\ddots \&amp; &amp;-\frac{r}{2}&amp;1 + r\end{bmatrix}U^{n + 1}=\begin{bmatrix}1 - r&amp;\frac{r}{2}&amp; &amp; \\frac{r}{2}&amp;1 - r&amp;\frac{r}{2}&amp; \&amp; \ddots&amp;\ddots&amp;\ddots \&amp; &amp;\frac{r}{2}&amp;1 - r\end{bmatrix}U^n+\tau F<br>$$<br>即<br>$$<br>AU^{n + 1}=BU^n+\tau F<br>$$</p><h3 id="Richardson-格式">Richardson 格式</h3><p>$$<br>u_j^{n + 1}=2r(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+u_j^{n - 1}+2\tau f_j<br>$$</p><p>令 $W^n=(U^{n + 1},U^n)^T$ ，写成矩阵形式为<br>$$<br>\begin{bmatrix}U^{n + 1}\U^n\end{bmatrix}=\begin{bmatrix}D&amp;I\ I&amp;0\end{bmatrix}\begin{bmatrix}U^n\U^{n - 1}\end{bmatrix}+2\tau\begin{bmatrix}F\0\end{bmatrix}<br>$$<br>即<br>$$<br>W^{n + 1}=CW^n+\tau\begin{bmatrix}2F\0\end{bmatrix}<br>$$</p><h3 id="统一形式">统一形式</h3><p>抛物方程差分格式统一为<br>$$<br>AU^{n + 1}=BU^n+\tau F<br>$$<br>变形得到<br>$$<br>\begin{align}<br>U^{n + 1} &amp;=A^{-1}BU^n+\tau A^{-1}F \<br>&amp;= CU^n+\tau A^{-1}F<br>\end{align}<br>$$<br>其中 $C = A^{-1}B$ 为增长矩阵，其与空间步长 $h$ 和时间步长 $\tau$ 有关 。增长矩阵在稳定性分析中起关键作用，它刻画了每一步数值解的变化情况</p><h2 id="按初值稳定性定义推导">按初值稳定性定义推导</h2><p>为研究按初值稳定性，设 $F = 0$ （消除非齐次项影响，专注初始值对解的影响 ）。假设有两组解 $U^n$ 和 $V^n$ ，分别满足<br>$$<br>\begin{align}<br>U^{n + 1} &amp;=CU^n+\tau A^{-1}F\<br>V^{n + 1} &amp;=CV^n+\tau A^{-1}F<br>\end{align}<br>$$<br>令 $E^n = U^n - V^n$ ，则<br>$$<br>E^{n + 1}=CE^n<br>$$<br>当 $F = 0$ 时<br>$$<br>U^{n + 1}=CU^n<br>$$<br>递推可得<br>$$<br>U^{n + 1}=C^{n + 1}U^0<br>$$<br>若存在 $\tau_0&gt;0$ 以及与 $h$、$\tau$ 无关的常数 $k&gt;0$ ，使得当 $0 &lt; \tau\leq\tau_0$ 时，对于任意初始向量 $U^0\in\mathbb{R}^{J - 1}$ （$J$ 为空间节点数 ），在 $0 &lt; n\tau\leq T$ （$T$ 为总时间 ）的范围内，都有<br>$$<br>|U^{n + 1}|=|C^{n + 1}U^0|\leq k|U^0|<br>$$<br>就称该差分格式按初值稳定 。这等价于存在 $\tau_0&gt;0$ 和 $k&gt;0$ ，使得对于 $0 &lt; n\tau\leq T$ 且 $0 &lt; \tau\leq\tau_0$ ，有<br>$$<br>|C^n|\leq k<br>$$<br>这里<br>$$<br>|C^n|=\sup_{|v| = 1}|C^nv|<br>$$<br>直观来说，就是初始值的误差在计算过程中不会无限制放大，保证了数值解的稳定性</p><h2 id="按右端稳定性定义推导">按右端稳定性定义推导</h2><p>对于差分格式 $U^{n + 1}=CU^n+\tau A^{-1}F$ ，为研究按右端稳定性，可设 $U^0 = 0$ （消除初始值影响，专注右端项 $F$ 对解的作用 ）。假设有两组解 $U^n$ 和 $V^n$ ，分别满足<br>$$<br>\begin{align}<br>U^{n + 1} &amp;=CU^n+\tau A^{-1}F_1\<br>V^{n + 1} &amp;=CV^n+\tau A^{-1}F_2<br>\end{align}<br>$$<br>令<br>$$<br>E^n = U^n - V^n<br>$$<br>则<br>$$<br>E^{n + 1}=CE^n+\tau A^{-1}(F_1 - F_2)<br>$$<br>且 $E^0 = 0$ ，所以可专注于 $U^n$ 受 $F$ 影响的情况</p><p>若存在 $\tau_0&gt;0$ 以及与 $h$、$\tau$ 无关的常数 $k&gt;0$ ，使得当 $0 &lt; \tau\leq\tau_0$ 时，对于任意右端项向量 $F\in\mathbb{R}^{J - 1}$ （$J$ 为空间节点数 ），在 $0 &lt; n\tau\leq T$ （$T$ 为总时间 ）的范围内，都有<br>$$<br>|U^{n + 1}|\leq k|F|<br>$$<br>则称该格式按右端稳定 。这表明右端项的变化不会导致数值解无限制地增大，保证了解对右端项的稳定性</p><h2 id="按初值稳定与按右端稳定的关系证明">按初值稳定与按右端稳定的关系证明</h2><p><strong>前提条件</strong>：已知 $|A^{-1}|\leq k’$</p><p><strong>推导过程</strong>：设 $U^0 = 0$ ，则<br>$$<br>\begin{align}<br>U^1 &amp;=\tau A^{-1}F\<br>U^2 &amp;= CU^1+\tau A^{-1}F=(C + I)\tau A^{-1}F\<br>U^3 &amp;= CU^2+\tau A^{-1}F=(C^2 + C + I)\tau A^{-1}F\<br>&amp; \quad  \vdots\<br>U^{n + 1} &amp;=(C^n + C^{n - 1}+\cdots + C + I)\tau A^{-1}F<br>\end{align}<br>$$<br>若差分格式按初值稳定，即存在常数 $k’‘$ ，使得<br>$$<br>|C^n|\leq k’’<br>$$<br>那么<br>$$<br>|U^{n + 1}|\leq(n + 1)k’‘\cdot\tau\cdot k’\cdot|F|<br>$$<br>当 $n\tau\leq T$ 时，可找到合适的 $k$ ，使得<br>$$<br>|U^{n + 1}|\leq k|F|<br>$$<br>即差分格式按右端稳定 。所以在给定条件下，按初值稳定可推出按右端稳定，也解释了为何稳定性常指按初值稳定</p><h2 id="稳定性分析总体思路">稳定性分析总体思路</h2><p>要检验矩阵族 $\displaystyle {C^n: 0 &lt; \tau\leq\tau_0, 0 &lt; n\leq\frac{T}{\tau}}$ 的一致有界性，常用方法有矩阵法、Fourier 方法、代数准则法</p><h3 id="矩阵法相关命题">矩阵法相关命题</h3><p><strong>命题 2.1（必要条件）</strong>：设增长矩阵 $C$ 的谱半径为 $\rho©$ ，若差分格式稳定，则存在 $M &gt; 0$ ，使得 $\rho©\leq1 + M\tau$</p><p><strong>证明思路</strong>：因为格式稳定，存在 $\tau_0$ 和 $k\geq1$ ，当 $0 &lt; \tau\leq\tau_0$ ，$\displaystyle 0 &lt; n\leq\frac{T}{\tau}$ 时，$|C^n|\leq k$ 。又因为<br>$$<br>\rho©=\rho(C^n)^{\frac{1}{n}}\leq|C^n|^{\frac{1}{n}}\leq k^{\frac{1}{n}}<br>$$<br>对 $k^{\frac{1}{n}}$ 进行放缩，如<br>$$<br>k^{\frac{1}{n}}\leq k^{\frac{1}{\frac{T}{\tau}+1}}\leq k^{\frac{\tau}{T+\tau}} = e^{\frac{\tau}{T + \tau}\ln k}<br>$$<br>进一步放缩可得<br>$$<br>e^{\frac{\tau}{T + \tau}\ln k}\leq e^{\frac{\ln k}{T - \tau_0}\cdot\tau}\leq1 + M\tau<br>$$<br><strong>命题 2.2（充分条件）</strong>：设 $C^HC = CC^H$ （$C$ 为正规矩阵），若 $\rho©\leq1 + M\tau$ ，则差分格式稳定</p><p><strong>证明思路</strong>：此时 $|C|_2 = \rho©$ ，则<br>$$<br>|C^n|\leq|C|^n=\rho©^n\leq(1 + M\tau)^n\leq(e^{M\tau})^n = e^{Mn\tau}<br>$$<br>当 $n\tau\leq T$ 时<br>$$<br>e^{Mn\tau}\leq e^{TM}=k<br>$$<br>说明矩阵族有界，格式稳定</p><h4 id="四种格式稳定性分析">四种格式稳定性分析</h4><h5 id="向前差分格式-2">向前差分格式</h5><p>向前差分格式中<br>$$<br>C=(1 - 2r)I + rS<br>$$</p><p>$S$ 为特定矩阵且 $C^HC = CC^H$ ，$S$ 的特征值<br>$$<br>\lambda_j^S = 2\cos j\pi h  \quad (j = 1,\cdots,J - 1,h=\frac{L}{J} )<br>$$<br>特征向量<br>$$<br>V_j^S = (\sin j\pi h,\sin 2j\pi h,\cdots,\sin (J - 1)j\pi h)^T<br>$$<br>由此可得 $C$ 的特征值<br>$$<br>\begin{align}<br>\lambda_j^C &amp;= 1 - 2r + r\cdot2\cos j\pi h \<br>&amp;= 1 - 4r\sin^2\frac{j\pi h}{2}<br>\end{align}<br>$$<br>要使 $|\lambda_j^C|\leq1 + M\tau$ ，分析<br>$$<br>|1 - 4r\sin^2\frac{j\pi h}{2}|\leq1 + M\tau<br>$$<br>右边 $1 + M\tau\geq1$ 恒成立，只需考虑左边。当 $4r\leq2$ ，即 $r\leq\frac{1}{2}$ 时<br>$$<br>|1 - 4r\sin^2\frac{j\pi h}{2}|\leq1<br>$$<br>能保证，此时向前差分格式<strong>稳定</strong>；当 $r &gt; \frac{1}{2}$ 时，$|1 - 4r\sin^2\frac{j\pi h}{2}|$ 可能大于 $1$ ，格式<strong>不稳定</strong></p><h5 id="向后差分格式-2">向后差分格式</h5><p>向后差分格式增长矩阵<br>$$<br>C = [(1 + 2r)I - rS]^{-1}=A^{-1}<br>$$<br>其特征值<br>$$<br>\begin{align}<br>\lambda_j^C &amp;=(1 + 2r - r\lambda_j^S)^{-1}\<br>&amp;=(1 + 2r - r\cdot2\cos j\pi h)^{-1}\<br>&amp;=(1 + 4r\sin^2\frac{j\pi h}{2})^{-1}<br>\end{align}<br>$$<br>因为 $(1 + 4r\sin^2\frac{j\pi h}{2})^{-1}\leq1$ 恒成立，所以<br>$$<br>\rho©\leq1\leq1 + M\tau<br>$$<br>即向后差分格式<strong>恒稳定</strong></p><h5 id="Crank-Nicolson-格式-2">Crank - Nicolson 格式</h5><p>增长矩阵<br>$$<br>\begin{align}<br>C &amp;= A^{-1}B\<br>&amp;=[(1 + r)I - \frac{r}{2}S]^{-1}[(1 - r)I + \frac{r}{2}S]<br>\end{align}<br>$$<br>其中<br>$$<br>(1 + r)I - \frac{r}{2}S = V^T\begin{bmatrix}\alpha_1&amp; &amp; \ &amp; \ddots&amp; \ &amp; &amp;\alpha_{J - 1}\end{bmatrix}V<br>$$</p><p>$$<br>(1 - r)I + \frac{r}{2}S = V^T\begin{bmatrix}\beta_1&amp; &amp; \ &amp; \ddots&amp; \ &amp; &amp;\beta_{J - 1}\end{bmatrix}V<br>$$</p><p>$$<br>\alpha_j = 1 + r - \frac{r}{2}\cdot2\cos j\pi h = 1 + 2r\sin^2\frac{j\pi h}{2}<br>$$</p><p>$$<br>\beta_j = 1 - r + \frac{r}{2}\cdot2\cos j\pi h = 1 - 2r\sin^2\frac{j\pi h}{2}<br>$$</p><p>则<br>$$<br>\begin{align}<br>C &amp;= V^T\begin{bmatrix}\alpha_1^{-1}&amp; &amp; \ &amp; \ddots&amp; \ &amp; &amp;\alpha_{J - 1}^{-1}\end{bmatrix}V\cdot V^T\begin{bmatrix}\beta_1&amp; &amp; \ &amp; \ddots&amp; \ &amp; &amp;\beta_{J - 1}\end{bmatrix}V \<br>&amp;= V^T\begin{bmatrix}\alpha_1^{-1}\beta_1&amp; &amp; \ &amp; \ddots&amp; \ &amp; &amp;\alpha_{J - 1}^{-1}\beta_{J - 1}\end{bmatrix}V<br>\end{align}<br>$$</p><p>特征值<br>$$<br>|\lambda_j^C| = \left|\frac{\beta_j}{\alpha_j}\right|=\left|\frac{1 - 2r\sin^2\frac{j\pi h}{2}}{1 + 2r\sin^2\frac{j\pi h}{2}}\right|\leq1<br>$$<br>故 Crank - Nicolson 格式<strong>恒稳定</strong></p><h5 id="Richardson-格式-2">Richardson 格式</h5><p>Richardson 格式的增长矩阵<br>$$<br>C=\begin{bmatrix}2r(S - 2I)&amp;I\I&amp;0\end{bmatrix}<br>$$<br>对于特征值问题<br>$$<br>C\begin{bmatrix}w_1\w_2\end{bmatrix}=\lambda\begin{bmatrix}w_1\w_2\end{bmatrix}<br>$$<br>得到方程组<br>$$<br>\begin{cases}2r(S - 2I)w_1+w_2=\lambda w_1\w_1=\lambda w_2\end{cases}<br>$$<br>将 $w_1=\lambda w_2$ 代入第一个方程并整理，可得<br>$$<br>S w_2=(2+\frac{\lambda}{2r}-\frac{1}{2\lambda r})w_2<br>$$<br>已知 $S$ 的特征值<br>$$<br>\mu = 2\cos j\pi h<br>$$<br>则<br>$$<br>\mu = 2+\frac{\lambda}{2r}-\frac{1}{2\lambda r}<br>$$<br>进一步变形为关于 $\lambda$ 的二次方程<br>$$<br>\lambda^2 + 8r\sin^2\frac{j\pi h}{2}-1 = 0<br>$$<br>解上述二次方程，得到<br>$$<br>\lambda_{1,2}=-4r\sin^2\frac{j\pi h}{2}\pm\sqrt{16r^2\sin^2\frac{j\pi h}{2}+1}<br>$$<br>谱半径<br>$$<br>\rho©=\max_j{|\lambda_1^j|,|\lambda_2^j|}<br>$$<br>通过分析可知<br>$$<br>\rho©&gt;r+\sqrt{1 + r^2}&gt;r + 1 = 1+\frac{a\tau}{h^2}<br>$$<br>根据矩阵法中差分格式稳定的必要条件（若差分格式稳定，则 $\rho©\leq1 + M\tau$ ），这里不存在 $M$ 使得 $\rho©\leq1 + M\tau$ 成立</p><p>故 Richardson 格式<strong>恒不稳定</strong></p><h2 id="收敛性与敛速估计">收敛性与敛速估计</h2><p>考虑抛物方程初边值问题<br>$$<br>\begin{cases}Lu = u_t - au_{xx}=f(x)\u(x,0)=\varphi(x)\u(0,t)=u(l,t)=0\end{cases}<br>$$<br>对应的差分格式为<br>$$<br>\begin{cases}L_hu_j^n = f_j\u_j^0=\varphi_j\u_0^n = u_J^n = 0\end{cases}<br>$$<br>其中截断误差定义为<br>$$<br>R_j^n(u)=L_hu(x_j,t_n)-[Lu]_j^n<br>$$<br>当 $h,\tau\rightarrow0$ 时，若 $R_j^n(u)\rightarrow0$ ，则称差分格式具有相容性</p><h3 id="定理-2-1">定理 2.1</h3><p><strong>定理内容</strong>：对于线性抛物方程的差分格式，相容性 + 稳定性 $\Rightarrow$ 收敛性</p><p><strong>证明思路</strong>：由相容性可知<br>$$<br>\lim\limits_{h,\tau\rightarrow0}|R^n(u)| = 0<br>$$<br>令<br>$$<br>e_j^n = u(x_j,t_n)-u_j^n<br>$$<br>为误差函数</p><p>根据截断误差的定义<br>$$<br>\begin{align}<br>R_j^n(u) &amp;=L_hu(x_j,t_n)-<a href="x_j,t_n">Lu</a>=L_hu(x_j,t_n)-f_j\<br>&amp;= L_hu(x_j,t_n)-L_hu_j^n \<br>&amp;= L_he_j^n<br>\end{align}<br>$$<br>可得<br>$$<br>\begin{cases}L_he_j^n = R_j^n(u)\e_j^0 = 0, \quad j = 1,\cdots,J - 1\end{cases}<br>$$<br>写成矩阵向量形式为<br>$$<br>AE^{n + 1}=BE^n+\tau R^n<br>$$<br>进一步得到<br>$$<br>\begin{align}<br>E^{n + 1} &amp;=A^{-1}BE^n+\tau A^{-1}R^n \<br>&amp;= CE^n+\tau A^{-1}R^n<br>\end{align}<br>$$<br>其中<br>$$<br>E^n=(e_1^n,\cdots,e_{J - 1}^n)^T<br>$$<br>因为按初值稳定可推出按右端稳定，根据按右端稳定性质有<br>$$<br>|E^n|\leq k|R^n|<br>$$<br>又因为相容性保证<br>$$<br>\lim\limits_{h,\tau\rightarrow0}|R^n| = 0<br>$$<br>所以<br>$$<br>\lim\limits_{h,\tau\rightarrow0}|E^n| = 0<br>$$<br>即证明了差分格式的收敛性</p><h3 id="推论-2-2-（收敛阶）">推论 2.2 （收敛阶）</h3><p><strong>向前格式</strong>：当 $r\leq\frac{1}{2}$ 时，向前格式稳定，截断误差为 $O(\tau + h^2)$ ，所以收敛阶为 $O(\tau + h^2)$ 。这意味着随着时间步长 $\tau$ 和空间步长 $h$ 趋于 0 ，数值解与精确解的误差以 $\tau + h^2$ 的速度趋近于 0</p><p><strong>向后格式</strong>：向后格式恒稳定，截断误差是 $O(\tau + h^2)$ ，其收敛阶为 $O(\tau + h^2)$</p><p><strong>Crank - Nicolson 格式</strong>：该格式恒稳定，截断误差为 $O(\tau^2 + h^2)$ ，收敛阶为 $O(\tau^2 + h^2)$ ，表明其误差减小速度比前两者在时间方向上更快，精度更高</p><p><strong>Richardson 格式</strong>：由于恒不稳定，即便截断误差有一定阶数，但误差会随计算过程无限增长，不存在收敛性</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第三章（1）</title>
      <link href="/2025/05/26/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A36/"/>
      <url>/2025/05/26/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A36/</url>
      
        <content type="html"><![CDATA[<h1>抛物型方程有限差分法</h1><h2 id="方程类型与定解问题分类">方程类型与定解问题分类</h2><p><strong>方程类型</strong>：抛物型方程<br>$$<br>\frac{\partial u}{\partial t}=a\Delta u + f(x) \quad(a&gt;0)<br>$$<br>其中时间变量是一阶导数，空间变量是二阶导数 。当 $t\rightarrow\infty$ 时，$\displaystyle \frac{\partial u}{\partial t}\rightarrow0$ ，方程变为 $0 = a\overline{u}+f(x)$ ，即椭圆方程，说明椭圆方程是抛物方程的定态情形 ，抛物方程关注中间过程</p><p><strong>定解问题分类（一维情形）</strong></p><p>**初值问题（Cauchy）：**给定初始条件<br>$$<br>u(x,0)=\varphi(x),\quad -\infty&lt;x&lt;+\infty<br>$$<br>**初边值问题：**初始条件<br>$$<br>u(x,0)=\varphi(x),\quad 0\leq x\leq l<br>$$<br>边界条件有多种形式，如<br>$$<br>\begin{align}<br>&amp;① u(0,t)=u(l,t),\quad 0\leq t\leq T\<br>&amp;② u(0,t)=\alpha,\quad u_x(l,t)=\beta\<br>&amp;③ u(0,t)+\alpha_1u_x(0,t)=\beta_1,\quad u(l,t)+\alpha_2u_x(l,t)=\beta_2<br>\end{align}<br>$$</p><h3 id="最简差分格式">最简差分格式</h3><p>考虑方程<br>$$<br>\begin{cases}\displaystyle \frac{\partial u}{\partial t}=a\frac{\partial^2u}{\partial x^2}+f(x),&amp;0&lt;t\leq T,x\in(0,l)\u(x,0)=\varphi(x),&amp;x\in[0,l]\u(0,t)=0,u(l,t)=0\end{cases}<br>$$<br><strong>区域离散化</strong></p><p>对于区域 $\overline{G}={(x,t):0\leq x\leq l,0\leq t\leq T}$ ，在 $x$ 方向将区间 $[0, l]$ 进行 $J$ 等分，步长 $\displaystyle h = \frac{l}{J}$ ，得到节点 $x_j = jh$（$j = 0, 1, \cdots, J$ ）；在 $t$ 方向将区间 $[0, T]$ 进行 $N$ 等分，步长 $\displaystyle \tau = \frac{T}{N}$ ，得到节点 $t_n = n\tau$（$n = 0, 1, \cdots, N$ ） 。用 $\displaystyle u_j^n$ 近似表示 $u(x_j, t_n)$</p><h4 id="向前差分格式">向前差分格式</h4><p>对抛物型方程 $\displaystyle \frac{\partial u}{\partial t}=a\frac{\partial^2u}{\partial x^2}+f(x)$ ，时间方向用向前差商 $\displaystyle \frac{u_j^{n + 1}-u_j^n}{\tau}$ 近似 $\displaystyle \frac{\partial u}{\partial t}$ ，空间方向用中心差商 $\displaystyle \frac{u_{j - 1}^n - 2u_j^n + u_{j + 1}^n}{h^2}$ 近似 $\displaystyle \frac{\partial^2u}{\partial x^2}$ ，得到向前差分格式：<br>$$<br>\frac{u_j^{n + 1}-u_j^n}{\tau}=a\frac{u_{j - 1}^n - 2u_j^n + u_{j + 1}^n}{h^2}+f_j<br>$$<br>整理后为<br>$$<br>u_j^{n + 1}=u_j^n+\frac{a\tau}{h^2}(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+\tau f_j<br>$$<br>令 $\displaystyle r = \frac{a\tau}{h^2}$（网比 ），则<br>$$<br>u_j^{n + 1}=u_j^n + r(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+\tau f_j<br>$$<br>该格式也称为显格式，因为可以根据已知的 $n$ 时刻的值直接计算出 $n + 1$ 时刻的值</p><p>初始条件<br>$$<br>\begin{align}<br>u_j^0 &amp;= \varphi_j = \varphi(x_j)\<br>&amp;f_j = f(x_j)<br>\end{align}<br>$$<br>结合边界条件可依次递推求解 $u_j^n$</p><p><strong>截断误差分析</strong></p><p>定义微分算子<br>$$<br>Lu=\frac{\partial u}{\partial t}-a\frac{\partial^2u}{\partial x^2}<br>$$<br>差分算子<br>$$<br>L_h^{(1)}u_j^n=\frac{u_j^{n + 1}-u_j^n}{\tau}-a\frac{u_{j - 1}^n - 2u_j^n + u_{j + 1}^n}{h^2}<br>$$<br>截断误差<br>$$<br>R_j^n(u)=L_h^{(1)}u(x_j, t_n)-[Lu]<em>j^n<br>$$<br>通过泰勒展开：<br>$$<br>\frac{u(x_j, t</em>{n + 1})-u(x_j, t_n)}{\tau}=\frac{\partial u}{\partial t}(x_j, t_n)+\frac{\tau}{2}\frac{\partial^2u}{\partial t^2}(x_j, t_n)+O(\tau^2)<br>$$</p><p>$$<br>\frac{u(x_{j - 1}, t_n)-2u(x_j, t_n)+u(x_{j + 1}, t_n)}{h^2}=\frac{\partial^2u}{\partial x^2}(x_j, t_n)+\frac{h^2}{12}\frac{\partial^4u}{\partial x^4}(x_j, t_n)+O(h^3)<br>$$</p><p>则<br>$$<br>L_h^{(1)}u(x_j,t_n)=[Lu]_j^n+\frac{\tau}{2}(\frac{\partial^2u}{\partial t^2})_j^n-\frac{ah^2}{12}(\frac{\partial^4u}{\partial x^4})_j^n+O(\tau^2)+O(h^3)<br>$$<br><strong>利用方程关系化简</strong></p><p>已知抛物型方程 $u_t = au_{xx}+f(x)$ ，对其求导可得：<br>$$<br>\begin{align}<br>u_{tx}&amp;=au_x^{(4)}+f’‘\<br>u_{tt}&amp;=au_{xxt}<br>\end{align}<br>$$<br>进而推出<br>$$<br>\begin{align}<br>au_x^{(4)} &amp;= u_{tx}-f’‘\<br>&amp;=\frac{1}{a}u_{tt}-f’’<br>\end{align}<br>$$<br>将 $\displaystyle au_x^{(4)} = \frac{1}{a}u_{tt}-f’‘$ 代入截断误差表达式 $R_j^n(u)$ ：<br>$$<br>R_j^n(u)=\frac{\tau}{2}(\frac{\partial^2u}{\partial t^2})_j^n-\frac{h^2}{12}[\frac{1}{a}(\frac{\partial^2u}{\partial t^2})_j^n - f_j’‘]+O(\tau^2)+O(h^3)<br>$$<br>整理得<br>$$<br>R_j^n(u)=\tau(\frac{\partial^2u}{\partial t^2})_j^n(\frac{1}{2}-\frac{1}{12r})+\frac{h^2}{12}f_j’'+O(\tau)+O(h^3)<br>$$<br>其中 $\displaystyle r = \frac{a\tau}{h^2}$</p><p>当 $\tau$ 和 $h$ 趋于 0 时<br>$$<br>R_j^n(u)=O(\tau + h^2)<br>$$<br>表明向前差分格式对时间是一阶精度，对空间是二阶精度</p><h4 id="向后差分格式">向后差分格式</h4><p>对于抛物型方程 $\displaystyle \frac{\partial u}{\partial t}=a\frac{\partial^2u}{\partial x^2}+f(x)$ ，时间方向用向后差商 $\displaystyle \frac{u_j^{n + 1}-u_j^n}{\tau}$ 近似 $\displaystyle \frac{\partial u}{\partial t}$ ，空间方向用中心差商 $\displaystyle \frac{u_{j - 1}^{n + 1}-2u_j^{n + 1}+u_{j + 1}^{n + 1}}{h^2}$ 近似 $\displaystyle \frac{\partial^2u}{\partial x^2}$ ，得到向后差分格式：<br>$$<br>\frac{u_j^{n + 1}-u_j^n}{\tau}=a\frac{u_{j - 1}^{n + 1}-2u_j^{n + 1}+u_{j + 1}^{n + 1}}{h^2}+f_j<br>$$<br>整理可得<br>$$<br>u_j^{n + 1}=u_j^n+\frac{a\tau}{h^2}(u_{j - 1}^{n + 1}-2u_j^{n + 1}+u_{j + 1}^{n + 1})+\tau f_j<br>$$<br>令 $\displaystyle r = \frac{a\tau}{h^2}$ ，进一步化为<br>$$<br>-ru_{j - 1}^{n + 1}+(1 + 2r)u_j^{n + 1}-ru_{j + 1}^{n + 1}=u_j^n+\tau f_j<br>$$<br>该格式是隐格式，因为在求解 $n + 1$ 时刻的 $u_j^{n + 1}$ 时，需要同时考虑 $j - 1$、$j$、$j + 1$ 节点在 $n + 1$ 时刻的值，即需求解联立线性方程组 。已知 $u_j^n$ ，结合边界条件（如 $u_0^{n + 1}=0$ ，$u_J^{n + 1}=0$ ）来求解 $u_j^{n + 1}$</p><p><strong>截断误差</strong></p><p>在点 $(x_j,t_{n + 1})$ 处对相关函数进行泰勒展开。代入 $L_h^{(2)}u(x_j,t_{n + 1})$ 并与 $[Lu]_j^n$ 作差：<br>$$<br>L_h^{(2)}u(x_j,t_{n + 1})=\frac{u_j^{n + 1}-u_j^n}{\tau}-a\frac{u_{j - 1}^{n + 1}-2u_j^{n + 1}+u_{j + 1}^{n + 1}}{h^2}<br>$$</p><p>$$<br>\begin{align}<br>R_j^n(u) &amp;= L_h^{(2)}u(x_j,t_{n + 1})-[Lu]_j^n \<br>&amp;=-\tau(\frac{\partial^2u}{\partial t^2})_j^n(\frac{1}{2}+\frac{1}{12r})+O(\tau^2 + h^2)\<br>&amp;=O(\tau + h^2)<br>\end{align}<br>$$</p><h4 id="Crank-Nicolson-格式">Crank - Nicolson 格式</h4><p>Crank - Nicolson 格式是通过将向前差分格式和向后差分格式进行算术平均得到的。对于抛物型方程 $\displaystyle \frac{\partial u}{\partial t}=a\frac{\partial^2u}{\partial x^2}+f(x)$ ，其差分格式表达式为<br>$$<br>\frac{u_j^{n + 1}-u_j^n}{\tau}=a[\frac{1}{2}\frac{u_{j - 1}^{n + 1}-2u_j^{n + 1}+u_{j + 1}^{n + 1}}{h^2}+\frac{1}{2}\frac{u_{j - 1}^n - 2u_j^n + u_{j + 1}^n}{h^2}]+f_j<br>$$<br>进一步整理为<br>$$<br>u_j^{n + 1}=u_j^n+\frac{r}{2}(u_{j - 1}^{n + 1}-2u_j^{n + 1}+u_{j + 1}^{n + 1})+\frac{r}{2}(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+\tau f_j<br>$$</p><p>其中 $\displaystyle r = \frac{a\tau}{h^2}$  ，再化为<br>$$<br>-\frac{r}{2}u_{j - 1}^{n + 1}+(1 + r)u_j^{n + 1}-\frac{r}{2}u_{j + 1}^{n + 1}=\frac{r}{2}u_{j - 1}^n+(1 - r)u_j^n+\frac{r}{2}u_{j + 1}^n+\tau f_j<br>$$<br>这是一种隐格式，也叫对称六点差分格式</p><p><strong>边界条件</strong>：已知边界条件如 $u_0^{n + 1}=0$ ，$u_J^{n + 1}=0$ ，求解时需解线性方程组</p><p><strong>截断误差</strong></p><p>在点 $\displaystyle (x_j,t_{n+\frac{1}{2}})$ 处展开分析截断误差 $R_j^n(u)$ 。根据泰勒展开，将差分算子 $L_h^{(3)}$ 作用于 $u(x_j,t_{n+\frac{1}{2}})$ 与微分算子 $Lu$ 在该点的值作差<br>$$<br>\begin{align}<br>R_j^n(u) &amp;= L_h^{(3)}u(x_j,t_{n + 1})-[Lu]_j^{n+\frac{1}{2}} \<br>&amp;=(\frac{\partial u}{\partial t})_j^{n+\frac{1}{2}}-a(\frac{\partial^2u}{\partial t^2})_j^{n+\frac{1}{2}} +O(\tau^2)+O(h^2)\<br>&amp;=O(\tau^2 + h^2)<br>\end{align}<br>$$<br>这表明该格式在时间和空间上均具有二阶精度，相比向前差分格式（$O(\tau + h^2)$ ）和向后差分格式（$O(\tau + h^2)$ ），精度更高</p><p><strong>加权平均形式</strong></p><p>该格式还可表示为加权平均形式<br>$$<br>\frac{u_j^{n + 1}-u_j^n}{\tau}=\frac{a}{h^2}[\theta\delta_x^2u_j^{n + 1}+(1 - \theta)\delta_x^2u_j^n]<br>$$<br>其中<br>$$<br>\delta_x^2u_j^n = u_{j - 1}^n - 2u_j^n + u_{j + 1}^n<br>$$<br>当 $\displaystyle \theta = \frac{1}{2}$ 时，就是 Crank - Nicolson 格式 。通过调整 $\theta$ 值，可以研究不同差分格式的稳定性、精度等性质</p><h4 id="Richardson-格式">Richardson 格式</h4><p>Richardson 格式表达式为<br>$$<br>\frac{u_j^{n + 1}-u_j^{n - 1}}{2\tau}=a\frac{u_{j - 1}^n - 2u_j^n + u_{j + 1}^n}{h^2}+f_j<br>$$<br>整理可得<br>$$<br>u_j^{n + 1}=2r(u_{j - 1}^n - 2u_j^n + u_{j + 1}^n)+u_j^{n - 1}+2\tau f_j<br>$$<br>其中 $\displaystyle r = \frac{a\tau}{h^2}$</p><p><strong>截断误差</strong>：截断误差为 $O(\tau^2 + h^2)$ ，在时间和空间上均具有二阶精度</p><h3 id="差分格式考量因素">差分格式考量因素</h3><p><strong>计算简单</strong>：格式的计算复杂度低，易于编程实现和计算</p><p><strong>收敛性与敛速</strong>：格式的解是否收敛到原问题的解，以及收敛速度的快慢</p><p><strong>稳定性</strong>：计算过程中误差是否会随时间或迭代次数无限增长，不稳定的格式即使有高精度也难以应用</p><p><strong>稳定性分析</strong></p><p>以Richardson 格式的稳定性为例</p><p>设 $e_j^n$ 表示 $u_j^n$ 的误差，假设 $f_j^n$ 精确，误差源于初始值，即 $e_j^{-1}=0$ ，$e_0^0 = \varepsilon$ ，$e_j^0 = 0$（$j\neq0$ ） 。根据 Richardson 格式，误差满足<br>$$<br>e_j^{n + 1}=2r(e_{j - 1}^n - 2e_j^n + e_{j + 1}^n)+e_j^{n - 1}<br>$$<br>从相关误差传播分析可知，当 $n\rightarrow\infty$ 时，误差会无限增长，所以 Richardson 格式是不稳定的 。这也体现了在构造差分格式时，稳定性是一个关键考量因素，不稳定的格式在实际计算中会产生无意义的结果</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第二章（3）</title>
      <link href="/2025/05/25/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A35/"/>
      <url>/2025/05/25/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A35/</url>
      
        <content type="html"><![CDATA[<h1>三角网的差分格式</h1><p><strong>区域离散化</strong></p><p><strong>三角剖分</strong>：对求解区域进行三角剖分，需记录点、边、三角形的编号和存储信息，以便准确描述区域离散后的结构</p><p><strong>对偶剖分</strong>：通过边的中垂线交点围成对偶部分，为后续构建控制容积提供基础</p><p><strong>从微分形式到离散差分格式</strong></p><p>**积分转化：**对二维 Poisson 方程 $-\Delta u = f$ ，在控制容积 $G_0$ 上积分，得到<br>$$<br>-\iint_{G_0}\Delta u dxdy=\iint_{G_0}f dxdy<br>$$<br><strong>右端项近似：</strong><br>$$<br>\iint_{G_0}f dxdy\approx m(G_0)f(P_0)<br>$$<br>其中 $m(G_0)$ 是控制容积 $G_0$ 的面积，$P_0$ 是内点，该近似基于在小区域内函数值变化不大的假设</p><p><strong>左端项处理</strong>：利用 Green 公式<br>$$<br>\iint_{G_0}\Delta u dxdy=\int_{\partial G_0}\frac{\partial u}{\partial n}ds<br>$$<br>$\displaystyle \vec{n}$ 是 $\partial G_0$ 的单位外法向 。将边界积分 $\displaystyle \int_{\partial G_0}\frac{\partial u}{\partial n}ds$</p><p>离散化为<br>$$<br>\sum_{i = 1}^{6}\overline{q_iq_{i + 1}}\int_{\overline{q_iq_{i + 1}}}\frac{\partial u}{\partial n}ds<br>$$<br>这里假设控制容积边界由 6 条边组成 ，进一步近似为<br>$$<br>\sum_{i = 1}^{6}\overline{q_iq_{i + 1}}\cdot\frac{u(P_{i + 1})-u(P_0)}{\overline{P_0P_{i + 1}}}<br>$$<br>其中 $\overline{q_iq_{i + 1}}$ 是边的长度，$\overline{P_0P_{i + 1}}$ 是相关点间距离</p><p><strong>差分格式</strong>：最终得到内点的差分格式<br>$$<br>-\sum_{i = 1}^{6}\overline{q_iq_{i + 1}}\cdot\frac{u(P_{i + 1})-u(P_0)}{\overline{P_0P_{i + 1}}}=m(G_0)f(P_0)<br>$$<br>边界点 $P_0$ 处的差分方程</p><p>以第二、第三边界条件<br>$$<br>(\frac{\partial u}{\partial n}+ku)|<em>{\Gamma}=\gamma<br>$$<br>为例 ，选取控制容积<br>$$<br>G_0 = P_0m_1q_1q_2q_3m_4<br>$$<br>在该控制容积上，根据积分形式有<br>$$<br>-\int</em>{\partial G_0}\frac{\partial u}{\partial n}ds=\iint_{G_0}f dxdy<br>$$<br>其中 $\partial G_0$ 由 $\overline{P_0m_1}$、$\overline{m_1q_1}$、$\overline{q_1q_2}$、$\overline{q_2q_3}$、$\overline{q_3m_4}$、$\overline{m_4P_0}$ 等线段组成</p><p><strong>边界积分计算</strong></p><p>对于 $\displaystyle \int_{\overline{m_4P_0}}\frac{\partial u}{\partial n}ds$</p><p>用边界条件 $\displaystyle (\frac{\partial u}{\partial n}+ku)|<em>{\Gamma}=\gamma$ ，可得<br>$$<br>\int</em>{\overline{m_4P_0}}\frac{\partial u}{\partial n}ds=\int_{\overline{m_4P_0}}(\gamma - ku)ds<br>$$<br>通过近似计算，先将 $u$ 在该线段上近似为平均值，如<br>$$<br>\approx\frac{1}{\overline{m_4P_0}}(\gamma - k\cdot\frac{1}{2}(u_{P_0}+u_{m_4}))<br>$$</p><p>进一步化简为<br>$$<br>\begin{align}<br>&amp;\approx\frac{1}{\overline{m_4P_0}}(\gamma - k\cdot\frac{1}{2}(u_{P_0}+\frac{u_{P_0}+u_{P_4}}{2}))\<br>&amp;=\frac{1}{2}\overline{P_0P_4}(\gamma-\frac{k}{4}(3u_{P_0}+u_{P_4}))<br>\end{align}<br>$$<br>对于 $\displaystyle \int_{\overline{P_0m_1}}\frac{\partial u}{\partial n}ds$ ，计算方式同理</p><p><strong>离散化方程组要点</strong></p><p>形成离散化方程组时，节点的排序和离散方程的排序很关键。合理的排序能使系数矩阵具有更好的结构（如带状、稀疏等 ），便于采用合适的数值方法（如迭代法 ）求解方程组，提高计算效率和稳定性</p><h1>极值定理与敛速估计</h1><h2 id="极值定理">极值定理</h2><p><strong>条件</strong>：设 $u_{ij}$ 是区域上的网格函数，差分方程为<br>$$<br>L_hu_{ij}=a_{ij}u_{ij}-a_{i - 1,j}u_{i - 1,j}-\cdots - a_{i,j + 1}u_{i,j + 1}=F_{ij}<br>$$<br>当 $h_1$，$h_2$ 充分小时，系数 $a_{ij}\geq0$ 且<br>$$<br>a_{ij}\geq a_{i - 1,j}+a_{i,j - 1}+a_{i + 1,j}+a_{i,j + 1}<br>$$<br>若 $L_hu_{ij}\leq0$ （或 $L_hu_{ij}\geq0$ ）对 $\forall (x_i,y_j)\in G_h$ 成立</p><p><strong>结论</strong>：$u_{ij}$ 不可能在内点取正的极大值（或负的极小值 ），除非 $u_{ij}$ 为常数</p><p><strong>证明</strong>：采用反证法。假设 $u_{ij}$ 非常值函数且在 $G_h$ 中某点达到正的最大值 $M$ ，由于 $G_h$ 连通，必有内点 $(x_{i_0},y_{j_0})$ 使 $\displaystyle u_{i_0j_0}=M$ 且有相邻网格点 $(x_{i_0 + 1},y_{j_0})$ 使 $u_{i_0+1,j_0}&lt; M $ ，代入差分方程会推出 $ L_hu_{i_0j_0}&gt;0 $ ，与 $L_hu_{ij}\leq0 $ 矛盾</p><p>**推论 5.1：**由极值定理可推出差分方程有唯一解。因为若存在两个解 $u_{ij}$ 和 $v_{ij}$</p><p>令<br>$$<br>w_{ij}=u_{ij}-v_{ij}<br>$$<br>则<br>$$<br>L_hw_{ij}=0<br>$$<br>根据极值定理，$w_{ij}$ 只能为常数，又在边界上若 $u_{ij}=v_{ij}$ ，则 $w_{ij}=0$ ，即 $u_{ij}=v_{ij}$ ，所以解唯一</p><p>**推论 5.2：**若 $L_hu_{ij}\geq0$ ，在 $G_h$ 内且 $u_{ij}\geq0$ 在 $\Gamma_h$ （边界 ）上，则 $u_{ij}\geq0$ 在 $G_h$ 内 。这是极值定理的直接应用，表明在特定条件下函数值的非负性在区域内得以保持</p><h2 id="比较定理">比较定理</h2><p>**条件：**若 $|L_hu_{ij}|\leq L_hU_{ij}$ 在 $G_h$ 内，且 $|u_{ij}|\leq U_{ij}$ 在 $\Gamma_h$ 上</p><p>**结论：**则 $|u_{ij}|\leq U_{ij}$ 在 $G_h$ 内</p><p><strong>证明：</strong></p><p>已知条件 $|L_hu_{ij}|\leq L_hU_{ij}$ 在 $G_h$ 内，$|u_{ij}|\leq U_{ij}$ 在 $\Gamma_h$ 上</p><p>考虑 $L_h(U_{ij}-u_{ij})\geq0$ 在 $G_h$ 内，且 $U_{ij}-u_{ij}\geq0$ 在 $\Gamma_h$ 上，根据前面的推论 5.2，可得 $U_{ij}-u_{ij}\geq0$ 在 $G_h$ 内；同理，$L_h(U_{ij}+u_{ij})\geq0$ 在 $G_h$ 内，$U_{ij}+u_{ij}\geq0$ 在 $\Gamma_h$ 上，也能推出 $U_{ij}+u_{ij}\geq0$ 在 $G_h$ 内。综合起来，就证明了 $|u_{ij}|\leq U_{ij}$ 在 $G_h$ 内</p><p><strong>推论 5.3</strong></p><p>**条件：**若 $L_hu_{ij}=0$ 在 $G_h$ 内，且 $u_{ij}=\alpha_{ij}$ 在 $\Gamma_h$ 上</p><p><strong>结论</strong>：<br>$$<br>\max_{G_h}|u_{ij}|\leq\max_{\Gamma_h}|\alpha_{ij}|<br>$$<br>**证明：**设 $U_{ij}$ 是<br>$$<br>\begin{cases}L_hU_{ij}=0, &amp; G_h\U_{ij}=|\alpha_{ij}|, &amp; \Gamma_h\end{cases}<br>$$<br>的解。由比较定理可得 $|u_{ij}|\leq U_{ij}$ 在 $G_h$ 内。若 $U_{ij}$ 是常数，那么<br>$$<br>U_{ij}=\max_{\Gamma_h}|\alpha_{ij}|<br>$$<br>若 $U_{ij}$ 非常数，因为 $U_{ij}\geq0$ 且 $L_hU_{ij}=0$ ，根据极值定理，$U_{ij}$ 的最大值只能在 $\Gamma_h$ 上取到，所以<br>$$<br>U_{ij}\leq\max_{\Gamma_h}|\alpha_{ij}|<br>$$<br>从而得出<br>$$<br>|u_{ij}|\leq U_{ij}\leq\max_{\Gamma_h}|\alpha_{ij}|<br>$$<br>即<br>$$<br>\max_{G_h}|u_{ij}|\leq\max_{\Gamma_h}|\alpha_{ij}|<br>$$<br>该推论在估计差分方程解的范围时非常有用，表明在区域内差分方程的解的绝对值不会超过边界值的绝对值最大值</p><h2 id="五点格式的敛速估计">五点格式的敛速估计</h2><p><strong>离散化与误差定义</strong></p><p>对于二维 Poisson 方程 $-\Delta u = f$ 在区域 $G$ 上，边界条件 $u = \alpha(x,y)$ 在 $\Gamma$ 上。离散化后得到<br>$$<br>\begin{cases}L_hu_{ij}=\varphi_{ij},&amp;G\u_{ij}=\alpha_{ij},&amp;\Gamma_h\end{cases}<br>$$<br>真解满足<br>$$<br>\begin{cases}L_hu(x_i,y_i)=\varphi_{ij}+R_{ij},&amp;G\u(x_i,y_i)=\alpha_{ij},&amp;\Gamma_h\end{cases}<br>$$<br>其中 $R_{ij}$ 是局部截断误差，正则内点处 $R_{ij}=O(h^2)$ ，非正则内点处 $R_{ij}=O(h)$ ，且 $|R_{ij}|\leq kh$</p><p>其中<br>$$<br>h=\sqrt{h_1^2+h_2^2}<br>$$<br>定义误差<br>$$<br>e_{ij}=u(x_i,y_i)-u_{ij}<br>$$<br>则有<br>$$<br>\begin{cases}L_he_{ij}=R_{ij},&amp;G_h\e_{ij}=0,&amp;\Gamma_h\end{cases}<br>$$<br><strong>构造辅助函数</strong></p><p>设 $R$ 是以 $(0,0)$ 为心包含 $G$ 的最小圆半径，构造辅助函数<br>$$<br>E_{ij}=\frac{kh}{4}(R^2 - x_i^2 - y_j^2)<br>$$<br>可以验证 $E_{ij}\geq0$ 在 $\overline{G}_h$ 上，且 $L_hE_{ij}=kh$</p><p>即<br>$$<br>\begin{cases}L_hE_{ij}=kh,&amp;G_h\E_{ij}\geq0,&amp;\Gamma_h\end{cases}<br>$$</p><p><strong>应用比较定理</strong></p><p>因为<br>$$<br>|L_he_{ij}| = |R_{ij}|\leq kh = L_hE_{ij}\quad(在 G_h 内)<br>$$</p><p>$$<br>|e_{ij}| = 0\leq E_{ij}\quad(在 \Gamma_h 上)<br>$$</p><p>根据比较定理可得<br>$$<br>|e_{ij}|\leq E_{ij}\leq\frac{khR^2}{4}<br>$$<br>所以<br>$$<br>\max_{G_h}|e_{ij}|\leq\frac{khR^2}{4}=O(h)<br>$$<br>这表明随着网格步长 $h$ 趋于 0 ，差分格式的解 $u_{ij}$ 收敛到真解 $u(x_i,y_i)$ ，且收敛阶为 $O(h)$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第二章（2）</title>
      <link href="/2025/05/23/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A34/"/>
      <url>/2025/05/23/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A34/</url>
      
        <content type="html"><![CDATA[<h1>有限体积法求解椭圆型微分方程</h1><p><strong>守恒型与非守恒型方程形式</strong></p><p>对于椭圆型微分方程<br>$$<br>Lu = -(pu’)‘+qu = f<br>$$<br>守恒形式为 $(p(x)u’)‘$ ，对应散度型算子 。非守恒形式为<br>$$<br>p(x)u’’ + p’(x)u’<br>$$<br>当 $p(x)$ 有间断点时，若对非守恒形式采用中心差分格式，如<br>$$<br>\frac{p_i(u_{i - 1}-2u_i+u_{i + 1})}{h^2}+\frac{p_{i + 1}-p_{i - 1}}{2h}\cdot\frac{u_{i + 1}-u_{i - 1}}{2h}=0<br>$$<br>其差分解可能不收敛到真解</p><p>以方程<br>$$<br>\begin{align}<br>&amp;\begin{cases}(p(x)u’)’ = 0, &amp; 0 &lt; x &lt; 1\u(0)=1, u(1)=0\end{cases} \<br>\<br>&amp;p(x)=\begin{cases}p_1, &amp; 0\leq x\leq\xi\p_2, &amp; \xi &lt; x &lt; 1\end{cases}<br>\end{align}<br>$$</p><p>为例，精确解为<br>$$<br>u(x)=\begin{cases}1 - \alpha x, &amp; 0\leq x\leq\xi\\beta(1 - x), &amp; \xi &lt; x\leq1\end{cases}<br>$$<br>其中<br>$$<br>\begin{align}<br>\alpha &amp;=\frac{p_2}{p_1+(p_2 - p_1)\xi}\<br>\beta &amp;=\alpha\cdot\frac{p_1}{p_2}<br>\end{align}<br>$$</p><h2 id="有限体积法原理（以恒定温度场为例-）"><strong>有限体积法原理（以恒定温度场为例 ）</strong></h2><p>在区间 $[a,b]$ 上任取子区间 $[x^{(1)},x^{(2)}]$ ，基于能量守恒有<br>$$<br>-\int_{x^{(1)}}^{x^{(2)}}(p(x)u’)‘dx+\int_{x^{(1)}}^{x^{(2)}}qudx=\int_{x^{(1)}}^{x^{(2)}}fdx<br>$$<br>即<br>$$<br>w(x^{(1)})-w(x^{(2)})+\int_{x^{(1)}}^{x^{(2)}}qudx=\int_{x^{(1)}}^{x^{(2)}}fdx<br>$$<br>这里 $[x^{(1)},x^{(2)}]$ 称为控制容积，$w(x)=p(x)u’$ 表示热流量，$p(x)$ 为热传导系数</p><p>有限体积法的优势在于，方程中二阶导数不直接出现，从而减弱了对 $p(x)$ 和 $u(x)$ 光滑性的要求，允许 $p(x)$ 存在间断，在处理实际物理问题（如热传导等 ）中更具适用性</p><h2 id="有限体积法构建差分格式步骤解析">有限体积法构建差分格式步骤解析</h2><h3 id="守恒性体现与网格剖分"><strong>守恒性体现与网格剖分</strong></h3><p>守恒型微分方程描述物理量守恒规律，差分格式应反映此特性。对区间进行网格剖分并形成对偶剖分，取对偶单元 $\displaystyle [x_{i - \frac{1}{2}},x_{i + \frac{1}{2}}]$ ，根据能量守恒有<br>$$<br>w(x_{i - \frac{1}{2}})-w(x_{i + \frac{1}{2}})+\int_{\displaystyle x_{i - \frac{1}{2}}}^{\displaystyle x_{i + \frac{1}{2}}}qudx=\int_{\displaystyle x_{i - \frac{1}{2}}}^{\displaystyle x_{i + \frac{1}{2}}}fdx<br>$$</p><h3 id="积分近似与导数离散"><strong>积分近似与导数离散</strong></h3><p>对 $\displaystyle \int_{\displaystyle x_{i - \frac{1}{2}}}^{\displaystyle x_{i + \frac{1}{2}}}qudx$ 近似为 $\displaystyle u_i\int_{\displaystyle x_{i - \frac{1}{2}}}^{\displaystyle x_{i + \frac{1}{2}}}qdx$ 。由 $w(x)=p(x)u’$ 且 $w(x)$ 连续，改写 $\displaystyle \frac{du}{dx}=\frac{w(x)}{p(x)}$ ，在 $[x_{i - 1},x_i]$ 上积分得<br>$$<br>u(x_i)-u(x_{i - 1})=\int_{\displaystyle x_{i - 1}}^{\displaystyle x_i}\frac{w(x)}{p(x)}dx\approx w(x_{i - \frac{1}{2}})\int_{\displaystyle x_{i - 1}}^{\displaystyle x_i}\frac{1}{p(x)}dx<br>$$<br>进而<br>$$<br>w(x_{i - \frac{1}{2}})\approx\frac{u(x_i)-u(x_{i - 1})}{\displaystyle \int_{x_{i - 1}}^{x_i}\frac{1}{p(x)}dx}=a_i\frac{u(x_i)-u(x_{i - 1})}{h_i}<br>$$<br>其中<br>$$<br>a_i=\frac{h_i}{\displaystyle \int_{x_{i - 1}}^{x_i}\frac{1}{p(x)}dx}<br>$$<br>同理可得 $w(x_{i + \frac{1}{2}})$</p><h3 id="差分格式形成与积分计算"><strong>差分格式形成与积分计算</strong></h3><p>代入得到差分格式<br>$$<br>-[a_{i + 1}\frac{u_{i + 1}-u_i}{h_{i + 1}}-a_i\frac{u_i - u_{i - 1}}{h_i}]+u_i\int_{x_{i - \frac{1}{2}}}^{x_{i + \frac{1}{2}}}qdx=\int_{x_{i - \frac{1}{2}}}^{x_{i + \frac{1}{2}}}f(x)dx<br>$$<br>涉及 $p(x)$、$q(x)$、$f(x)$ 的积分，可用中点公式或梯形公式计算</p><p>中点公式下<br>$$<br>\begin{align}<br>a_i&amp;\approx p_{i - \frac{1}{2}}\<br>\int_{\displaystyle x_{i - \frac{1}{2}}}^{\displaystyle x_{i + \frac{1}{2}}}qdx&amp;\approx\frac{h_i+h_{i + 1}}{2}q_i\<br>\int_{\displaystyle x_{i - \frac{1}{2}}}^{\displaystyle x_{i + \frac{1}{2}}}f(x)dx&amp;\approx\frac{h_i+h_{i + 1}}{2}f_i<br>\end{align}<br>$$<br>最终差分格式为<br>$$<br>-[p_{i + \frac{1}{2}}\frac{u_{i + 1}-u_i}{h_{i + 1}}-p_{i - \frac{1}{2}}\frac{u_i - u_{i - 1}}{h_i}]+\frac{h_i+h_{i + 1}}{2}q_iu_i=\frac{h_i+h_{i + 1}}{2}f_i<br>$$</p><p>注：若 $p$，$q$，$f$ 有第一类间断点，则在间断点的取值应是左右极限的算术平均</p><h2 id="有限体积法相关特性及边界条件处理">有限体积法相关特性及边界条件处理</h2><h3 id="有限体积法优点"><strong>有限体积法优点</strong></h3><p><strong>降低光滑性要求</strong>：相比直接差分法，有限体积法对函数的光滑性要求更低，在处理 $p(x)$、$q(x)$ 等系数存在间断的情况时更具优势，能有效避免因系数间断导致的差分格式不收敛问题</p><p><strong>保持物理量守恒</strong>：从物理守恒定律出发构建差分格式，能精确反映物理量在控制容积内的守恒特性，这在模拟实际物理过程（如热传导、流体流动等 ）中至关重要</p><p><strong>方便处理网格及边界条件</strong>：可灵活适应任意网格形状和结构，在处理复杂区域和不同类型边界条件时更加便捷</p><h3 id="边界条件处理"><strong>边界条件处理</strong></h3><p><strong>常见边界条件类型</strong></p><p><strong>Dirichlet 条件</strong>：$u(a)=\alpha$ ，直接给定边界点的函数值</p><p><strong>Neumann 条件</strong>：$u’(a)=\alpha$ ，给定边界点的导数</p><p><strong>Robin 条件</strong>：$u’(a)=d_0u(a)+d_1$ ，是函数值和导数的线性组合。守恒型方程常见边界条件为<br>$$<br>-p(a)u’(a)=d_0u(a)+d_1<br>$$</p><h3 id="离散化及问题：">离散化及问题：</h3><p>以 $\displaystyle u’(a)\approx\frac{u(x_1)-u(x_0)}{h}$ 离散导数，这种离散方式存在不足，一是截断误差比内点低，二是可能破坏差分方程的对称性</p><h3 id="特殊控制容积处理：">特殊控制容积处理：</h3><p>取特殊控制容积 $[x^{(1)},x^{(2)}]=[x_0,x_{\frac{1}{2}}]$ ，根据守恒方程<br>$$<br>w(a)-w(x_{\frac{1}{2}})+\int_{x_0}^{x_{\frac{1}{2}}}qudx=\int_{x_0}^{x_{\frac{1}{2}}}fdx<br>$$<br>对 $-p(a)u’(a)=-w(a)$ 进行离散，得到<br>$$<br>-a_1\frac{u_1 - u_0}{h}+u_0\cdot\frac{h}{2}d_0-\frac{h}{2}d_0=d_0u_0 + d_1<br>$$<br>右边边界同理</p><p>当网格均匀且系数光滑时，边界截断误差可达到 $O(h^2)$  ，通过这种方式能更合理地处理边界条件，提高数值解的精度和稳定性</p><h1>矩形网的差分格式</h1><h2 id="二维-Poisson-方程及边界条件"><strong>二维 Poisson 方程及边界条件</strong></h2><p>方程为<br>$$<br>-\Delta u = f(x,y) ，(x,y)\in G ，\Gamma=\partial G<br>$$<br>其中<br>$$<br>\Delta u = \sum\frac{\partial^2u}{\partial x_i^2}<br>$$<br><strong>边界条件：</strong></p><p><strong>Dirichlet 条件</strong>：$\displaystyle u|_{\Gamma}=\alpha(x,y)$ ，直接给定边界上函数值</p><p><strong>Neumann 条件</strong>：$\displaystyle \frac{\partial u}{\partial n}|_{\Gamma}=\beta(x,y)$ ，给定边界法向导数</p><p><strong>Robin 条件</strong>：$\displaystyle (\frac{\partial u}{\partial n}+ku)|_{\Gamma}=\gamma(x,y)$ ，是法向导数与函数值的线性组合</p><p>规则区域 $G$ 适合有限差分法，不规则区域适合有限元或有限体积法。面临的困难有网格剖分及其数据结构构建，以及边界条件的妥善处理</p><h2 id="五点差分格式">**五点差分格式 **</h2><p><strong>区域离散化</strong>：设 $(x_i,y_j)$ 为正则内点，对区域进行离散</p><p><strong>导数离散化</strong>：对于 $\displaystyle \Delta u = u_{xx}+u_{yy}$ ，记 $u_{ij}$ 为 $u(x_i,y_j)$ 的近似值，$f_{ij}=f(x_i,y_j)$</p><p>$u_{xx}$ 离散化为<br>$$<br>\displaystyle \frac{u_{i + 1,j}-2u_{ij}+u_{i - 1,j}}{h_1^2}<br>$$<br>这里 $h_1$ 是 $x$ 方向步长</p><p>$u_{yy}$ 离散化为<br>$$<br>\frac{u_{i,j - 1}-2u_{ij}+u_{i,j + 1}}{h_2^2}<br>$$<br>$h_2$ 是 $y$ 方向步长</p><h3 id="差分方程构建"><strong>差分方程构建</strong></h3><p>差分方程<br>$$<br>-\Delta_hu_{ij}=-\left[\frac{u_{i - 1,j}-2u_{ij}+u_{i + 1,j}}{h_1^2}+\frac{u_{i,j - 1}-2u_{ij}+u_{i,j + 1}}{h_2^2}\right]=f_{ij}<br>$$<br>即五点差分格式，可简写为<br>$$<br>-\Delta_hu_h = f_h<br>$$<br>当 $h_1 = h_2 = h$ （正方形网格 ）时</p><p>格式为<br>$$<br>-\frac{1}{h^2}(u_{i - 1,j}+u_{i + 1,j}+u_{i,j - 1}+u_{i,j + 1}-4u_{ij})=f_{ij}<br>$$</p><h3 id="局部截断误差分析"><strong>局部截断误差分析</strong></h3><p>局部截断误差<br>$$<br>R_{ij}(u)=(\Delta u)(x_i,y_j)-\Delta_hu(x_i,y_j)<br>$$<br>利用真解的 Taylor 展开<br>$$<br>\begin{align}<br>\frac{u(x_{i - 1},y_j)-2u(x_i,y_j)+u(x_{i + 1},y_j)}{h_1^2}=u_{xx}(x_i,y_j)+\frac{u_{x}^{(4)}(x_i,y_j)}{12}h_1^2+O(h_1^4)\<br>\frac{u(x_i,y_{j - 1})-2u(x_i,y_j)+u(x_i,y_{j + 1})}{h_2^2}=u_{yy}(x_i,y_j)+\frac{u_{y}^{(4)}(x_i,y_j)}{12}h_2^2+O(h_2^4)<br>\end{align}<br>$$<br>综合可得<br>$$<br>R_{ij}(u)=-\frac{1}{12}[u_{x}^{(4)}h_1^2+u_{y}^{(4)}h_2^2]|_{(x_i,y_j)}+O(h^4)<br>$$<br>表明五点差分格式具有 $O(h^2)$ 阶精度（当 $h_1 = h_2 = h$ 时 ）</p><h3 id="有限体积法推导五点差分格式"><strong>有限体积法推导五点差分格式</strong></h3><p>利用有限体积法推导五点差分格式，涉及矩形网格和对偶剖分，取控制容积 $G_{ij}=ABCD$ (顶点 $A:(x_{i - \frac{1}{2}},y_{i - \frac{1}{2}})$ ，$B:(x_{i + \frac{1}{2}},y_{i - \frac{1}{2}})$ ，$C:(x_{i + \frac{1}{2}},y_{i + \frac{1}{2}})$ ，$D:(x_{i - \frac{1}{2}},y_{i + \frac{1}{2}})$)</p><p>在控制容积 $G_{ij}$ 上，根据方程 $-\Delta u = f$ 进行积分：<br>$$<br>\int_{G_{ij}}-\Delta u dxdy=\int_{G_{ij}}f dxdy<br>$$<br>右侧<br>$$<br>\int_{G_{ij}}f dxdy\approx f_{ij}\cdot h_1\cdot h_2<br>$$<br>左侧利用 Green 公式<br>$$<br>\begin{align}<br>\int_{G_{ij}}-\Delta u dxdy &amp;=-\int_{\partial G_{ij}}\frac{\partial u}{\partial n}dS<br>\&amp;=-(\int_{AB}+\int_{BC}+\int_{CD}+\int_{DA}\frac{\partial u}{\partial n}dS)<br>\end{align}<br>$$<br>其中 $\displaystyle \frac{\partial u}{\partial n}$ 是 $u$ 沿 $\partial G_{ij}$ 的外法向导数</p><p>以 $AB$ 边为例<br>$$<br>\int_{AB}\frac{\partial u}{\partial n}dS\approx\frac{u(x_i,y_{j + 1})-u(x_i,y_j)}{h_2}\cdot h_1<br>$$<br>同理计算其他边，整理可得<br>$$<br>-\left[\frac{u_{i - 1,j}-2u_{ij}+u_{i + 1,j}}{h_1^2}+\frac{u_{i,j - 1}-2u_{ij}+u_{i,j + 1}}{h_2^2}\right]=f_{ij}<br>$$<br>即五点差分格式</p><h3 id="矩形区域离散化及数据结构"><strong>矩形区域离散化及数据结构</strong></h3><p>对于矩形区域 $G=(a,b)\times(c,d)$ ，边界条件 $\displaystyle u|_{\Gamma}=g(x,y)$ ，在 $[a,b]$ 上 $M$ 等分（步长 $h_1$ ），在 $[c,d]$ 上 $N$ 等分（步长 $h_2$ ）进行离散</p><p><strong>数据结构</strong>：将 $u_{ij}$ 按行从下到上排成一个列向量 $\displaystyle u = [u_{11},u_{21},\cdots,u_{M - 1,1},u_{12},\cdots,u_{M - 1,2},\cdots,u_{M - 1,N}]^T$</p><p>按照五点差分格式，对区域内各节点 $(i,j)$ 展开方程。例如：</p><p>对于节点 $(1,1)$ ：<br>$$<br>-h_1^{-2}(-2u_{11}+u_{21})-h_2^{-2}(-2u_{11}+u_{12})=f_{11}+h_2^{-2}u_{10}+h_1^{-2}u_{01}<br>$$<br>这里考虑了边界点对内部点的影响（边界条件代入 ）</p><p>对其他节点也按类似方式展开，并也按 $a_{ij}$ 排列，形成一系列方程</p><h4 id="矩阵结构分析"><strong>矩阵结构分析</strong></h4><p>$\displaystyle \frac{\partial^2}{\partial x^2}$ 部分</p><p>以 $\displaystyle \frac{\partial^2}{\partial x^2}$ 对应的差分部分来看，其矩阵形式具有分块结构。每一块对应 $x$ 方向相邻节点的关系，是一个三对角矩阵形式。整体关于 $\displaystyle \frac{\partial^2}{\partial x^2}$ 部分的矩阵是 $(N - 1)$ 块的分块矩阵 。例如在均匀网格下，对于 $x$ 方向上相邻节点 $i - 1$，$i$，$i + 1$ ，差分格式中 $x$ 方向二阶导数项 $-h_1^{-2}(u_{i - 1,j}-2u_{ij}+u_{i + 1,j})$ 反映在矩阵中对应元素体现相邻节点耦合关系，这些元素按节点顺序排列构成三对角块结构</p><p>其结构大致如下<br>$$<br>-\frac{1}{h^2}\begin{bmatrix}<br>A &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; A &amp; \ddots &amp; \vdots \<br>\vdots &amp; \ddots &amp; \ddots &amp; 0 \<br>0 &amp; \cdots &amp; 0 &amp; A \<br>\end{bmatrix}<em>{(N - 1)\times(N - 1)}<br>$$<br>其中<br>$$<br>A=\begin{bmatrix}<br>-2 &amp; 1 &amp; 0 &amp; \cdots &amp; 0 \<br>1 &amp; -2 &amp; 1 &amp; \ddots &amp; \vdots \<br>0 &amp; 1 &amp; \ddots &amp; \ddots &amp; 0 \<br>\vdots &amp; \ddots &amp; \ddots &amp; -2 &amp; 1 \<br>0 &amp; \cdots &amp; 0 &amp; 1 &amp; -2 \<br>\end{bmatrix}</em>{(M - 1)\times(M - 1)}<br>$$<br>$\displaystyle \frac{\partial^2}{\partial y^2}$ 部分</p><p>同理分析，其结构大致如下<br>$$<br>-\frac{1}{h^2}\begin{bmatrix}<br>-2I &amp; I &amp; 0 &amp; \cdots &amp; 0 \<br>I &amp; -2I &amp; I &amp; \ddots &amp; \vdots \<br>0 &amp; I &amp; \ddots &amp; \ddots &amp; 0 \<br>\vdots &amp; \ddots &amp; \ddots &amp; -2I &amp; I \<br>0 &amp; \cdots &amp; 0 &amp; I &amp; -2I \<br>\end{bmatrix}<em>{(N - 1)\times(N - 1)}<br>$$<br>其中<br>$$<br>I=\begin{bmatrix}<br>1 &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; 1 &amp; \ddots &amp; \vdots \<br>\vdots &amp; \ddots &amp; \ddots &amp; 0 \<br>0 &amp; \cdots &amp; 0 &amp; 1 \<br>\end{bmatrix}</em>{(N - 1)\times(N - 1)}<br>$$</p><p>通过克罗内克积（$\otimes$ ）构建相关矩阵：</p><p>定义<br>$$<br>d_{xx}=\frac{1}{h_1^2}\begin{bmatrix}-2&amp;1\1&amp;-2&amp;\ddots\&amp;\ddots&amp;\ddots&amp;1\&amp;&amp;1&amp;-2\end{bmatrix}<em>{(M - 1)\times(M - 1)}<br>$$<br>$I</em>{N - 1}$ 为 $(N - 1)$ 阶单位矩阵<br>$$<br>\begin{align}<br>D_{xx}&amp;=I_{N - 1}\otimes d_{xx}\<br>&amp;=\frac{1}{h_2^2}\begin{bmatrix}<br>d_{xx} &amp; 0 &amp; \cdots &amp; 0 \<br>0 &amp; d_{xx} &amp; \ddots &amp; \vdots \<br>\vdots &amp; \ddots &amp; \ddots &amp; 0 \<br>0 &amp; \cdots &amp; 0 &amp; d_{xx} \<br>\end{bmatrix}<br>\end{align}<br>$$<br>得到 $\displaystyle \frac{\partial^2}{\partial x^2}$ 差分部分的矩阵形式</p><p>类似地，对于 $\displaystyle \frac{\partial^2}{\partial y^2}$ ，定义<br>$$<br>d_{yy}=\frac{1}{h_2^2}\begin{bmatrix}-2&amp;1\1&amp;-2&amp;\ddots\&amp;\ddots&amp;\ddots&amp;1\&amp;&amp;1&amp;-2\end{bmatrix}<em>{(N - 1)\times(N - 1)}<br>$$<br>$I</em>{M - 1}$ 为 $(M - 1)$ 阶单位矩阵<br>$$<br>\begin{align}<br>D_{yy}&amp;=d_{yy}\otimes I_{M - 1}\<br>&amp;=\frac{1}{h_2^2}\begin{bmatrix}-2I_{M - 1}&amp;I_{M - 1}\I_{M - 1}&amp;-2I_{M - 1}&amp;\ddots\&amp;\ddots&amp;\ddots&amp;I_{M - 1}\&amp;&amp;I_{M - 1}&amp;-2I_{M - 1}\end{bmatrix}<br>\end{align}<br>$$</p><h4 id="displaystyle-frac-partial-2-partial-x-2-frac-partial-2-partial-y-2-的离散化矩阵">$\displaystyle -(\frac{\partial^2}{\partial x^2}+\frac{\partial^2}{\partial y^2})$ 的离散化矩阵</h4><p>由前面构建的 $D_{xx}$ 和 $D_{yy}$ ，可得<br>$$<br>A = -(D_{xx}+D_{yy})<br>$$<br>从 $D_{xx}$ 和 $D_{yy}$ 的结构可知，$A$ 是五对角矩阵。这是因为 $D_{xx}$ 体现 $x$ 方向节点耦合，$D_{yy}$ 体现 $y$ 方向节点耦合，二者叠加后，矩阵 $A$ 中每个节点除了与上下左右相邻节点有耦合关系（对应五对角结构 ）外，还可能因边界条件和离散方式存在一些特殊关联</p><p><strong>右端项向量 $\overline F$ 的处理</strong></p><p>通过特定规则对原右端项向量 $F$ 进行修改得到 $\overline{F}$ ，如<br>$$<br>\begin{align}<br>\overline{F}(1,:)&amp;=F(1,:)+h_1^{-2}[g_{0,1},\cdots,g_{0,N - 1}]\<br>\overline{F}(:,1)&amp;=F(:,1)+h_2^{-2}[g_{1,0},\cdots,g_{M - 1,0}]^T\<br>\overline{F}(M-1,:)&amp;=F(M-1,:)+h_1^{-2}[g_{0,1},\cdots,g_{0,N - 1}]\<br>\overline{F}(:,N-1)&amp;=F(:,N-1)+h_2^{-2}[g_{1,N},\cdots,g_{M - 1,N}]^T<br>\end{align}<br>$$<br>这些操作是为了将边界条件 $g(x,y)$ 合理融入右端项，使得离散后的方程组 $Au = \overline{F}$ 能准确反映原二维 Poisson 方程及边界条件，从而保证数值解的准确性</p><h4 id="矩阵形式方程求解"><strong>矩阵形式方程求解</strong></h4><p><strong>向量形式</strong>：将 $u_{ij}$ 按特定方式排列成向量 $u$ ，方程组为 $Au = \overline{F}$</p><p><strong>矩阵形式</strong>：把 $u_{ij}$ 看作矩阵 $U$ ，以第一列为例，有<br>$$<br>-d_{xx}\cdot U(:,1)-U\cdot d_{yy}(:,1)=\overline{F}(:,1)<br>$$<br>一般形式为<br>$$<br>-d_{xx}\cdot U - U\cdot d_{yy}=\overline{F}<br>$$<br>$U$ 是 $(M - 1)\times(N - 1)$ 矩阵 。当边界条件 $g(x,y)\equiv0$ 时，$\overline{F}=F$ 。这种矩阵 - 向量形式的方程便于利用线性代数中的求解方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第二章（1）</title>
      <link href="/2025/05/22/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A33/"/>
      <url>/2025/05/22/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A33/</url>
      
        <content type="html"><![CDATA[<h1>椭圆型方程有限差分法求解</h1><p><strong>椭圆型方程及有限差分法基本步骤</strong></p><p>对于椭圆型方程<br>$$<br>\begin{cases}<br>-\Delta u = f &amp; \Omega\subset\mathbb{R}^d\u = g &amp; \partial\Omega<br>\end{cases}<br>$$<br>其中<br>$$<br>\Delta u=\sum\frac{\partial^2u}{\partial x_i^2}<br>$$<br>有限差分法的基本步骤：</p><p><strong>1、区域离散化</strong>：划分网格，将求解区域离散成节点</p><p><strong>2、微分算子离散化</strong>：用差分近似导数</p><p><strong>3、离散方程组求解</strong>：求解得到的离散方程组</p><h1><strong>一维情形直接离散化方法</strong></h1><h2 id="区域离散化"><strong>区域离散化</strong></h2><p>对于方程<br>$$<br>\begin{cases}<br>Lu=-u’’ + q(x)u = f(x),\quad a &lt; x &lt; b,q(x)\geq0\<br>u(a)=\alpha, u(b)=\beta \quad (Dirichlet 边值条件)</p><p>\end{cases}<br>$$</p><p>将 $[a,b]$ 分成 $N$ 等分，$\displaystyle h=\frac{b - a}{N}$ ，节点 $x_i = a+ih$ ，$i = 0,1,\cdots,N$</p><h2 id="微分算子离散化"><strong>微分算子离散化</strong></h2><p>利用 Taylor 展开<br>$$<br>\begin{align}<br>u(x_{i + h}) &amp;=u(x_i)+u’(x_i)h+\frac{u’‘(x_i)}{2!}h^2+\frac{u’‘’(x_i)}{3!}h^3+\frac{u^{(4)}(x_i)}{4!}h^4+O(h^5)\<br>u(x_{i - h})&amp;=u(x_i)-u’(x_i)h+\frac{u’‘(x_i)}{2!}h^2-\frac{u’‘’(x_i)}{3!}h^3+\frac{u^{(4)}(x_i)}{4!}h^4+O(h^5)\</p><p>\end{align}<br>$$<br>两式相加并整理得<br>$$<br>\frac{u(x_{i + h})+u(x_{i - h})-2u(x_i)}{h^2}=u’‘(x_i)+\frac{u^{(4)}(x_i)}{12}h^2+O(h^3)<br>$$<br>记 $R_i(u)$ 为截断误差。原方程在 $x_i$ 处写成<br>$$<br>-\frac{u(x_{i - h})-2u(x_i)+u(x_{i + h})}{h^2}+q(x_i)u(x_i)=f(x_i)+R_i(u)<br>$$<br>舍去 $R_i(u)$ 得差分方程（中心差分格式 ）<br>$$<br>-\frac{u_{i - 1}-2u_i+u_{i + 1}}{h^2}+q_iu_i = f_i\<br>q_i = q(x_i)\<br>f_i = f(x_i)<br>$$<br>微分算子 $L$ 记为：<br>$$<br>Lu=-u’‘+q(x)u<br>$$<br>微分算子 $L_h$ 记为：<br>$$<br>L_h[u(x_i)]=-\frac{u(x_{i - h})-2u(x_i)+u(x_{i + h})}{h^2}+q(x_i)u(x_i)<br>$$<br>截断误差 $R_i(u)$ 记为：<br>$$<br>\begin{align}<br>R_i(u) &amp;=L_h[u(x_i)]-<a href="x_i">Lu</a>\<br>&amp;=-\frac{u(x_{i - h})-2u(x_i)+u(x_{i + h})}{h^2}+u’’<br>\end{align}<br>$$</p><h2 id="离散方程组求解"><strong>离散方程组求解</strong></h2><p>离散化方程组为<br>$$<br>\begin{cases}\displaystyle -\frac{u_{i - 1}-2u_i+u_{i + 1}}{h^2}+q_iu_i = f_i, &amp; i = 1,\cdots,N - 1\u_0=\alpha, u_N=\beta\end{cases}<br>$$<br>写成矩阵向量形式<br>$$<br>AU = F\<br>U=(u_1,u_2,\cdots,u_{N - 1})^T<br>$$<br>其中<br>$$<br>A=\begin{bmatrix}\displaystyle<br>\frac{2}{h^2}+q_1 &amp;\displaystyle  -\frac{1}{h^2} &amp; 0      &amp; \cdots &amp; 0 \<br>\displaystyle -\frac{1}{h^2} &amp; \displaystyle \frac{2}{h^2}+q_2 &amp;\displaystyle  -\frac{1}{h^2}  &amp; \ddots &amp; \vdots \<br>0     &amp; \displaystyle -\frac{1}{h^2} &amp; \ddots &amp; \ddots &amp; 0 \<br>\vdots&amp; \ddots&amp; \ddots &amp;\displaystyle  \frac{2}{h^2}+q_{N-2}&amp; \displaystyle -\frac{1}{h^2} \<br>0     &amp; \cdots&amp; 0      &amp; \displaystyle -\frac{1}{h^2} &amp; \displaystyle \frac{2}{h^2}+q_{N-1}<br>\end{bmatrix}<br>$$<br>即<br>$$<br>-\frac{1}{h^2}\begin{bmatrix}<br>-2 &amp; 1 &amp; 0      &amp; \cdots &amp; 0 \<br>1 &amp; -2 &amp; 1  &amp; \ddots &amp; \vdots \<br>0     &amp; 1 &amp; \ddots &amp; \ddots &amp; 0 \<br>\vdots&amp; \ddots&amp; \ddots &amp; -2&amp; 1 \<br>0     &amp; \cdots&amp; 0      &amp; 1&amp; -2<br>\end{bmatrix}<br>\begin{bmatrix}<br>u_1 \<br>u_2 \<br>\vdots \<br>\vdots \<br>\vdots \<br>u_{N-1}<br>\end{bmatrix}+\begin{bmatrix}<br>q_1 &amp; 0      &amp; \cdots &amp; 0 \<br>0   &amp; q_2    &amp; \ddots &amp; \vdots \<br>\vdots &amp; \ddots &amp; \ddots &amp; 0 \<br>0   &amp; \cdots &amp; 0      &amp; q_{N-1}<br>\end{bmatrix}\begin{bmatrix}<br>u_1 \<br>u_2 \<br>\vdots \<br>\vdots \<br>u_{N-1}<br>\end{bmatrix}=\begin{bmatrix}<br>\displaystyle  f_1+\frac{\alpha}{h^2} \<br>\displaystyle   f_2 \<br>\vdots \<br>\vdots \<br>f_{N-2}\<br>\displaystyle f_{N-1}+\displaystyle \frac{\beta}{h^2}<br>\end{bmatrix}<br>$$</p><h3 id="方法一、追赶法（Thomas-法）"><strong>方法一、追赶法（Thomas 法）</strong></h3><p>对于三对角方程组<br>$$<br>-a_iU_{i - 1}+b_iU_i - c_iU_{i + 1}=d_i \quad \quad i = 1,\cdots,N - 1\<br>u_0 = 0 \quad u_N = 0<br>$$<br>且<br>$$<br>a_i&gt;0 \quad b_i&gt;0 \quad c_i&gt;0 \quad b_i&gt;a_i + c_i \quad (对角占优 )<br>$$<br>通过逐步消元得到<br>$$<br>U_i - e_iU_{i + 1}=f_i<br>$$<br>其中<br>$$<br>\begin{align}<br>e_i=\frac{c_i}{b_i - a_ie_{i - 1}}\<br>f_i=\frac{d_i + a_if_{i - 1}}{b_i - a_ie_{i - 1}}\<br>\end{align}<br>$$<br>$i = 1,\cdots,N - 1$ ，从 $i = 1$ 开始计算，令 $e_0 = 0$ ，$f_0 = 0$ ，最后回代求解 $U_i$ 。 这种方法利用三对角矩阵的结构特点，高效求解离散方程组</p><h3 id="方法二、迭代法"><strong>方法二、迭代法</strong></h3><p>除追赶法外，还可使用迭代法（如 Jacobi、Gauss - Seidel 等 ）求解离散方程组</p><p>以方程<br>$$<br>\begin{cases}-u’’ + xu=(x - 1)e^x\u(0)=1, u(1)=e\end{cases}<br>$$</p><p>（真解 $u(x)=e^x$ ）为例</p><p>通过中心差分格式得到<br>$$<br>-\frac{u_{i - 1}-2u_i+u_{i + 1}}{h^2}+x_iu_i=(x_i - 1)e^{x_i}<br>$$<br>整理为<br>$$<br>-a_iu_{i - 1}+b_iu_i - c_iu_{i + 1}=d_i<br>$$<br>其中<br>$$<br>\begin{align}<br>a_i = \frac{1}{h^2} ,\quad b_i=\frac{2}{h^2}+x_i ,\quad c_i=\frac{1}{h^2} \<br>d_i=(x_i - 1)e^{x_i}+\frac{u_0}{h^2} \quad (i = 1 时)\<br>d_{N - 1}=(x_{N - 1} - 1)e^{x_{N - 1}}+\frac{u_N}{h^2}<br>\end{align}<br>$$<br>迭代法通过不断迭代更新未知量的值，逐步逼近方程组的解</p><p><strong>理论问题</strong></p><p><strong>解的存在唯一性</strong>：分析差分方程是否存在唯一解，常通过研究离散方程组系数矩阵的性质（如对角占优、正定等 ）来判断。例如，若系数矩阵严格对角占优，可利用相关定理证明方程组存在唯一解</p><p><strong>收敛性及收敛速度</strong>：研究当 $h \to 0$ 时，数值解 $u_i$ 是否收敛到精确解 $u(x_i)$ 以及收敛速度。涉及在不同范数意义下的收敛情况。通过分析截断误差、稳定性等因素，推导收敛阶数，比如中心差分格式在合适条件下对二阶导数的逼近具有 $O(h^2)$ 阶的收敛速度</p><p><strong>记号与概念</strong></p><p><strong>网格点</strong>：$I_h$ 表示网格内点，$\overline{I}_h$ 表示网格内点 + 边界点</p><p><strong>网格函数及其范数</strong>：定义网格函数 $u_h$</p><p>$C$ 范数<br>$$<br>\displaystyle |u_h|<em>C=\max</em>{1\leq i\leq N - 1}|u_i|<br>$$<br>用于衡量网格函数在离散点上的最大绝对值</p><p>$L^2$ 范数<br>$$<br>\displaystyle |u_h|<em>0=(\sum</em>{i = 1}^{N - 1}h u_i^2)^{\frac{1}{2}}<br>$$<br>从离散点加权平方和角度衡量函数大小</p><p>$H^1$ 范数<br>$$<br>\displaystyle |u(x)|_{H^1}=(\int_a^b u^2(x)dx+\int_a^b (u’(x))^2dx)^{\frac{1}{2}}<br>$$<br>用于衡量函数及其一阶导数在区间 $[a,b]$ 上的综合 “大小”</p><p>$H^1$ 半范数<br>$$<br>\displaystyle |u_h|<em>1=(\sum</em>{i = 1}^{N - 1}h\cdot(\frac{u_i - u_{i + 1}}{h})^2)^{\frac{1}{2}}<br>$$<br>反映网格函数离散导数的某种度量</p><p>对于网格函数 $u_h$ ，其 $H^1$ 范数<br>$$<br>\displaystyle |u_h|_1=(|u_h|_0^2+|u_h|_1^2)^{\frac{1}{2}}<br>$$<br>是对离散函数在离散意义下类似的度量</p><h2 id="相容性、收敛性与稳定性定义"><strong>相容性、收敛性与稳定性定义</strong></h2><p><strong>相容性</strong>：对于某一类光滑函数 $u \in \mathcal{M}$ ，若 $\displaystyle \lim_{h \to 0}|R_h(u)| = 0$ ，则称有限差分格式具有相容性。这里 $R_h(u)$ 是截断误差，反映了差分格式对原微分方程的逼近程度，当步长 $h$ 趋于 0 时，截断误差趋于 0 ，意味着差分格式在极限意义下趋近原方程</p><p><strong>收敛性</strong>：当 $h$ 充分小后，若差分方程的解 $u_h$ 存在，且在某范数下 $\displaystyle \lim_{h \to 0}|u_h - u| = 0$ ，则称差分格式收敛。即随着步长减小，数值解在特定范数度量下趋近于精确解</p><p>其中<strong>真解满足的离散方程</strong>为<br>$$<br>L_h[u(x_i)]=f_i+R_i(u)<br>$$</p><p><strong>数值解满足的离散方程</strong>为<br>$$<br>L_hu_i=f_i<br>$$</p><p><strong>误差满足的离散方程</strong>为<br>$$<br>L_he_i=R_i(u)<br>$$<br><strong>稳定性</strong>：对于差分方程 $$\displaystyle \begin{cases}L_hu_i = f_i\u_0 = u_N = 0\end{cases}$$ ，若存在与网格 $I_h$ 及 $f_h$ 无关的常数 $M$ 和 $h_0$ ，当 $0 &lt; h &lt; h_0$ 时，有 $|u_h| \leq M|f_h|$ ，则称差分方程关于右端稳定。稳定性保证了在一定条件下，右端项的扰动不会引起解的过大变化，且可推出<strong>差分方程解唯一</strong>，以及误差 $e_h$ 满足 $\displaystyle |e_h| \leq M|R_h(u)|$</p><h3 id="重要定理"><strong>重要定理</strong></h3><p>定理：若解充分光滑，相容性 + 稳定性 $\Rightarrow$ 收敛性（收敛阶与截断误差阶相同 ）。这是有限差分法的关键结论，表明在函数光滑性满足要求时，只要差分格式同时具备相容性和稳定性，就必然收敛，且收敛阶数与截断误差阶数一致</p><h1>一维差分格式</h1><h2 id="直接差分法">直接差分法</h2><p><strong>一维方程及问题设定</strong></p><p>考虑方程<br>$$<br>\begin{cases}<br>\displaystyle Lu = -\frac{d}{dx}(p(x)\frac{du}{dx})+r(x)\frac{du}{dx}+q(x)u = f(x),&amp;a &lt; x &lt; b\u(a)=\alpha, u(b)=\beta<br>\end{cases}<br>$$<br>其中 $p(x)\geq p_{min}&gt;0$</p><h3 id="直接差分法步骤"><strong>直接差分法步骤</strong></h3><p><strong>区域离散化</strong>：可采用不均匀网格，将区间 $[a,b]$ 离散为 $a = x_0 &lt; x_1 &lt; \cdots &lt; x_N = b$ ，记 $h_i = x_i - x_{i - 1}$ ，$h=\max h_i$ ，引入对偶剖分 $\displaystyle a = x_0 &lt; x_{\frac{1}{2}} &lt; x_1 &lt; \cdots &lt; x_{N - \frac{1}{2}} &lt; x_N = b$ ，$x_{i - \frac{1}{2}}=\frac{1}{2}(x_{i - 1}+x_i)$</p><p><strong>导数项离散化尝试</strong>：</p><p><strong>尝试 1</strong>：令 $v = p(x)u’(x)$ ，用<br>$$<br>\displaystyle \frac{v(x_{i + 1})-v(x_{i - 1})}{h_{i + 1}+h_i}=\frac{p(x_{i + 1})u’(x_{i + 1})-p(x_{i - 1})u’(x_{i - 1})}{h_{i + 1}+h_i}<br>$$<br>近似 $v’(x_i)$ ，但 $u’(x_{i + 1})$ ，$u’(x_{i - 1})$ 还需进一步离散，会涉及 $x_{i + 2}$ ，$x_{i - 2}$ 等节点</p><p><strong>尝试 2</strong>：引入中点 $x_{i\pm\frac{1}{2}}$ ，用<br>$$<br>\frac{v(x_{i + \frac{1}{2}})-v(x_{i - \frac{1}{2}})}{\frac{1}{2}h_{i + 1}+\frac{1}{2}h_i}=\frac{p(x_{i +\frac{1}{2} })u’(x_{i + \frac{1}{2}})-p(x_{i - \frac{1}{2}})u’(x_{i - \frac{1}{2}})}{\frac{1}{2}(h_{i + 1}+h_i)}<br>$$<br>近似 $v’(x_i)$ ，其中<br>$$<br>u’(x_{i + \frac{1}{2}})\approx\frac{u(x_{i + 1})-u(x_i)}{h_{i + 1}}<br>$$<br>$\displaystyle u’(x_{i - \frac{1}{2}})$ 同理 。这种方式在对 $(p(x)u’)'(x_i)$ 进行差分离散时，主要用到 $x_{i - 1}$ ，$x_i$ ，$x_{i + 1}$ 三个节点，相比尝试 1 更具优势，后续可在此基础上进一步构建差分格式，将原微分方程转化为离散的差分方程，进而求解</p><h3 id="差分格式构建"><strong>差分格式构建</strong></h3><p>基于前面的离散化尝试，定义<br>$$<br>[u]<em>i\approx\frac{u</em>{i + 1}-u_{i - 1}}{h_{i + 1}+h_i}\<br>[(p(x)u’)‘]<em>i\approx\frac{p</em>{i+\frac{1}{2}}[u]<em>{i+\frac{1}{2}}-p</em>{i - \frac{1}{2}}[u]<em>{i - \frac{1}{2}}}{\frac{1}{2}(h_i+h</em>{i + 1})}<br>$$<br>进一步得到原微分方程的差分格式：<br>$$<br>\begin{align}<br>L_hu_i = -\frac{2}{h_i+h_{i + 1}}[p_{i+\frac{1}{2}}\frac{u_{i + 1}-u_i}{h_{i + 1}}&amp;-p_{i - \frac{1}{2}}\frac{u_i - u_{i - 1}}{h_i}]+\frac{r_i}{h_i+h_{i + 1}}(u_{i + 1}-u_{i - 1})+q_iu_i = f_i\<br>i &amp;= 1,\cdots,N - 1<br>\end{align}<br>$$<br>边界条件为 $u_0=\alpha$ ，$u_N=\beta$ 。该差分格式可写成矩阵形式 $AU = F$ ，其中 $A = A_1+A_2+A_3$ 是三对角矩阵。一般情况下<br>$$<br>-(p(x)u’)‘+ru’+qu<br>$$<br>不是自伴算子，$A$ 为非对称矩阵；若 $r(x)\equiv0$ ，则是自伴算子，此时若网格均匀，$A$ 对称，若网格不均匀，$A$ 不对称但可对称化</p><h3 id="局部截断误差分析"><strong>局部截断误差分析</strong></h3><p><strong>对 $u’(x_i)$ 进行 Taylor 展开分析：</strong></p><p>由<br>$$<br>\begin{align}<br>u(x_{i + h_{i + 1}})&amp;=u(x_i)+u’(x_i)h_{i + 1}+\frac{u’‘(x_i)}{2!}h_{i + 1}^2+\frac{u’‘’(x_i)}{3!}h_{i + 1}^3+\cdots\<br>u(x_{i - h_i})&amp;=u(x_i)-u’(x_i)h_i+\frac{u’‘(x_i)}{2!}h_i^2-\frac{u’‘’(x_i)}{3!}h_i^3+\cdots<br>\end{align}<br>$$<br>可得<br>$$<br>u’(x_i)\approx\frac{u(x_{i + h_{i + 1}})-u(x_{i - h_i})}{h_{i + 1}+h_i}=u’(x_i)+\frac{u’‘(x_i)}{2}(h_{i + 1}-h_i)+O(h^2)<br>$$<br><strong>对 $(p(x)u’(x))'$ 进行 Taylor 展开分析</strong>：<br>$$<br>\begin{align}<br>(p(x)u’(x))‘(x_i)&amp;\approx\frac{2}{h_i+h_{i + 1}}[p_{i+\frac{1}{2}}\frac{u(x_{i + 1})-u(x_i)}{h_{i + 1}}-p_{i - \frac{1}{2}}\frac{u(x_i)-u(x_{i - 1})}{h_i}]\<br>&amp;=(pu’)‘(x_i)+\frac{h_{i + 1}-h_i}{4}(pu’)‘’(x_i)+\frac{h_{i + 1}-h_i}{12}p(x_i)u’‘’(x_i)+O(h^2)<br>\end{align}<br>$$<br><strong>综合截断误差</strong>：<br>$$<br>R_i(u)=(h_{i + 1}-h_i)[\frac{1}{4}(pu’)‘’(x_i)+\frac{1}{12}p(x)u’‘’(x_i)-\frac{1}{2}r(x_i)u’'(x_i)]+O(h^2)<br>$$<br><strong>网格不均匀时</strong>：截断误差 $R_i(u)=O(h)$ 。这是因为在不均匀网格下，节点间距不一致，在 Taylor 展开分析导数近似时，由于步长差异，高阶项不能完全抵消，导致整体误差阶数为 $O(h)$ ，精度相对较低</p><p><strong>网格均匀时</strong>：截断误差 $R_i(u)=O(h^2)$ 。当网格均匀，即 $h_i = h$ （$i = 1,\cdots,N - 1$ ）时 ，在对导数进行差分离散并通过 Taylor 展开分析误差过程中，一些含 $h$ 的高阶项相互抵消，使得误差阶数提高到 $O(h^2)$ ，差分格式具有更高精度</p><p><strong>均匀网格下的差分格式形式</strong></p><p>此时差分格式为<br>$$<br>L_hu_i = -\frac{1}{h^2}(p_{i+\frac{1}{2}}u_{i + 1}-(p_{i+\frac{1}{2}}+p_{i - \frac{1}{2}})u_i+p_{i - \frac{1}{2}}u_{i - 1})+\frac{r_i}{2h}(u_{i + 1}-u_{i - 1})+q_iu_i = f_i<br>$$<br>当 $p(x)\equiv1$ 时，格式中<br>$$<br>-\frac{1}{h^2}(p_{i+\frac{1}{2}}u_{i + 1}-(p_{i+\frac{1}{2}}+p_{i - \frac{1}{2}})u_i+p_{i - \frac{1}{2}}u_{i - 1})<br>$$<br>这部分就是常见的中心差分形式，用于逼近二阶导数，体现了均匀网格下差分格式的简洁性和规律性，也反映出在特定条件下格式与经典差分形式的联系</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第一章（2）</title>
      <link href="/2025/05/21/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A32/"/>
      <url>/2025/05/21/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A32/</url>
      
        <content type="html"><![CDATA[<h1>Runge - kutta 法</h1><p>对于初值问题<br>$$<br>\begin{cases}u’ = f(t, u)\u(t_0)=u_0\end{cases}<br>$$</p><h2 id="中点公式推导"><strong>中点公式推导</strong></h2><p>首先有 $\displaystyle u(t_1)\approx u(t_0)+hf(t_0+\frac{h}{2},u(t_0+\frac{h}{2}))$ ，这里局部截断误差为 $O(h^3)$ 。但 $u(t_0+\frac{h}{2})$ 未知，用 Euler 法近似：<br>$$<br>\displaystyle u(t_0+\frac{h}{2})\approx u(t_0)+\frac{h}{2}f(t_0,u_0)<br>$$<br>代入可得<br>$$<br>u(t_1)\approx u(t_0)+hf(t_0+\frac{h}{2},u(t_0)+\frac{h}{2}f(t_0,u_0))<br>$$<br>引入记号：<br>$$<br>K_1 = f(t_0,u_0)\<br>K_2 = f(t_0+\frac{h}{2},u_0+\frac{h}{2}K_1)<br>$$</p><p>则数值解<br>$$<br>u_1 = u_0+hK_2<br>$$</p><h2 id="数值解与精确解展开及误差分析"><strong>数值解与精确解展开及误差分析</strong></h2><p><strong>数值解展开</strong>：<br>$$<br>u_1 = u_0+hf(t_0,u_0)+\frac{h^2}{2}(f_t + f_uf)(t_0,u_0)+\frac{h^3}{8}(f_{tt}+2f_{tu}f+\cdots)(t_0,u_0)+\cdots<br>$$<br><strong>精确解展开</strong>：<br>$$<br>\begin{align}<br>u(t_1)&amp;=u(t_0)+hu’(t_0)+\frac{h^2}{2!}u^{(2)}(t_0)+\frac{h^3}{3!}u^{(3)}(t_0)+\cdots\&amp;=u(t_0)+hf(t_0,u_0)+\frac{h^2}{2}(f_t + f_uf)(t_0,u_0)+\frac{h^3}{6}(f_{tt} + 2f_{tu}f +f_{uu}f^2 +f_uf_t+f_u^2f)(t_0,u_0)+\cdots<br>\end{align}<br>$$</p><p>所以 $|u(t_1)-u_1| = O(h^3)$ ，即该 Runge - kutta 方法是二阶的</p><h2 id="一般-m-点-Runge-kutta-法思路"><strong>一般 m 点 Runge - kutta 法思路</strong></h2><p>已知 $\displaystyle u(t + h)=u(t)+\int_{t}^{t + h}f(\tau,u(\tau))d\tau$ 。在区间 $[t,t + h]$ 上取 $m$ 个点 $t = t_1\leq t_2\leq\cdots\leq t_m = t + h$</p><p>类似于多步法，有近似式 $\displaystyle u(t + h)\approx u(t)+h\sum_{i = 1}^{m}c_if(t_i,u(t_i))$ ，其中 $\displaystyle k_i = f(t_i,u(t_i))$ 。但 $u(t_i)$ 未知，需进行近似</p><p>利用 Euler 法：<br>$$<br>\begin{align}<br>u(t_2)&amp;=u(t_1)+(t_2 - t_1)k_1 \<br>k_1 &amp;= f(t_1,u(t_1))\<br>\<br>u(t_3)&amp;=u(t_2)+(t_3 - t_2)k_2 \<br>k_2 &amp;= f(t_2,u(t_2))\approx f(t_2,u(t)+(t_2 - t_1)k_1)\<br>\<br>u(t_4)&amp;=u(t_3)+(t_4 - t_3)k_3 \<br>k_3 &amp;= f(t_3,u(t_3))\approx\cdots</p><p>\end{align}<br>$$<br>故<br>$$<br>\begin{align}<br>u(t_3)&amp;\approx u(t)+(t_2 - t_1)k_1+(t_3 - t_2)k_2 \</p><p>u(t_4)&amp;\approx u(t)+(t_2 - t_1)k_1+(t_3 - t_2)k_2+(t_4 - t_3)k_3 \<br>\vdots\<br>u(t_m)&amp;\approx u(t)+(t_2 - t_1)k_1+\cdots+(t_m - t_{m - 1})k_{m - 1} \<br>\end{align}<br>$$<br>即通过前一步的近似值和当前点的斜率 $k_i$ 逐步递推后续点的函数值近似</p><p>用类似多步法的思想<br>$$<br>\begin{align}<br>u(t_i)&amp;\approx u(t_1)+\rho_{i1}k_1+\cdots+\rho_{i,i - 1}k_{i - 1}\<br>&amp;=u(t_1)+h(b_{i1}k_1+\cdots+b_{i,i - 1}k_{i - 1})<br>\end{align}<br>$$<br>其中 $\displaystyle \rho_{i1}+\cdots+\rho_{i,i - 1}=t_i - t_1$</p><p><strong>引入记号简化</strong></p><p>引入 $\displaystyle t_i = t + a_ih$ ，$i = 2,3,\cdots,m$ ，$t_1 = t$ ，以及 $\displaystyle b_{ij}=\frac{\rho_{ij}}{h}$ ，$i = 2,\cdots,m$ ，$j = 1,\cdots,i - 1$</p><h2 id="Runge-kutta-法一般形式（m-级）">Runge - kutta 法一般形式（m 级）</h2><p><strong>格式构建</strong></p><p>从 $f(t_1,u_1)=k_1$ 开始，依次通过<br>$$<br>\begin{align}<br>k_1 &amp;= f(t_1,u_1)\<br>k_2 &amp;= f(t_2,u(t_2))\approx f(t_1 + a_2h,u_1+hb_{21}k_1)\<br>k_3 &amp;= f(t_1,u(t_3))\approx f(t_1 + a_3h,u_1+h(b_{31}k_1 + b_{32}k_2))\<br>\vdots\<br>k_m &amp;= f(t_1,u(t_m))\approx f(t_1 + a_mh,u_1+h(b_{m1}k_1+\cdots + b_{m,m - 1}k_{m - 1}))<br>\end{align}<br>$$<br>最终数值解<br>$$<br>\displaystyle u(t + h)\approx u_1+h(c_1k_1+\cdots + c_mk_m)=\overline{u}<br>$$<br>其中满足<br>$$<br>h(b_{i1}+\cdots + b_{i,i - 1}) = a_i\cdot h=t_i - t_1<br>$$</p><p>即<br>$$<br>b_{i1}+\cdots + b_{i,i - 1}=a_i<br>$$</p><h2 id="待定系数法（以三级三阶为例）"><strong>待定系数法（以三级三阶为例）</strong></h2><p><strong>精确解展开</strong>：<br>$$<br>\begin{align}<br>u(t + h)&amp;=u(t)+hu’(t)+\cdots+\frac{h^3}{3!}u^{(3)}(t)+\cdots\<br>&amp;=u(t)+hf(t,u)+\frac{h^2}{2}(f_t + f_uf)(t,u)+\frac{h^3}{6}(f_{tt}+2f_{tu}f + f_{uu}f^2 + f_uf_t +f_u^2f)(t,u)+\cdots<br>\end{align}<br>$$<br>记<br>$$<br>F = f_t + f_uf\<br>G = f_{tt}+2f_{tu}f + f_{uu}f^2<br>$$</p><h2 id="Runge-kutta-格式展开："><strong>Runge - kutta 格式展开</strong>：</h2><p>$$<br>\begin{align}<br>\displaystyle \overline{u}&amp;=u(t)+h(c_1k_1+\cdots + c_mk_m)\<br>k_1 &amp;= f(t_1,u(t_1)) = f\<br>k_2 &amp;= f(t_1 + a_2h,u_1+hb_{21}k_1)\<br>&amp;=f+ha_2(f_t + f_uf)+\frac{h^2a_2^2}{2}(f_{tt}+2f_{tu}f + f_{uu}f^2)+o(h^3)\<br>&amp;=f+ha_2F+\frac{h^2a_2^2}{2}G+o(h^3)\<br>k_3 &amp;= f+ha_3F+h^2(a_3b_{32}f_uF+\frac{1}{2}a_3^2G)+o(h^3)</p><p>\end{align}<br>$$</p><p>其中 $b_{21}=a_2$</p><p>对 $\displaystyle h(c_1k_1 + c_2k_2 + c_3k_3)$ 展开并与精确解 $u(t + h)$ 的展开式对比 $h$ 同次幂系数：</p><p>令<br>$$<br>F = f_t + f_uf\<br>G = f_{tt}+2f_{tu}f + f_{uu}f^2<br>$$<br>展开后得到方程组<br>$$<br>\begin{cases}c_1 + c_2 + c_3 = 1\c_2a_2 + c_3a_3=\frac{1}{2}\c_2a_2^2 + c_3a_3^2=\frac{1}{3}\c_3a_3b_{32}=\frac{1}{6}\end{cases}<br>$$<br>这里有 6 个未知数，4 个方程，存在 2 个自由参数，可确定三级三阶方法</p><p><strong>经典四阶 Runge - kutta 法格式</strong><br>$$<br>\begin{cases}u_{n + 1}=u_n+\frac{h}{6}(k_1 + 2k_2 + 2k_3 + k_4)\k_1 = f(t_n,u_n)\k_2 = f(t_n+\frac{h}{2},u_n+\frac{h}{2}k_1)\k_3 = f(t_n+\frac{h}{2},u_n+\frac{h}{2}k_2)\k_4 = f(t_n + h,u_n+hk_3)\end{cases}<br>$$<br>注：Runge - kutta 法是单步法，从 $u_n$ 计算 $u_{n + 1}$</p><p><strong>与多步法比较及单步法特性</strong></p><p><strong>线性单步法</strong>：关于 $f$ 线性时，最高为二阶（$O(h^2)$ ）</p><p><strong>非线性单步法（如 Runge - kutta 法 ）</strong>：因为 $k_1 + k_2 + 2k_3 + k_4$ 不是 $f(t_n,u_n)$ 的线性函数，所以能有更高阶数</p><p><strong>Taylor 展开法</strong><br>$$<br>\begin{align}<br>u(t_1)&amp;=u(t_0)+u’(t_0)h+\frac{u’‘(t_0)}{2!}h^2+\cdots+\frac{u^{(p)}(t_0)}{p!}h^p+O(h^{p + 1})\<br>&amp;=u(t_0)+h[u’(t_0)+\frac{u’‘(t_0)}{2!}h+\cdots+\frac{u^{(p)}(t_0)}{p!}h^{p - 1}]+O(h^{p + 1})\<br>&amp;=u(t_0)+h\varphi(t_0,h)+O(h^{p + 1})<br>\end{align}<br>$$<br>其中<br>$$<br>\begin{align}<br>u’(t)&amp;=f(t,u(t))\<br>u’‘(t)&amp;=\frac{d}{dt}(f(t,u(t)))=f_t + f_uf\<br>u’‘’(t)&amp;=\frac{d^2}{dt^2}(f(t,u(t)))=\cdots<br>\end{align}<br>$$<br>舍去余项后，得到 $u_1 = u_0 + h\varphi(t_0, u_0, h)$ ，一般形式为<br>$$<br>u_{n + 1} = u_n + h\varphi(t_n, u_n, h)<br>$$<br>例如四阶 Runge - kutta 法：<br>$$<br>\varphi(t_n, u_n, h)=\frac{1}{6}k_1+\frac{1}{3}k_2+\frac{1}{3}k_3+\frac{1}{6}k_4<br>$$<br><strong>相容性</strong>：$\displaystyle \frac{u_{n + 1}-u_n}{h}=\varphi(t_n, u_n, h)$ 逼近微分方程，即<br>$$<br>\lim_{h \to 0}\varphi(t, u(t), h)=f(t, u(t))<br>$$</p><h1><strong>绝对稳定性和绝对稳定域</strong></h1><p><strong>回顾 Euler 法稳定性</strong>：已知 $\displaystyle |e_n| \leq e^{LT}|e_0|$ 。以初值问题 $$\displaystyle \begin{cases}u’=-5u \ u(0) = 1\end{cases}$$ 为例，$f(t, u)=-5u$ ，$L = 5$ ，$T = 20$ ，$e^{LT}=e^{100}$ ，精确解 $u(t)=e^{-5t}$ ，$t \to +\infty$ 时，$u(t) \to 0$<br>$$<br>\begin{align}<br>u_{n + 1}&amp;=u_n+hf(t_n, u_n)\<br>&amp;=u_n - 5hu_n\<br>&amp;=(1 - 5h)u_n\<br>&amp;=(1 - 5h)^{n + 1}u_0<br>\end{align}<br>$$<br>当 $h = 0.5$ 时，$u_n=(-1.5)^n \to \pm\infty$ ，与真解不同；当 $h = 0.4$ 时，$u_n=(-1)^n$ ，振荡；当 $h = 0.39$ 时，$u_n=(1 - 5h)^n \to 0$</p><p>说明稳定性概念需要改进，引入绝对稳定性</p><h2 id="Euler-法绝对稳定性定义："><strong>Euler 法绝对稳定性定义</strong>：</h2><p>将 Euler 法用于形如 $u’=\lambda u$ （$\lambda$ 为实数或复数 ）的方程，若 $|1 + h\lambda| &lt; 1$ ，则称 Euler 法关于 $\overline{h}=h\lambda$ 绝对稳定 。$\overline{D}_A={\overline{h}:|1 + \overline{h}| &lt; 1}$ 称为 Euler 法的绝对稳定域</p><p>其绝对稳定域 $\overline{D}<em>A$ 是以 - 1 为圆心，半径为 1 的圆，即满足 $|1 + h\lambda| &lt; 1$ 时，误差不会无限增长<br>$$<br>u</em>{n+1}=u_n+h\mu u_n=(1+\mu h)u_n\<br>v_{n+1}=v_n+h\mu v_n=(1+\mu h)v_n<br>$$<br>记 $e_n=u_n-v_n$ ，则<br>$$<br>\begin{align}<br>e_n&amp;=(1+\mu h)e_{n-1}\<br>&amp;=(1+\mu h)^ne_0<br>\end{align}<br>$$</p><h2 id="k-步法的绝对稳定性">**k 步法的绝对稳定性 **</h2><p>对于测试方程 $u’=\lambda u$ ，线性 $k$ 步法：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j}=h\sum_{j = 0}^{k} \beta_j f_{n + j}=h\lambda\sum_{j = 0}^{k} \beta_j u_{n + j}<br>$$<br>令 $\overline{h}=h\lambda$ ，则<br>$$<br>\sum_{j = 0}^{k} (\alpha_j - \overline{h}\beta_j)u_{n + j}=0<br>$$<br>在实际计算中，每步存在舍入误差，设近似解 $\overline{u}<em>n$ 满足<br>$$<br>\sum</em>{j = 0}^{k} (\alpha_j - \overline{h}\beta_j)\overline{u}<em>{n + j}=\eta_n<br>$$<br>其中 $\eta_n$ 为舍入误差，且 $|\eta_n| \leq M$ 。记 $\overline{e}<em>n=\overline{u}<em>n - u_n$ ，则<br>$$<br>\sum</em>{j = 0}^{k} (\alpha_j - \overline{h}\beta_j)\overline{e}</em>{n + j}=\eta_n<br>$$<br>记<br>$$<br>\begin{align}<br>E_n &amp;= (\overline{e}</em>{n + k - 1}, \cdots, \overline{e}_n)^T \<br>a_j &amp;= \alpha_j - \overline{h}\beta_j\<br>\overline{\eta}_n &amp;= (a_k^{-1}\eta_n, 0, \cdots, 0)^T<br>\end{align}<br>$$<br>矩阵<br>$$<br>\overline{C}=<br>\begin{bmatrix}</p><p>-a_k^{-1}a_{k - 1}  &amp;  -a_k^{-1}a_{k - 2}  &amp;\cdots   &amp;-a_k^{-1}a_0   \</p><p>1&amp;0&amp;\cdots&amp;0\</p><p>\vdots  &amp;\ddots&amp;\ddots&amp;\vdots\</p><p>0&amp;\cdots&amp;1&amp;0</p><p>\end{bmatrix}<br>$$<br>可将误差方程转化为矩阵形式 $E_{n + 1}=\overline{C}E_n+\overline{\eta}_n$ ，后续可通过分析矩阵 $\overline{C}$ 的特征值等性质，确定线性 $k$ 步法的绝对稳定域 ，即确定 $\overline{h}=h\lambda$ 的取值范围，使得在存在舍入误差情况下，误差不会无限增长</p><p>将误差方程<br>$$<br>\sum_{j = 0}^{k} (\alpha_j - \overline{h}\beta_j)\overline{e}<em>{n + j}=\eta_n<br>$$<br>写成向量形式<br>$$<br>E_n=\overline{C}E</em>{n - 1}+\overline{\eta}<em>n<br>$$<br>进一步得到<br>$$<br>E_n=\overline{C}^nE_0+\sum</em>{l = 0}^{n - 1} \overline{C}^l\overline{\eta}<em>{n - 1 - l}<br>$$<br>为使误差 $E_n$ 在计算中逐步减小，要求<br>$$<br>\lim</em>{n \to \infty}\overline{C}^n = 0<br>$$<br>$\overline{C}$ 的特征方程为<br>$$<br>\begin{align}<br>0=\sum_{j = 0}^{k} a_j\lambda^j&amp;=\sum_{j = 0}^{k} (\alpha_j - \overline{h}\beta_j)\lambda^j\<br>&amp;=\sum_{j = 0}^{k} \alpha_j\lambda^j-\overline{h}\sum_{j = 0}^{k} \beta_j\lambda^j\<br>&amp;=\rho(\lambda)-\overline{h}\sigma(\lambda)<br>\end{align}<br>$$</p><p>$\rho(\lambda)$ 和 $\sigma(\lambda)$ 分别为 $k$ 步法的第一、第二多项式</p><p>根据引理，$\lim_{n \to \infty}\overline{C}^n = 0$ 等价于特征多项式 $\rho(\lambda)-\overline{h}\sigma(\lambda)$ 的根 $|\lambda| &lt; 1$</p><h2 id="绝对稳定性及绝对稳定域定义"><strong>绝对稳定性及绝对稳定域定义</strong></h2><p><strong>绝对稳定性定义</strong>：如果 $k$ 步法的特征多项式方程 $\rho(\lambda)-\overline{h}\sigma(\lambda)$ 的根 $|\lambda| &lt; 1$ ，则称该 $k$ 步法关于 $\overline{h}=h\lambda$ 绝对稳定</p><p><strong>绝对稳定域定义</strong>：若存在复数域 $D_A$ ，使 $k$ 步法对 $\forall\overline{h} \in D_A$ 都绝对稳定，则称 $D_A$ 为该 $k$ 步法的绝对稳定域。此时 $\displaystyle \overline{h}=\frac{\rho(\lambda)}{\sigma(\lambda)}$ ，$D_A={\overline{h}:|\lambda(\overline{h})| &lt; 1}$ 。绝对稳定域越大，方法在不同 $\lambda$ 和 $h$ 取值下适应能力越强，越不容易出现误差发散情况</p><p><strong>命题 5.1</strong></p><p>对于一个相容的稳定多步法，若绝对稳定，则 $\lambda$ 的实部 $Re(\lambda) &lt; 0$ ，即绝对稳定域 $D_A$ 在左半复平面。这是因为对于稳定的数值方法，当应用于稳定的微分方程（一般对应 $Re(\lambda) &lt; 0$ ，此时精确解随时间衰减 ）时，数值方法的绝对稳定域应与之匹配，保证数值解的稳定性</p><h2 id="Runge-kutta-法绝对稳定域推导">Runge - kutta 法绝对稳定域推导</h2><p><strong>m 级 m 阶 Runge - kutta 法应用于测试方程</strong></p><p>对于测试方程 $u’=\lambda u$ ，其精确解为 $u = e^{\lambda t}$</p><p><strong>计算中间斜率值</strong>：<br>$$<br>\begin{align}<br>k_1 &amp;= f(t_n, u_n)=\lambda u_n=\lambda u_nP_0(\lambda h)\<br>\<br>k_2 &amp;= f(t_n + a_2h, u_n+hb_{21}k_1)\<br>&amp;=\lambda(u_n+hb_{21}k_1)\<br>&amp;=\lambda(1 + hb_{21}\lambda)u_n\<br>&amp;=\lambda u_nP_1(\lambda h)\<br>\<br>k_3 &amp;= f(t_n + a_3h, u_n+h(b_{31}k_1 + b_{32}k_2))=\lambda u_nP_2(\lambda h)\<br>\vdots\<br>k_{m - 1}&amp;=\lambda u_nP_{m - 1}(\lambda h)</p><p>\end{align}<br>$$<br>这里 $P_i(\lambda h)$ 是关于 $\lambda h$ 的多项式</p><p><strong>计算数值解</strong>：<br>$$<br>\begin{align}<br>u_{n + 1}&amp;=u_n+h(c_1k_1+\cdots + c_{m - 1}k_{m - 1})\<br>&amp;=u_n+h(c_1\lambda u_n + c_2P_1(\lambda h)\lambda u_n+\cdots + c_{m - 1}P_{m - 1}(\lambda h)\lambda u_n)\<br>&amp;=u_n(1 + P_m(\lambda h))<br>\end{align}<br>$$<br>其中 $P_m(\lambda h)$ 是关于 $\lambda h$ 的多项式</p><p><strong>与精确解 Taylor 展开对比</strong></p><p>将精确解 $u(t_{n + 1})$ 在 $t_n$ 处 Taylor 展开：<br>$$<br>\begin{align}<br>u(t_{n + 1})&amp;=u(t_n)+u’(t_n)h+\cdots+\frac{u^{(m)}(t_n)}{m!}h^m+O(h^{m + 1})\<br>&amp;=u(t_n)+u(t_n)\lambda h+\cdots+\frac{u(t_n)\lambda^m h^m}{m!}+O(h^{m + 1})\<br>&amp;=(1+\lambda h+\cdots+\frac{(\lambda h)^m}{m!})u(t_n)+O(h^{m + 1})</p><p>\end{align}<br>$$<br>由于 $m$ 级 $m$ 阶 Runge - kutta 法的精度要求，使得<br>$$<br>1 + P_m(\lambda h)=1+\lambda h+\cdots+\frac{(\lambda h)^m}{m!}<br>$$<br>由 $u_{n+1}=u_n(1 + P_m(\lambda h))$ 其特征方程为 $\lambda - [1 + P_m(\lambda h)] = 0$ ，其中<br>$$<br>\begin{align}<br>\lambda_1 &amp;= 1 + P_m(\lambda h)=1+\lambda h+\cdots+\frac{(\lambda h)^m}{m!}\<br>D_A &amp;={\overline{h}:|\lambda_1(\overline{h})| &lt; 1}={\overline{h}:|1+\overline{h}+\cdots+\frac{\overline{h}^m}{m!}| &lt; 1}\<br>&amp;   \quad  \quad \quad \quad \quad  \overline{h} =\lambda h\<br>\end{align}<br>$$<br>通过求解该不等式确定 $$\overline{h}$$ 的取值范围，从而得到方法的绝对稳定域，判断在哪些 $\lambda$ 和 $h$ 组合下数值解稳定</p><h1>一阶方程组和刚性问题</h1><h2 id="常微分方程组（ODEs）相关"><strong>常微分方程组（ODEs）相关</strong></h2><p><strong>常微分方程组</strong>：一般形式为<br>$$<br>\begin{cases}u_1’ = f_1(u_1,\cdots,u_m)\\vdots\u_m’ = f_m(u_1,\cdots,u_m)\end{cases}<br>$$<br>初值条件为 $u_i(t_0)=u_{i0}$ ，$i = 1,\cdots,m$</p><p><strong>高阶常微分初值问题</strong>：如<br>$$<br>\begin{cases}u^{(m)} = f(t,u,u’,\cdots,u^{(m - 1)})\u(t_0)=u_0, u’(t_0)=u_0’,\cdots,u^{(m - 1)}(t_0)=u_0^{(m - 1)}\end{cases}<br>$$<br>令 $u_1 = u$ ，$u_2 = u’$ ，$\cdots$ ，$u_m = u^{(m - 1)}$ ，可转化为常微分方程组<br>$$<br>\begin{cases}u_1’ = u_2\u_2’ = u_3\\vdots\u_m’ = f(t,u_1,u_2,\cdots,u_m)\end{cases}<br>$$<br>写成向量形式为 $\vec{u}'=\vec{f}(t,\vec{u})$ ，$\vec{u}(t_0)=\vec{u}_0$ 。并且单个方程的数值解法（如 Runge - kutta 法等 ）可推广应用到方程组的求解中</p><h2 id="刚性问题（Stiff-ODE）"><strong>刚性问题（Stiff ODE）</strong></h2><p><strong>示例分析</strong>：对于方程组 $\vec{u}’ = A\vec{u}$ ，$\vec{u} \in \mathbb{R}^3$ ，其中<br>$$<br>A=\begin{bmatrix}-0.1&amp;-49.9&amp;0\0&amp;-50&amp;0\0&amp;70&amp;-3\times10^4\end{bmatrix}<br>$$<br>$A$ 的特征值为 $\lambda_1=-0.1$ ，$\lambda_2=-50$ ，$\lambda_3=-3\times10^4$ 。当 $t \to \infty$ 时，$u_i(t) \to 0$ ，但收敛速度差异极大。使用 Runge - kutta 法时，为保证绝对稳定，要求 $h \leq 10^{-4}$ ；为使解充分接近定态解 0 ，对于收敛最慢的解（对应 $\lambda_1$ ），需 $e^{-0.1T} \approx 0$ ，即 $T \approx 40$ ，则计算步数 $\displaystyle n=\frac{T}{h} \approx 4\times10^5$ ，计算量巨大</p><p><strong>定义</strong>：设 $\lambda_i$ 为 $A$ 的特征值，若满足：<br>$$<br>Re(\lambda_i) &lt; 0 ，i = 1,\cdots,m\<br>\frac{\max|Re(\lambda_i)|}{\min|Re(\lambda_i)|} = R \gg 1<br>$$<br>则称方程组是刚性的，$R$ 为刚性比</p><p>对于刚性方程组，需专门的数值方法求解，以避免因步长限制导致计算量过大等问题</p><h1><strong>外推法</strong></h1><h2 id="思想："><strong>思想：</strong></h2><p>以 Euler 法 $\displaystyle u_{n + 1}=u_n+hf(t_n,u_n)$ 为例</p><p>外推法的思想是通过不同步长 $h$ 和 $\displaystyle \frac{h}{2}$ 分别计算数值解序列 $u_1,u_2,\cdots,u_n$ 和 $\displaystyle \overline{u}_{\frac{1}{2}},\overline{u}_1,\overline{u}_{\frac{3}{2}},\cdots,\overline{u}_{n - \frac{1}{2}},\overline{u}_n$ ，一般情况下 $\overline{u}_1 \neq u_1$<br>$$<br>\begin{align}<br>u_1 &amp;= u_0+hf(t_0,u_0)\<br>\overline{u}<em>1&amp;=\overline{u}</em>{\frac{1}{2}}+\frac{h}{2}f(t_{\frac{1}{2}},\overline{u}<em>{\frac{1}{2}})=u_0+\frac{h}{2}f(t_0,u_0)+\frac{h}{2}f(t</em>{\frac{1}{2}},\overline{u}_{\frac{1}{2}})<br>\end{align}<br>$$<br>通过 $u_1$ 和 $\overline{u}_1$ 的组合 $\displaystyle 2\overline{u}_1 - u_1=u_0+hf(t_{\frac{1}{2}},\overline{u}_{\frac{1}{2}})$ ，利用 Runge - kutta 法思想，其精度可达到 $u(t_1)+O(h^3)$ ，相比原数值方法精度有所提高</p><h2 id="一般外推法误差分析及线性组合推导"><strong>一般外推法误差分析及线性组合推导</strong></h2><p>对于某数值方法，记步长为 $h$ 时的数值解序列 $u_1,u_2,\cdots,u_n$ 为 $u(t,h)$ ，步长为 $\frac{h}{2}$ 时的数值解序列 $\displaystyle \overline{u}_{\frac{1}{2}},\overline{u}_1,\overline{u}_{\frac{3}{2}},\cdots,\overline{u}_{n - \frac{1}{2}},\overline{u}_n$ 为 $u(t,\frac{h}{2})$</p><p>假设该方法的误差有展开式<br>$$<br>u(t,h)=u(t)+\varepsilon(t)h^p+O(h^{p + 1})<br>$$<br>则<br>$$<br>u(t,\frac{h}{2})=u(t)+\varepsilon(t)(\frac{h}{2})^p+O(h^{p + 1})<br>$$<br>对 $u(t,h)$ 和 $u(t,\frac{h}{2})$ 进行线性组合：</p><p>设组合式为<br>$$<br>\frac{2^p u(t,\frac{h}{2})-u(t,h)}{2^p - 1}<br>$$<br>将误差展开式代入：</p><p>分子为<br>$$<br>\begin{align}<br>&amp;2^p\left[u(t)+\varepsilon(t)(\frac{h}{2})^p+O(h^{p + 1})\right]-\left[u(t)+\varepsilon(t)h^p+O(h^{p + 1})\right]\<br>&amp;=2^p u(t)+\varepsilon(t)h^p+2^pO(h^{p + 1})-u(t)-\varepsilon(t)h^p - O(h^{p + 1})\<br>&amp;=(2^p - 1)u(t)+O(h^{p + 1})<br>\end{align}<br>$$<br>所以<br>$$<br>\frac{2^p u(t,\frac{h}{2})-u(t,h)}{2^p - 1}=u(t)+O(h^{p + 1})<br>$$<br>通过这种线性组合，提高了数值解的精度阶数，从 $O(h^p)$ 提升到 $O(h^{p + 1})$ ，这就是外推法提高数值计算精度的基本原理</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程数值解 第一章（1）</title>
      <link href="/2025/05/18/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A31/"/>
      <url>/2025/05/18/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A31/</url>
      
        <content type="html"><![CDATA[<h1>Euler法</h1><p>对于常微分方程（ODE）问题：</p><p>$$<br>\begin{cases}<br>u’ = f(t, u), &amp; 0 \leq t \leq T \<br>u(0) = u_0<br>\end{cases}<br>$$<br>其中 $f(t, u)$ 关于 $u$ 满足 Lipschitz 条件</p><h2 id="欧拉法推导：">欧拉法推导：</h2><p><strong>连续问题离散化</strong></p><p>设真解为 $u(t)$。将区间 $[0, T]$ 离散化，令 $\displaystyle \frac{T}{N}=h$，其中 $h$ 为步长，且 $0 = t_0 &lt; t_1 &lt; \cdots &lt; t_N = T$，$t_n=nh$</p><p>已知 $u(t_0)=u_0$，$u’(t_0)=f(t_0, u_0)$</p><p><strong>利用 Taylor 展开推导近似值</strong></p><p>对 $u(t_1)$ 进行 Taylor 展开：$\displaystyle u(t_1)=u(t_0 + h)=u(t_0)+u’(t_0)h+\frac{u’‘(\xi)}{2!}h^2$ ，其中 $\displaystyle \xi\in(t_0,t_1)$ ，记为 $\displaystyle u(t_0)+u’(t_0)h + R_0$ ，$\displaystyle R_0 = O(h^2)$ 是二阶小量</p><p>略去二阶小量 $R_0$ ，得到 $u(t_1)$ 的近似值 $\displaystyle u_1 = u_0+hf(t_0, u_0)\approx u(t_1)$</p><p>类似地，可得到 $u(t_2)$ 的近似值 $u_2 = u_1+hf(t_1, u_1)$</p><p>以此类推，得到递推公式：$u_{n + 1}=u_n+hf(t_n, u_n)$ ，这就是 Euler 法</p><p><strong>显格式与隐格式</strong></p><p><strong>显格式</strong>：</p><p>$u_{n+1} = u_n + h f(t_n, u_n)$，变形为 $\displaystyle \frac{u_{n + 1}-u_n}{h}=f(t_n, u_n)$ ，即用差商 $\displaystyle \frac{u_{n + 1}-u_n}{h}$（向前差分）代替导数 $u’(t_n)$</p><p><strong>隐格式</strong>：</p><p>$\displaystyle \frac{u_n - u_{n - 1}}{h}=f(t_n, u_n)$ ，也可写成 $\displaystyle u_{n + 1}=u_n+hf(t_{n + 1}, u_{n + 1})$ ，这里用向后差分 $\displaystyle \frac{u_n - u_{n - 1}}{h}$ 近似 $u’(t_n)$ ，隐格式一般需要迭代求解</p><p>迭代公式为<br>$$<br>\displaystyle u_{n + 1}^{[k + 1]}=u_n+hf(t_{n + 1}, u_{n + 1}^{[k]})<br>$$</p><h2 id="数值积分法：ODE-数值解的等价积分形式">数值积分法：ODE 数值解的等价积分形式</h2><p>常微分方程 $u’(t)=f(t, u(t))$ ，$u(t_0)$ 已知，其等价积分形式为：</p><p>$$<br>u(t)=u(t_0)+\int_{t_0}^{t}f(\tau, u(\tau))d\tau<br>$$<br>通过对积分项进行不同的数值近似，可得到不同的数值解法</p><h3 id="矩形公式">矩形公式</h3><p><strong>左矩形公式（显式 Euler 法）</strong></p><p>公式：$\displaystyle u_1 = u_0 + f(t_0, u_0)h$</p><p>原理：用左端点的函数值 $f(t_0, u_0)$ 近似积分区间 $[t_0, t_0 + h]$ 上 $\displaystyle f(\tau, u(\tau))$ 的平均值，来计算积分 $\displaystyle \int_{t_0}^{t_0 + h}f(\tau, u(\tau))d\tau\approx hf(t_0, u_0)$ ，进而得到 $u(t_1)$（$t_1=t_0 + h$ ）的近似值 $u_1$</p><p><strong>右矩形公式（隐式 Euler 法）</strong></p><p>公式：$\displaystyle u_1 = u_0 + f(t_1, u_1)h$</p><p>原理：用右端点的函数值 $f(t_1, u_1)$ 近似积分区间 $[t_0, t_0 + h]$ 上 $f(\tau, u(\tau))$ 的平均值 ，但由于 $u_1$ 未知，该方法是隐式的，一般需迭代求解</p><p><strong>梯形公式（改进 Euler 法）</strong></p><p>公式：$\displaystyle u_{n + 1}=u_n+\frac{h}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]$</p><p>原理：用梯形面积公式近似积分，即把积分区间 $[t_n, t_{n + 1}]$ 上 $f(\tau, u(\tau))$ 的平均值近似为 $\displaystyle \frac{1}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]$ ，从而计算积分<br>$$<br>\displaystyle \int_{t_n}^{t_{n + 1}}f(\tau, u(\tau))d\tau\approx\frac{h}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]<br>$$</p><h2 id="Euler-误差分析">Euler 误差分析</h2><p><strong>数值解与精确解</strong></p><p><strong>数值解</strong>：显式 Euler 法的迭代公式为 $\displaystyle u_{n + 1}=u_n+hf(t_n, u_n)$</p><p><strong>精确解</strong>：对 $u(t_{n + 1})$ 在 $t_n$ 处进行 Taylor 展开，$\displaystyle u(t_{n + 1})=u(t_n)+hf(t_n, u(t_n))+\frac{u’‘(t_n)}{2!}h^2+\frac{u’‘’(\xi)}{3!}h^3$ ，$\xi\in(t_n, t_{n + 1})$</p><h3 id="局部截断误差">局部截断误差</h3><p><strong>定义</strong>：把精确解 $u(t)$ 代入差分格式得到的余项。差分格式 $\displaystyle L[u_n, h]=u_{n + 1}-u_n - hf(t_n, u_n)$ ，将真解代入得 $\displaystyle L[u(t_n), h]=u(t_{n + 1})-u(t_n)-hf(t_n, u(t_n))\neq0$ ，余项 $\displaystyle R_n=\frac{u’‘(t_n)}{2!}h^2+\frac{u’‘’(\xi)}{3!}h^3$ 。当 $h\to0$ 时，Euler 法的局部截断误差为 $O(h^2)$ ，意味着随着步长 $h$ 趋于 0 ，误差主要由 $h^2$ 阶项决定</p><p><strong>改进 Euler 法局部截断误差</strong></p><p>利用积分中值定理相关结论<br>$$<br>\displaystyle \int_{a}^{b}v(x)dx=\frac{1}{2}(b - a)(v(a)+v(b))-\frac{(b - a)^3}{12}v’‘(\xi)<br>$$<br>将真解代入改进 Euler 法格式 $\displaystyle u_{n + 1}-u_n-\frac{h}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]=0$ ，得到余项为 $\displaystyle -\frac{h^3}{12}u’‘’(\xi)$ ，$\xi\in(t_n, t_{n + 1})$ ，所以改进 Euler 法的局部截断误差为 $O(h^3)$ ，比 Euler 法精度更高</p><h3 id="整体误差">整体误差</h3><p>记 $\displaystyle e_n = u(t_n)-u_n$</p><p><strong>Euler 法</strong>：<br>$$<br>\begin{align*}<br>u_{n + 1}&amp;=u_n+hf(t_n,u_n)\<br>u(t_{n+1})&amp;=u(t_n)+hf(t_n,u(t_n)) + R_n<br>\end{align*}<br>$$<br>作差：<br>$$<br>\displaystyle e_{n + 1}=e_n+h[f(t_n,u_n)-f(t_n,u(t_n))]+R_n<br>$$</p><p>记 $R=\max|R_n|$，由于 $f$ 满足 Lipschitz 条件得：</p><p>$$<br>\begin{align*}<br>|e_{n+1}|&amp;\leq|e_n|+L\cdot h\cdot|e_n| + R\<br>|e_n|&amp;\leq(1 + Lh)|e_{n - 1}|+R\<br>&amp;\leq(1 + Lh)^2|e_{n - 2}|+(1 + Lh)R+R\<br>&amp;\vdots\<br>&amp;\leq(1 + Lh)^n|e_0|+R\sum_{j = 0}^{n - 1}(1 + Lh)^j\<br>&amp;=(1 + Lh)^n|e_0|+R\cdot\frac{(1 + Lh)^n-1}{Lh}<br>\end{align*}<br>$$</p><p>由 $\ln(1 + Lh)\leq Lh$，$\Rightarrow n\ln(1 + Lh)\leq n\cdot Lh\leq L(T - t_0)$，$\Rightarrow(1 + Lh)^n\leq e^{L(T - t_0)}$</p><p>于是<br>$$<br>|e_n|\leq e^{L(T - t_0)}|e_0|+\frac{R}{Lh}(e^{L(T - t_0)}-1)，n = 1,2,\cdots,N<br>$$</p><p>对 Euler 法，可取 $e_0 = 0$，$R = ch^2$</p><p>则<br>$$<br>|e_n|\leq\frac{ch}{L}(e^{L(T - t_0)})\leq ch<br>$$<br>即 $e_n = o(h)$</p><p>注意比较局部截断误差与整体误差的关系</p><h2 id="稳定性">稳定性</h2><p><strong>定义</strong>：中途误差是否连续地依赖于初始值误差。初始误差包括测量误差、舍入误差</p><p><strong>Euler 法稳定性分析</strong>：</p><p>从初值 $u_0$，$v_0$ 算出的节点值分别记为 ${u_n}$，${v_n}$。</p><p>$$<br>\begin{align*}<br>u_n&amp;=u_{n - 1}+hf(t_{n - 1},u_{n - 1})\<br>v_n&amp;=v_{n - 1}+hf(t_{n - 1},v_{n - 1})<br>\end{align*}<br>$$</p><p>两式相减，记 $e_n = u_n - v_n$，则<br>$$<br>e_n=e_{n - 1}+h[f(t_{n - 1},u_{n - 1})-f(t_{n - 1},v_{n - 1})]<br>$$<br>由 Lipschitz 条件，有<br>$$<br>|e_n|\leq|e_{n - 1}|+hL|e_{n - 1}|=(1 + Lh)|e_{n - 1}|<br>$$</p><p>递推可得：</p><p>$$<br>\begin{align*}<br>|e_n|&amp;\leq(1 + Lh)^n|e_0|\<br>&amp;\leq e^{L(T - t_0)}|e_0|<br>\end{align*}<br>$$<br>这表明 $e_n$ 连续地依赖于初始误差 $e_0$，即 <strong>Euler 法稳定</strong></p><h1>线性多步法</h1><h2 id="数值积分法">数值积分法</h2><p>数值积分公式：<br>$$<br>u(t_{n + 1})=u(t_n)+\int_{t_n}^{t_{n + 1}}f(t,u(t))dt<br>$$<br><strong>思想</strong>：适当地选取节点，用 Lagrange 插值多项式代替 $f(t,u(t))$</p><p><strong>Adams 外插法（显式）</strong></p><p>节点：$t_{n - k},\cdots,t_n$（$k + 1$ 个点），对应 $k + 1$ 步法</p><p>使用 $k$ 次 Lagrange 插值多项式</p><p><strong>Adams 内插法（隐式）</strong></p><p>节点：$\displaystyle t_{n - k},\cdots,t_n,t_{n + 1}$（未知 $t_{n + 1}$ 故仍为 $k + 1$ 步法）</p><p>使用 $k + 1$ 次 Lagrange 插值多项式</p><h2 id="Adams-外插法">Adams 外插法</h2><p><strong>插值分解</strong></p><p>将 $f(t, u(t))$ 分解为 $\displaystyle f(t, u(t)) = L_{n,k}(t) + r_{n,k}(t)$ ，其中 $\displaystyle L_{n,k}(t)$ 是插值多项式，$\displaystyle r_{n,k}(t)$ 是插值余项</p><p>根据积分的线性性质，有<br>$$<br>\displaystyle u(t_{n + 1}) = u(t_n)+\int_{t_n}^{t_{n + 1}}L_{n,k}(t)dt+\int_{t_n}^{t_{n + 1}}r_{n,k}(t)dt<br>$$<br>记为式 ①</p><p><strong>离散格式</strong><br>$$<br>\displaystyle u_{n + 1}=u_n+\int_{t_n}^{t_{n + 1}}L_{n,k}(t)dt<br>$$<br>是通过用插值多项式 $L_{n,k}(t)$ 近似 $f(t, u(t))$ 并积分得到的数值求解公式</p><p><strong>局部截断误差</strong></p><p>局部截断误差 $\displaystyle R_{n,k}=\int_{t_n}^{t_{n + 1}}r_{n,k}(t)dt$ ，它衡量了用插值多项式近似 $f(t, u(t))$ 并积分时产生的误差</p><p><strong>Lagrange 插值公式回顾</strong></p><p><strong>Lagrange 插值多项式</strong></p><p>对于给定节点 $x_0, x_1,\cdots, x_k$ ，函数 $f(x)$ 的 $k$ 次 Lagrange 插值多项式为 $\displaystyle L_k(x)=\sum_{i = 0}^{k}f(x_i)l_i(x)$ ，其中 $l_i(x)$ 是 Lagrange 基函数</p><p><strong>Newton 型插值多项式</strong></p><p>向前形式：$$\displaystyle f(x_0)+f[x_0,x_1](x - x_0)+\cdots$$</p><p>向后形式：$$\displaystyle f(x_k)+f[x_{k - 1},x_k](x - x_k)+\cdots + f[x_0,\cdots,x_k](x - x_k)\cdots(x - x_0)$$ ，其中 $\displaystyle f[x_i,\cdots,x_j]$ 是 $i$ 阶差商</p><p><strong>差分</strong></p><p>向前差分：$\displaystyle \Delta_+ f_j = f_{j + 1}-f_j$</p><p>向后差分：$\displaystyle \Delta_- f_j = f_j - f_{j - 1}$ ，且 $\displaystyle \Delta_-^k f_j=\Delta_+^k f_{-k}$</p><p><strong>采用 Newton 向后插值公式</strong></p><p>Newton 向后插值公式 $L_{n,k}(t)$ 是基于节点处函数值 $g(t_i)$ 及其差商，通过差商的线性组合来近似 $g(t)$ ，进而用于数值积分求解 $u(t_{n + 1})$  ，展开形式是利用差商和节点信息逐步构建，以逼近 $g(t)$ 在区间 $[t_n, t_{n + 1}]$ 上的积分</p><p>设 $t_{n - k},\cdots,t_{n - 1},t_n$ 为节点，令 $f(t, u(t)) = g(t)$ ，$t = t_n+\tau h$，$\tau\in[0,1]$<br>$$<br>\begin{align*}<br>L_{n,k}(t)&amp;=L_{n,k}(t)=g(t_n)+g(t_n,t_{n-1})(t-t_n)+\cdots+g(t_n,\cdots,t_{n-k})(t-t_n)\cdots(t-t_{n-k+1})\<br>&amp;=g(t_n)+\frac{g(t_n-g_{n-1})}{t_n-t_{n-1}}+\cdots\cdots<br>\end{align*}<br>$$<br><strong>Newton 向后插值多项式展开</strong></p><p>把 $L_{n,k}(t)$ 在 $t = t_n+\tau h$ 处展开，$\displaystyle g_{n - j}=f_{n - j}=f(t_{n - j},u_{n - j})$ 是节点处的函数值。利用向前差分 $\displaystyle \Delta_+^i g_{n - i}$ 来构建插值多项式，$\displaystyle \binom{s}{j}=\frac{s(s - 1)\cdots(s - j + 1)}{j!}$ ，$\displaystyle \binom{s}{0}=1$ ，得到 $L_{n,k}(t)$ 的具体形式<br>$$<br>L_{n,k}(t)=g(t_n)+\frac{\Delta_+^i g_{n - 1}}{h}\tau h+\frac{\Delta_+^i g_{n - 2}}{2!}\tau(\tau+1)+ \cdots+\frac{\tau(\tau+1)\cdots(\tau+k-1)}{k!}\Delta_+^i g_{n - k}<br>$$<br>则<br>$$<br>\begin{align*}<br>L_{n,k}(t)&amp;=L_{n,k}(t_n+\tau h) \<br>&amp;=\sum_{j=0}^k (-1)^j\binom{-\tau}{j}\Delta_+^i f_{n - j}\<br>\end{align*}<br>$$</p><p><strong>代入积分并化简</strong></p><p>将 $L_{n,k}(t)$ 代入 $\displaystyle u_{n + 1}=u_n+\int_{t_n}^{t_{n + 1}}L_{n,k}(t)dt$ ，通过换元 $t = t_n+\tau h$ ，$dt = h d\tau$ ，把积分区间从 $[t_n,t_{n + 1}]$ 转换为 $[0,1]$ 。然后对积分进行计算，提出与 $j$ 无关的项 $h$ 和 $\Delta_+^j f_{n - j}$ ，得到 $\displaystyle u_{n + 1}=u_n + h\sum_{j = 0}^{k}a_j\Delta_+^j f_{n - j}$ ，其中记 $\displaystyle a_j = (-1)^j\int_{0}^{1}\binom{-\tau}{j}d\tau$</p><p>具体步骤如下：<br>$$<br>\begin{align*}<br>u_{n+1}&amp;=u_n+\int_{t_n}^{t_{n+1}} L_{n,k}(t)dt\<br>&amp;=u_n+\int_{0}^{1} L_{n,k}(t_n+\tau h)hd\tau\<br>&amp;=\displaystyle u_n + h\sum_{j = 0}^{k}(-1)^j\int_{0}^{1}\binom{-\tau}{j}d\tau\Delta_+^j f_{n - j}\<br>&amp;=\displaystyle u_n + h\sum_{j = 0}^{k}a_j\Delta_+^j f_{n - j}<br>\end{align*}<br>$$<br><strong>计算系数（生成函数法）</strong></p><p>把 $(-1)^j(-\tau)(-\tau - 1)\cdots(-\tau - j + 1)$ 看成是 $(1 - t)^{-\tau}$ 关于 $t$ 在 $t = 0$ 处的导数</p><p>利用泰勒级数展开<br>$$<br>(1 - t)^{-\tau}=\sum_{j = 0}^{\infty}\frac{(-1)^j(-\tau)(-\tau - 1)\cdots(-\tau - j + 1)}{j!}t^j<br>$$</p><p>对上述展开式的左右两端在 $[0,1]$ 上积分并进行一系列变形</p><p>得<br>$$<br>\displaystyle -\frac{t}{(1 - t)\ln(1 - t)}=\sum_{j = 0}^{\infty}a_j t^{j + 1}<br>$$</p><p>变形得<br>$$<br>-\frac{\ln(1 - t)}{t}\sum_{j = 0}^{\infty}a_j t^{j + 1}=\frac{1}{1-t}=1+t+t^2+\cdots+t^n<br>$$</p><p>由<br>$$<br>-\frac{\ln(1 - t)}{t}=1+\frac{t}{2}+\frac{t^2}{3}+\cdots+\frac{t^{n-1}}{n}<br>$$</p><p>代入得<br>$$<br>(1+\frac{t}{2}+\frac{t^2}{3}+\cdots+\frac{t^{n-1}}{n})(a_0+a_1+\cdots+a_nt^n)=(1+t+t^2+\cdots+t^n)<br>$$</p><p>比较系数得到 $a_j$<br>$$<br>\begin{equation}<br>\begin{cases}<br>a_0=1 \<br>a_1+\frac{1}{2}a_0= 1 \<br>\quad \quad \vdots  \<br>a_n + \frac{1}{2}a_{n-1}+\frac{1}{3}a_{n-2}+\cdots+\frac{1}{n+1}a_{0} = 1<br>\end{cases}<br>\end{equation}<br>$$</p><p><strong>计算 $\Delta_+^j f_{n-j}$</strong></p><p><strong>原理</strong>：利用向前差分算子 $\Delta_+$ 的性质，$\Delta_+=(S - I)$（$S$ 为移位算子，$\displaystyle Sf_n = f_{n + 1}$ ，$I$ 为恒等算子 ），通过二项式定理 $\displaystyle (a + b)^j=\sum_{l = 0}^{j}C_{j}^{l}a^{j - l}b^{l}$ 展开 $(E - I)^j$ 来计算 $\Delta_+^j f_{n - j}$</p><p><strong>具体实现步骤：</strong><br>$$<br>\Delta_+ f_n=f_{n+1}-f_{n}=(S-I)f_n \<br>$$</p><p>$$<br>\begin{align*}<br>\Delta_+ f_n &amp;=(S-I)^jf_{n-j} \<br>&amp;=\sum_{l = 0}^{j}C_{j}^{l}S^{J - l}(-I)^{l}f_{n-j}\<br>&amp;=\sum_{l = 0}^{j}(-1)^l\binom{j}{l}f_{n-l}<br>\end{align*}<br>$$</p><p>因而<br>$$<br>\begin{align*}<br>u_{n + 1}&amp;=u_n + h\sum_{j = 0}^{k}a_j\Delta_+^j f_{n - j} \<br>&amp;=u_n + h\sum_{j = 0}^{k}a_j\sum_{l=0}^{j}(-1)^l\binom{j}{l}f_{n - l}\<br>&amp;=u_n + h\sum_{l=0}^{j}\sum_{j = 0}^{k}(-1)^la_j\binom{j}{l}f_{n - l}\<br>&amp;=u_n+h\sum_{j = 0}^{k}b_{kl}f_{n - l}<br>\end{align*}<br>$$</p><p>其中记 $\displaystyle b_{kl}=\sum_{j = 0}^{k}(-1)^la_j\binom{j}{l}$</p><p><strong>$k=0$</strong>：此时公式为 $\displaystyle u_{n + 1}=u_n+hf(t_n,u_n)$ ，这就是显式 Euler 法，它是 Adams 外插法的最简单形式，基于当前点的函数值来预估下一点的值</p><p><strong>$k=1$</strong>：$\displaystyle u_{n + 1}=u_n+\frac{h}{2}(3f_n - f_{n - 1})$ ，利用前两个节点的函数值来计算下一个节点的数值解，相比 Euler 法考虑了更多历史信息</p><p><strong>$k=2$</strong>：$\displaystyle u_{n + 1}=u_n+\frac{h}{12}(23f_n - 16f_{n - 1}+5f_{n - 2})$ ，使用了前三个节点的函数值，精度进一步提高</p><p><strong>$k=3$</strong>：$\displaystyle u_{n + 1}=u_n+\frac{h}{24}(55f_n - 59f_{n - 1}+37f_{n - 2}-9f_{n - 3})$ ，借助更多历史节点信息来逼近真实解</p><p>Adams 外插法局部截断误差</p><p><strong>插值余项公式</strong>：对于函数 $f(x)$ 的 $n$ 次插值多项式 $P_n(x)$</p><p>插值余项<br>$$<br>\displaystyle E(f,x)=f(x)-P_n(x)=\frac{(x - x_0)(x - x_1)\cdots(x - x_n)}{(n + 1)!}f^{(n + 1)}(\xi)\quad(\xi 介于 x 与节点之间)<br>$$</p><p><strong>应用到 Adams 外插法</strong>：这里 $g(t)=f(t,u(t))$ ，$L_{n,k}(t)$ 是插值多项式，$\displaystyle r_{n,k}(t)=g(t)-L_{n,k}(t)$ 为插值余项</p><p>根据插值余项公式<br>$$<br>\displaystyle r_{n,k}(t)=\frac{(t - t_{n - k})(t - t_{n - k + 1})\cdots(t - t_n)}{(k + 1)!}g^{(k + 1)}(\xi)<br>$$</p><p>$\xi$ 与 $t$ 有关，局部截断误差就是对 $\displaystyle r_{n,k}(t)$ 在积分区间上积分产生的误差</p><p>将 $t = t_n+\tau h$ 代入插值余项表达式 $\displaystyle r_{n,k}(t)$ 。根据插值余项公式 $\displaystyle r_{n,k}(t)=\frac{(t - t_{n - k})(t - t_{n - k + 1})\cdots(t - t_n)}{(k + 1)!}u^{(k + 2)}(\xi)$ ，当 $t = t_n+\tau h$ 时，$\displaystyle t - t_{n - i}=\tau h + ih = (\tau + i)h$ （$i = 0,1,\cdots,k$ ），</p><p>代入后经过整理得到<br>$$<br>\displaystyle r_{n,k}(t_n+\tau h)=\frac{(\tau + k)(\tau + k - 1)\cdots(\tau + 1)\tau h^{k + 1}}{(k + 1)!}u^{(k + 2)}(\xi)<br>$$</p><p>进一步变形为<br>$$<br>\displaystyle r_{n,k}(t_n+\tau h)=(-1)^{k + 1}\binom{-\tau}{k + 1}h^{k + 1}u^{(k + 2)}(\xi)<br>$$</p><p><strong>积分变换</strong>：已知 $\displaystyle R_{n,k}=\int_{t_n}^{t_{n + 1}}r_{n,k}(t)dt$ ，通过换元 $t = t_n+\tau h$ ，$dt = h d\tau$ ，积分区间从 $[t_n,t_{n + 1}]$ 变为 $[0,1]$</p><p>则<br>$$<br>R_{n,k}=\int_{0}^{1}r_{n,k}(t_n+\tau h)\cdot h d\tau<br>$$</p><p><strong>代入化简</strong>：将 $\displaystyle r_{n,k}(t_n+\tau h)=(-1)^{k + 1}\binom{-\tau}{k + 1}h^{k + 1}u^{(k + 2)}(\xi)$ 代入上式</p><p>得到<br>$$<br>R_{n,k}=\int_{0}^{1}(-1)^{k + 1}\binom{-\tau}{k + 1}u^{(k + 2)}(\xi)d\tau h^{k + 2}<br>$$</p><p><strong>结果分析</strong>：由于 $\displaystyle u^{(k + 2)}(\xi)$ 在积分区间内有界（在一定条件下 ），令 $\displaystyle \alpha_{k + 1}=\int_{0}^{1}(-1)^{k + 1}\binom{-\tau}{k + 1}d\tau$</p><p>则<br>$$<br>\displaystyle R_{n,k}=\alpha_{k + 1}u^{(k + 2)}(\overline{\xi})h^{k + 2}<br>$$</p><p>可知 $\displaystyle R_{n,k}=O(h^{k + 2})$ ，这表明 Adams 外插法的<strong>局部截断误差阶</strong>为 $h^{k + 2}$ ，即随着步长 $h$ 减小，误差以 $\displaystyle h^{k + 2}$ 的速度趋近于 0</p><h2 id="Adams-内插法">Adams 内插法</h2><p>Adams 内插法为隐格式</p><p>局部截断误差比外插法高一阶，为 $O(h^{k + 3})$</p><p>$k = 0, 1, 2, 3$的内插公式：</p><p>$k = 0$：$\displaystyle u_{n + 1} = u_n + hf_{n + 1}$  → 隐式 Euler</p><p>$k = 1$：$\displaystyle u_{n + 1} = u_n + \frac{h}{2}(f_{n + 1} + f_n)$  → 改进 Euler</p><p>$k = 2$：$\displaystyle u_{n + 1} = u_n + \frac{h}{12}(5f_{n + 1} + 8f_n - f_{n - 1})$</p><p>$k = 3$：$\displaystyle u_{n + 1} = u_n + \frac{h}{24}(9f_{n + 1} + 19f_n - 5f_{n - 1} + f_{n - 2})$</p><p>多步法一般形式：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f_{n + j}<br>$$</p><p>由 $\displaystyle u_n, u_{n + 1}, \cdots, u_{n + k - 1}$ → $u_{n + k}$ （共 $k$ 个，即$k$步法）</p><p>Adams 方法：<br>$$<br>\alpha_k = 1，\alpha_{k - 1} = -1，\displaystyle \alpha_{k - 2} = \cdots = \alpha_0 = 0<br>$$<br>注：$\alpha_k$ 总可取成 1，显方法 $\beta_k = 0$，隐方法 $\beta_k \neq 0$</p><p>实际计算时，初始 $u_0, u_1, \cdots, u_{k - 1}$，可由单步法算</p><h3 id="待定系数法">待定系数法</h3><p>将真解 $u(t)$ 代入格式：$\displaystyle L[u(t_n); h] = \sum_{j = 0}^{k} [\alpha_j u(t_{n + j}) - h\beta_j f(t_{n + j}, u(t_{n + j}))]$</p><p>为简便且讨论一般，在 $t_n$ 处作 Taylor 展开：</p><p>$$<br>\begin{align}<br>&amp;u(t_{n + j}) = u(t_n + jh) = u(t_n) + u’(t_n)jh + \frac{u’‘(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q)}(t_n)}{q!}(jh)^q + \cdots  \<br>&amp;f(t_{n + j}, u(t_{n + j})) = u’(t_{n + j}) = u’(t_n + jh) = u’(t_n) + u’‘(t_n)jh + \frac{u’‘’(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q + 1)}(t_n)}{q!}(jh)^q + \cdots<br>\end{align}<br>$$<br>则：</p><p>$$<br>\begin{align*}<br>&amp;\sum_{j = 0}^{k} [\alpha_j u(t_{n + j}) - h\beta_j f(t_{n + j}, u(t_{n + j}))] \<br>&amp;=\sum_{j = 0}^{k} [\alpha_j (u(t_n) + u’(t_n)jh + \frac{u’‘(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q)}(t_n)}{q!}(jh)^q + \cdots) - h\beta_j (u’(t_n) + u’‘(t_n)jh + \frac{u’‘’(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q + 1)}(t_n)}{q!}(jh)^q)] \<br>&amp;=\sum_{j = 0}^{k} \alpha_j u(t_n) + \sum_{j = 0}^{k} (j\alpha_j - \beta_j)u’(t_n) \cdot h + \cdots + \sum_{j = 0}^{k} (\alpha_j \frac{j^q}{q!} - \beta_j \frac{j^{q - 1}}{(q - 1)!}) \cdot h^q \<br>&amp;= C_0 u(t_n) + C_1 u’(t_n) + \cdots + C_q u^{(q)}(t_n) \cdot h^q + \cdots<br>\end{align*}<br>$$</p><p>其中：<br>$$<br>\begin{equation}<br>\begin{cases}<br>C_0 = \alpha_0 + \alpha_1 + \cdots + \alpha_k \<br>C_1 = \alpha_1 + 2\alpha_2 + \cdots + k\alpha_k - (\beta_0 + \beta_1 + \cdots + \beta_k) \<br>\quad \quad \vdots  \<br>C_q = \frac{1}{q!}(\alpha_1 + 2^q\alpha_2 + \cdots + k^q\alpha_k) - \frac{1}{(q - 1)!}(\beta_1 + 2^{q - 1}\beta_2 + \cdots + k^{q - 1}\beta_k)<br>\end{cases}<br>\end{equation}<br>$$</p><p>若 $u(t)$ 有 $p + 2$ 次连续导数，则可选 $\alpha_j, \beta_j$</p><p>使得：<br>$$<br>C_0 = C_1 = \cdots = C_p = 0，C_{p + 1} \neq 0<br>$$<br>此时：<br>$$<br>L[u(t_n); h] = C_{p + 1} u^{(p + 1)}(t_n)h^{p + 1} + O(h^{p + 2})<br>$$<br>得到了 $p$ 阶 $k$ 步法：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f_{n + j}<br>$$<br>局部截断误差为 $O(h^{p + 1})$<br>整体误差为 $O(h^p)$</p><h1>相容性、稳定性和误差估计</h1><p><strong>k 步法</strong>：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f_{n + j}<br>$$</p><h2 id="相容性">相容性</h2><p><strong>相容性：差分算子逼近微分算子</strong></p><p><strong>以 Euler 法为例</strong>：</p><p>$$<br>u_{n + 1} = u_n + hf(t_n, u_n)，变形为 \frac{u_{n + 1} - u_n}{h} = f(t_n, u_n)<br>$$<br><strong>差分算子</strong>：<br>$$<br>L[u(t_n); h] = u(t_{n + 1}) - u(t_n) - hf(t_n, u(t_n))<br>$$<br><strong>差商算子</strong>：<br>$$<br>\frac{1}{h}L[u(t_n); h] = \frac{u(t_{n + 1}) - u(t_n)}{h} - f(t_n, u(t_n))<br>$$<br><strong>微分算子</strong>：<br>$$<br>u’(t) - f(t, u(t))<br>$$<br><strong>Euler 法相容性</strong>：<br>$$<br>\frac{1}{h}L[u(t_n); h] - [u’(t_n) - f(t_n, u(t_n))] \to 0，当 h \to 0<br>$$<br><strong>k 步法相容性</strong>：<br>$$<br>\frac{1}{h} [\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) - h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j}))] - [u’(t_n) - f(t_n, u(t_n))] = o(1)，当 h \to 0<br>$$</p><p>即<br>$$<br>\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) - h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j})) = o(h) \ \Leftrightarrow (C_0 = 0, C_1 = 0)<br>$$<br>其中<br>$$<br>\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) - h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j})) = C_0u(t) + C_1u’(t)h + C_2u’'(t)h^2 + \cdots<br>$$</p><h3 id="特征多项式">特征多项式</h3><p><strong>第一特征多项式：</strong><br>$$<br>\rho(\lambda) = \sum_{j = 0}^{k} \alpha_j \lambda^j<br>$$<br><strong>第二特征多项式：</strong><br>$$<br>\sigma(\lambda) = \sum_{j = 0}^{k} \beta_j \lambda^j<br>$$</p><h4 id="定理3-1">定理3.1</h4><p>$$<br>k步法相容 \Leftrightarrow C_0 = 0, C_1 = 0 \Leftrightarrow \rho(1) = 0, \rho’(1) = \sigma(1)<br>$$</p><p>其中：<br>$$<br>\begin{align*}<br>&amp;C_0 = \alpha_0 + \alpha_1 + \cdots + \alpha_k = \rho(1)\<br>&amp;C_1 = \alpha_1 + 2\alpha_2 + \cdots + k\alpha_k - (\beta_0 + \beta_1 + \cdots + \beta_k) = \rho’(1) - \sigma(1)<br>\end{align*}<br>$$</p><h2 id="稳定性-2">稳定性</h2><p>稳定性：解对初值的连续依赖性</p><p><strong>k 步法</strong>：由初值 $u_0, u_1, \cdots, u_{k - 1}$ 得到 $u_n$ 。若 $u_0, u_1, \cdots, u_{k - 1}$ 有误差，$u_n$ 的误差是否会无限增长？</p><p><strong>定义 3.2</strong>：若 $\exists \tau &gt; 0, h_0 &gt; 0$ ，使得当网格步长 $h$ 满足 $0 &lt; h &lt; h_0$ 时，对 $k$ 步法的任意两个解 ${u_n}$， ${v_n}$</p><p>都有<br>$$<br>\max_{n \leq \frac{T}{h}} |u_n - v_n| \leq \tau \max_{0 \leq j \leq k} |u_j - v_j|<br>$$<br>则称 $k$ 步法<strong>稳定</strong></p><h3 id="具体方法的误差递推关系">具体方法的误差递推关系</h3><p><strong>显式 Euler：</strong><br>$$<br>|e_{n + 1}| \leq |e_n| + Lh|e_n| + R<br>$$<br>此为误差递推关系</p><p><strong>隐式 Euler：</strong><br>$$<br>\begin{align}<br>&amp;u_{n + 1} = u_n + hf(t_{n + 1}, u_{n + 1}) \</p><p>&amp;v_{n + 1} = v_n + hf(t_{n + 1}, v_{n + 1}) \</p><p>&amp;\rightarrow|e_{n + 1}| \leq |e_n| + Lh|e_{n + 1}| \</p><p>&amp;\rightarrow|e_{n + 1}| \leq \frac{1}{1 - Lh}|e_n|<br>\end{align}<br>$$<br><strong>k 步法：</strong></p><p>已知：由 $u_0, u_1, \cdots, u_{k - 1}$ 得到 $u_n$ ，满足<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u_{n + j})<br>$$<br>由 $v_0, v_1, \cdots, v_{k - 1}$ 得到 $v_n$ ，满足<br>$$<br>\sum_{j = 0}^{k} \alpha_j v_{n + j} = h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, v_{n + j})<br>$$<br>记 $e_n = u_n - v_n$ ，则<br>$$<br>\sum_{j = 0}^{k} \alpha_j e_{n + j} = h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u_{n + j}) - f(t_{n + j}, v_{n + j})]<br>$$<br>记 $hb_n$ 为：<br>$$<br>hb_n=h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u_{n + j}) - f(t_{n + j}, v_{n + j})]<br>$$<br>进一步得到<br>$$<br>e_{n + k} = \frac{1}{\alpha_k}(-\alpha_{k - 1}e_{n + k - 1} - \cdots - \alpha_0 e_n + hb_n)<br>$$<br>将 $k$ 个连续的 $e_i$ 构成向量形式：<br>$$<br>\begin{bmatrix}e_{n + k}\e_{n + k - 1}\\vdots\e_{n + 1}\end{bmatrix}=</p><p>\begin{bmatrix}<br>-\frac{\alpha_{k - 1}}{\alpha_k}   &amp;-\frac{\alpha_{k - 2}}{\alpha_k}    &amp;\cdots&amp;    -\frac{\alpha_0}{\alpha_k}  \   1&amp;0&amp;\cdots&amp;0\    \vdots&amp;\ddots&amp;\ddots&amp;\vdots\0&amp;\cdots&amp;1&amp;0\end{bmatrix}</p><p>\begin{bmatrix}e_{n + k - 1}\e_{n + k - 2}\\vdots\e_{n}\end{bmatrix}+\begin{bmatrix}h\frac{b_n}{\alpha_k}\0\\vdots\0\end{bmatrix}<br>$$<br>即<br>$$<br>E_{n + 1} = CE_n + B_n<br>$$<br>类似数值代数中迭代法</p><p>且<br>$$<br>E_n = C^nE_0 + \sum_{l = 0}^{n - 1} C^l B_{n - 1 - l}<br>$$</p><h3 id="关于-C-n-有界性分析">关于 $C^n$ 有界性分析</h3><p><strong>特征方程</strong></p><p>计算 $\det(C - \lambda I_k)$ ，其结果为<br>$$<br>(\alpha_k\lambda^k+\cdots+\alpha_1\lambda+\alpha_0)\cdot(-1)^k\alpha_k^{-1}<br>$$<br>记<br>$$<br>\rho(\lambda)=\alpha_k\lambda^k+\cdots+\alpha_1\lambda+\alpha_0<br>$$<br><strong>利用 Jordan 标准型计算</strong></p><p>设 $\lambda_j$ 是 $C$ 的特征值，$\displaystyle x_j=(d_{k - 1},\cdots,d_0)^T$ 是相应特征向量 ，则有 $Cx_j=\lambda_jx_j$ ，由此推导出一系列等式：</p><p>$$<br>\begin{align}<br>-\alpha_k^{-1}&amp;(\alpha_{k - 1}d_{k - 1}+\cdots+\alpha_1d_1+\alpha_0d_0)=\lambda_jd_{k - 1} \<br>&amp;d_{k - 2}=\lambda_jd_{k - 3} ，\cdots ，d_1=\lambda_jd_0<br>\end{align}<br>$$<br>进而得到<br>$$<br>d_{k - 1}=\lambda_j^{k - 1}d_0\<br>x_j = d_0(\lambda_j^{k - 1},\cdots,\lambda_j,1)<br>$$<br>因而 $C$ 的每个特征值的特征子空间维数都是 1，即每个特征值几何重数为 1，每个特征值的 Jordan 块只有 1 块。记 $C$ 的 Jordan 标准型为 $J$</p><p>则<br>$$<br>C = PJP^{-1}<br>$$<br><strong>Jordan 块形式：</strong>$J$ 的 Jordan 块要么是 $\lambda$ ，要么是 $J_r(\lambda)$，$r$ 是 $\lambda$ 的重数<br>$$<br>J_r(\lambda)=\begin{bmatrix}<br>\lambda &amp; 1       &amp; \cdots &amp; 0 \<br>0       &amp; \lambda &amp; \ddots &amp; \vdots \<br>\vdots  &amp; \vdots  &amp; \ddots &amp; 1 \<br>0       &amp; 0       &amp; \cdots &amp; \lambda<br>\end{bmatrix}<br>$$</p><p>$\displaystyle C^n = PJ^nP^{-1}$ ，且 $J^n$ 也是分块矩阵，每一块形式为 $\lambda^n$ 或 $J_r^n$<br>$$<br>J_r^n(\lambda)=\begin{bmatrix}<br>\lambda &amp; c_n^1\lambda^{n-1}-\cdots c_n^{r-1}\lambda^{n-r+1}       &amp; \cdots &amp; 0 \<br>0       &amp; \lambda &amp; \ddots &amp; \vdots \<br>\vdots  &amp; \vdots  &amp; \ddots &amp; c_n^1\lambda^{n-1} \<br>0       &amp; 0       &amp; \cdots &amp; \lambda<br>\end{bmatrix}<br>$$</p><p>对于 $J_r=\lambda I + S$ ，（其中 $S$ 是幂零矩阵）<br>$$<br>S=\begin{bmatrix}<br>0&amp; 1       &amp; \cdots &amp; 0 \<br>0       &amp; 0  &amp; \ddots &amp; \vdots \<br>\vdots  &amp; \vdots  &amp; \ddots &amp; 1 \<br>0       &amp; 0       &amp; \cdots &amp; 0<br>\end{bmatrix}<br>\quad</p><p>S^2=\begin{bmatrix}<br>0 &amp; 0 &amp;1      &amp; \cdots &amp; 0 \<br>0       &amp; 0&amp; \ddots &amp; \ddots &amp;\vdots\<br>0 &amp; 0 &amp;\ddots &amp;\ddots &amp;1\<br>\vdots  &amp; \vdots  &amp; \ddots &amp; 0 &amp;0\<br>0       &amp; 0       &amp; \cdots &amp; 0&amp;0<br>\end{bmatrix} \quad</p><p>S^r=0<br>$$</p><p>利用二项式定理计算<br>$$<br>\begin{align*}<br>J_r^n &amp;= (\lambda I+S)^n  \<br>&amp;=\sum_{j = 0}^{n}C_{n}^{j}\lambda^{n - j}S^j  \<br>&amp;=\sum_{j = 0}^{r - 1}C_{n}^{j}\lambda^{n - j}S^j<br>\end{align*}<br>$$<br>这里 $\displaystyle C_{n}^{j}=\frac{n!}{j!(n - j)!}$</p><h3 id="引理-1-1">引理 1.1</h3><p>$C^n$有界 $\Leftrightarrow |\lambda_j| \leq 1$ ，且若 $|\lambda_j| = 1$ ，则 $\lambda_j$ 是单根</p><p>$C^n$有极限 $\Leftrightarrow |\lambda_j| \leq 1$ ，且若 $|\lambda_j| = 1$ ，则 $\lambda_j$ 不仅是单根且 $\lambda_j = 1$</p><p>$C^n \to 0 \Leftrightarrow |\lambda_j| &lt; 1$</p><h3 id="定理：线性多步法稳定的充要条件">定理：线性多步法稳定的充要条件</h3><p>线性 $k$ 步法稳定 $\Leftrightarrow$ 第一特征多项式 $\rho(\lambda)$ 的根满足 $|\lambda| \leq 1$ ，且位于单位圆周上的根都是单根（即 $\rho(\lambda)$ 满足根条件</p><p><strong>证明</strong></p><p><strong>必要性证明</strong></p><p>将 $k$ 步法用于方程 $u’ = 0$ ，此时 $f(t, u) \equiv 0$ ，则 $\displaystyle \sum_{j = 0}^{k} \alpha_j u_{n + j} = 0$ ，${u_n = 0}$ 是上述方程的平凡解。</p><p>因为 $k$ 步法稳定，所以 $\exists \tau, h_0$ ，使得当 $0 &lt; h &lt; h_0$ 时，$\displaystyle \max_{n \leq \frac{T}{h}} |u_n| \leq \tau \max_{0 \leq j \leq k} |u_j|$ ，即 ${u_n}$ 关于 $n, h$ 一致有界。</p><p>又因为 $u_n = C^n u_0$ （这里 $\displaystyle u_0 = [u_{k - 1}, \cdots, u_0]^T$ ，$\displaystyle u_n = [u_{n + k - 1}, \cdots, u_n]^T$ ），所以 ${C^n}$ 一致有界，从而 $\rho(\lambda)$ 满足根条件。</p><p><strong>充分性证明</strong></p><p>设 ${u_n}, {v_n}$ 是 $k$ 步法的两个解，令 $e_n = u_n - v_n$ ，则<br>$$<br>\displaystyle \sum_{j = 0}^{k} \alpha_j e_{n + j} = h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u_{n + j}) - f(t_{n + j}, v_{n + j})] = hb_n<br>$$<br>设 $B = \max{|\beta_0|, \cdots, |\beta_k|}$ ，由 $f$ 关于 $u$ 满足 Lipschitz 条件，可得<br>$$<br>|b_n| \leq B\cdot L \sum_{j = 0}^{k} |e_{n + j}|<br>$$<br>记 $\displaystyle E_n = (e_{n + k - 1}, \cdots, e_n)^T$ ，$\displaystyle B_n = (h\alpha_k^{-1}b_n, 0, \cdots, 0)^T$ ，则 $E_{n + 1} = CE_n + B_n$ ，进而有<br>$$<br>E_n = C^n E_0 + \sum_{l = 0}^{n - 1} C^l B_{n - 1 - l}<br>$$<br>由于 $\rho(\lambda)$ 满足根条件，所以 $|C^n| \leq M, \forall n$ ，且<br>$$<br>|B_n| \leq h|\alpha_k^{-1}| |b_n| \leq h|\alpha_k^{-1}| \cdot B\cdot L \sum{j = 0}^{k} |e{n + j}|<br>$$<br>经过推导可得<br>$$<br>\begin{align}<br>|E_n| &amp;\leq M|E_0| + \sum_{l = 0}^{n - 1} M\cdot h|\alpha_k^{-1}| \cdot B\cdot L \sum_{j = 0}^{k} |e_{n - 1 - l + j}| \&amp;\leq M|E_0| + M_1 \sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - 1 - l + j}|<br>\end{align}<br>$$<br>对 $\displaystyle \sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}|$ 进行放缩：<br>$$<br>\sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}|=\sum_{l = 0}^{n - 1} |e_{n + k - 1 - l}|+\sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}|<br>$$<br>利用向量范数性质，有<br>$$<br>\sum_{l = 0}^{n - 1} |e_{n + k - 1 - l}|+\sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}| \leq \sum_{l = 0}^{n - 1} |E_{n - l - 1}|+\sum_{l = 0}^{n - 1} \sqrt{k} |E_{n - l - 1}|<br>$$<br>进一步得到<br>$$<br>\sum_{l = 0}^{n - 1} |E_{n - l - 1}|+\sum_{l = 0}^{n - 1} \sqrt{k} |E_{n - l - 1}|=|E_n|+(1 + \sqrt{k})\sum_{i = 0}^{n - 1} |E_i|<br>$$<br>结合前面 $|E_n|$ 的表达式<br>$$<br>|E_n| \leq M|E_0| + M B L|\alpha_k^{-1}| h |E_n|+M B L|\alpha_k^{-1}| h\cdot(\sqrt{k}+1)\sum_{l = 0}^{n - 1} |E_l|<br>$$<br>在 $\displaystyle MBL|\alpha_k^{-1}| h_0 &lt; 1$ 条件下，令 $\displaystyle K_1=\frac{M}{1 - M B L|\alpha_k^{-1}| h_0}$ ，$\displaystyle K_2 = K_1 M B L|\alpha_k^{-1}|(\sqrt{k}+1)$ ，可得<br>$$<br>|E_n| \leq M|E_0| + M B L|\alpha_k^{-1}| h |E_n|+M B L|\alpha_k^{-1}| h\cdot(\sqrt{k}+1)\sum_{l = 0}^{n - 1} |E_l|<br>$$<br>再由 Gronwall 不等式，得到<br>$$<br>|E_n| \leq e^{K_2 T}(K_1 + K_2 h_0)|E_0|<br>$$<br>进而有<br>$$<br>\max_{n \leq \frac{T}{h}} |u_n - v_n| \leq \overline{c} \max_{0 \leq j \leq k} |u_j - v_j|<br>$$</p><p>说明方法稳定</p><p>应用：Euler 法稳定性、Adams 外插和内插法稳定性</p><h2 id="收敛性与误差估计">收敛性与误差估计</h2><p><strong>定义与设定</strong>：设真解 $u(t_n)$ 和数值解 $u_n$ 满足 ：<br>$$<br>\begin{align}<br>\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) &amp;= h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j})) + R_n \<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} &amp;= h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u_{n + j})<br>\end{align}<br>$$</p><p>令 $\displaystyle e_n = u(t_n) - u_n$</p><p>则<br>$$<br>\begin{align}<br>\sum_{j = 0}^{k} \alpha_j e_{n + j} &amp;= h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u(t_{n + j})) - f(t_{n + j}, u_{n + j})]+R_n \&amp;= hb_n + R_n<br>\end{align}<br>$$</p><p>设 $\displaystyle R_n = C_{p + 1}h^{p + 1}$ ，记 $\displaystyle E_{n + 1} = CE_n + B^{\ast}_n$ ，其中 $\displaystyle B^{\ast}_n=(h\alpha_k^{-1}b^{\ast}_n, 0, \cdots, 0)^T$ ，且<br>$$<br>\displaystyle |B_n^*| \leq h B L|\alpha_k^{-1}| \sum_{j = 0}^{k} |e_{n + j}|+M_{p + 1}h^{p + 1}<br>$$</p><h3 id="定理">定理</h3><p>相容性 + 稳定性 $\Rightarrow$ 收敛。且若 $E_0 = 0$ ，则 $|E_n| \leq C h^p$  。即当数值方法满足<strong>相容性</strong>（差分算子能逼近微分算子）和<strong>稳定性</strong>（解对初值连续依赖）时，随着步长 $h$ 趋于 0 ，数值解会收敛到真解 ，且在初始误差为 0 时，误差阶为 $O(h^p)$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>积分与求和转换的思想求解一类积分不等式问题</title>
      <link href="/2025/05/14/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E7%A7%AF%E5%88%86%E4%B8%8E%E6%B1%82%E5%92%8C%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%80%9D%E6%83%B3%E6%B1%82%E8%A7%A3%E4%B8%80%E7%B1%BB%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/14/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E7%A7%AF%E5%88%86%E4%B8%8E%E6%B1%82%E5%92%8C%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%80%9D%E6%83%B3%E6%B1%82%E8%A7%A3%E4%B8%80%E7%B1%BB%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>核心思想：积分就是求和，求和就是积分，一个针对连续量，一个针对离散量，两者可以互相转化，二者既对立又统一</strong></p><h2 id="从一道经典的考研数学真题引入">从一道经典的考研数学真题引入</h2><p>设 $f(x)$ 在 $[1,+\infty)$ 上连续且单调递减，并且在定义域内 $$f(x)&gt;0$$，$$\displaystyle a_n=\sum_{k=1}^{n}f(k)-\int_1^{n}f(x)dx$$，证明：数列 $$a_n$$ 收敛</p><p><strong>解：</strong> <strong>第一步：判断数列 $a_n$ 的单调性</strong></p><p><strong>计算</strong> $$a_{n + 1}-a_{n}:$$<br>$$<br>\begin{align}</p><pre><code>a_&#123;n+1&#125;-a_&#123;n&#125; &amp;= \left(\sum_&#123;k = 1&#125;^&#123;n + 1&#125;f(k)-\int_&#123;1&#125;^&#123;n + 1&#125;f(x)dx\right)-\left(\sum_&#123;k = 1&#125;^&#123;n&#125;f(k)-\int_&#123;1&#125;^&#123;n&#125;f(x)dx\right) \nonumber \\     &amp;= f(n + 1)-\int_&#123;n&#125;^&#123;n + 1&#125;f(x)dx \nonumber \\</code></pre><p>\end{align}<br>$$<br>根据积分中值定理，若函数 $y = f(x)$ 在区间 $[a,b]$ 上连续，则在 $[a,b]$ 上至少存在一点 $\xi$，使得 $$\displaystyle \int_{a}^{b}f(x)dx=(b - a)f(\xi)$$，则存在 $$\xi\in(n,n + 1)$$，使得 $$\displaystyle \int_{n}^{n + 1}f(x)dx=f(\xi)$$</p><p>因为 $f(x)$ 单调递减，且 $n&lt;\xi&lt;n + 1$，所以<br>$$<br>\displaystyle f(n + 1)-\int_{n}^{n + 1}f(x)dx=f(n + 1)-f(\xi)\leq0<br>$$<br>（当且仅当 $f(x)$ 为常函数时取等号，但 $f(x)$ 单调递减不是常函数 ），即 $$a_{n + 1}\leq a_{n}$$，所以数列 $${a_{n}}$$ 单调递减。</p><p><strong>第二步：对</strong> $$\displaystyle a_n$$ <strong>进行变形</strong></p><p>已知 $$\displaystyle a_{n}=\sum_{k = 1}^{n}f(k)-\int_{1}^{n}f(x)dx$$，将 $$\displaystyle \int_{1}^{n}f(x)dx$$ 进行拆分：$$\displaystyle \int_{1}^{n}f(x)dx=\sum_{k = 1}^{n - 1}\int_{k}^{k + 1}f(x)dx$$</p><p>则<br>$$<br>\displaystyle a_{n}=\sum_{k = 1}^{n}f(k)-\sum_{k = 1}^{n - 1}\int_{k}^{k + 1}f(x)dx=\sum_{k = 1}^{n - 1}\left(f(k)-\int_{k}^{k + 1}f(x)dx\right)+f(n)<br>$$<br>根据积分中值定理，对于 $$\displaystyle \int_{k}^{k + 1}f(x)dx$$，存在 $$\displaystyle \xi_{k}\in(k,k + 1)$$，使得 $$\displaystyle \int_{k}^{k + 1}f(x)dx=f(\xi_{k})$$</p><p>因为 $$f(x)$$ 在 $$[1,+\infty)$$ 单调递减，所以 $$\displaystyle f(k)&gt;f(\xi_{k})$$  $$(\displaystyle k&lt;\xi_{k}&lt;k + 1)$$，那么<br>$$<br>\displaystyle f(k)-\int_{k}^{k + 1}f(x)dx=f(k)-f(\xi_{k})&gt;0<br>$$<br>且 $$f(n)&gt;0$$，所以 $$a_{n}&gt;0$$，即数列 $${a_{n}}$$ 有下界 $$0$$</p><p><strong>第三步：根据单调有界准则得出结论</strong></p><p>根据单调有界准则：单调递减且有下界的数列必收敛。</p><p>由于数列 $${a_{n}}$$ 单调递减且有下界 $$0$$，故数列 $${a_{n}}$$ 收敛。</p><p><strong>通过此题的结论我们可以解决一系列有关数列收敛的问题</strong></p><p>如这道经典的有关欧拉常数的数列， $$a_{n}=1+\frac{1}{2}+\frac{1}{3}+\cdots+\frac{1}{n}-\ln n$$，显然是令本题中的 $$\displaystyle f(x)=\frac{1}{x}$$ 得到的</p><p><strong>下面我们继续用积分与求和转换的思想证明一类积分不等式问题</strong></p><h2 id="例题一">例题一</h2><p>设 $f(x)$ 在 $[0,1]$ 连续，对 $\forall x,y$ 均有 $\displaystyle \vert f(x) - f(y)\vert\leq M\cdot\vert x - y\vert$，证：$$\displaystyle \left|\int_{0}^{1}f(x)dx - \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})\right|\leq\frac{M}{2n}$$</p><p><strong>解：</strong> <strong>第一步：对式子进行变形</strong></p><p>首先将 $$\displaystyle \left|\int_{0}^{1}f(x)dx - \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})\right|$$ 进行处理，把 $$\displaystyle \int_{0}^{1}f(x)dx$$ 拆分为 $$\displaystyle \sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(x)dx$$，把 $$\displaystyle \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})$$ 写成 $$\displaystyle \sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(\frac{k}{n})dx$$</p><p>因为<br>$$<br>\displaystyle \int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(\frac{k}{n})dx=f(\frac{k}{n})\int_{\frac{k - 1}{n}}^{\frac{k}{n}}dx=\frac{1}{n}f(\frac{k}{n}))<br>$$<br>所以原式变成了<br>$$<br>\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(x)dx-\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(\frac{k}{n})dx\right|<br>$$<br>合并后为<br>$$<br>\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(f(x)-f(\frac{k}{n}))dx\right|<br>$$<br>这一步是通过积分区间的拆分和等价变形，将原式转化为便于后续处理的形式。</p><p><strong>第二步：利用绝对值不等式放缩</strong></p><p>根据绝对值不等式 $$\displaystyle \left|\int_{a}^{b}g(x)dx\right|\leq\int_{a}^{b}\vert g(x)\vert dx$$，对于 $$\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(f(x)-f(\frac{k}{n}))dx\right|$$，可得<br>$$<br>\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(f(x)-f(\frac{k}{n}))dx\right|\leq\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}\vert f(x)-f(\frac{k}{n})\vert dx<br>$$<br><strong>第三步：代入已知条件进一步放缩</strong></p><p>已知对 $$\forall x,y$$ 均有 $$\displaystyle \vert f(x) - f(y)\vert\leq M\cdot\vert x - y\vert$$，在这里 $$\displaystyle y = \frac{k}{n}$$，所以 $$\displaystyle \vert f(x)-f(\frac{k}{n})\vert\leq M\cdot\vert x - \frac{k}{n}\vert$$ 。由于在区间 $$\displaystyle [\frac{k - 1}{n},\frac{k}{n}]$ 上，$\displaystyle x\leq \frac{k}{n}$$，则 $$\displaystyle \vert x - \frac{k}{n}\vert=\frac{k}{n}-x$$，那么<br>$$<br>\displaystyle \sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}\vert f(x)-f(\frac{k}{n})\vert dx\leq M\cdot\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx<br>$$<br><strong>第四步：计算积分并化简</strong></p><p>计算 $$\displaystyle \int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx$$，根据积分公式 $$\displaystyle \int(ax + b)dx=\frac{ax^{2}}{2}+bx + C$$ ，可得<br>$$<br>\displaystyle \int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx=-\frac{1}{2}(x - \frac{k}{n})^{2}\big|<em>{\frac{k - 1}{n}}^{\frac{k}{n}}<br>$$<br>代入上下限：<br>$$<br>\displaystyle -\frac{1}{2}(x - \frac{k}{n})^{2}\big|</em>{\frac{k - 1}{n}}^{\frac{k}{n}}=-\frac{1}{2}(0 - (\frac{k}{n}-\frac{k - 1}{n})^{2})=\frac{1}{2n^{2}}<br>$$<br>则<br>$$<br>\displaystyle M\cdot\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx = M\cdot\sum_{k = 1}^{n}\frac{1}{2n^{2}}<br>$$<br>因为 $$\displaystyle \sum_{k = 1}^{n}1=n$$，所以 $$\displaystyle M\cdot\sum_{k = 1}^{n}\frac{1}{2n^{2}}=\frac{M}{2n}$$</p><p>综上，通过以上逐步推导，证明了 $$\displaystyle \left|\int_{0}^{1}f(x)dx - \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})\right|\leq\frac{M}{2n}$$</p><h2 id="例题二">例题二</h2><p><strong>证明：</strong><br>$$<br>\displaystyle (\ln(\prod_{i = 1}^{n}i^{i}))\leq\int_{2}^{n}x\cdot\ln xdx\leq\frac{n^{2}}{2}\cdot\ln n - \frac{n^{2}}{4}+1<br>$$<br><strong>证：</strong> <strong>先证左边：</strong></p><p>根据对数运算法则 $$\displaystyle \ln(\prod_{i = 1}^{n}i^{i})=\sum_{i = 1}^{n - 1}i\ln i$$ ，即证明 $$\displaystyle \sum_{i = 2}^{n - 1}i\ln i\leq\int_{2}^{n}x\ln xdx$$</p><p>将 $$\displaystyle \int_{2}^{n}x\ln xdx$$ 进行拆分：<br>$$<br>\displaystyle \int_{2}^{n}x\ln xdx=\sum_{i = 2}^{n - 1}\int_{i}^{i + 1}x\ln xdx<br>$$<br>令 $$f(x)=x\ln x$$，当 $$\displaystyle x\in(0,\frac{1}{e})$$ 时，$$f^\prime(x)&lt;0$$，$$f(x)$$ 单调递减；当 $$\displaystyle x\in(\frac{1}{e},+\infty)$$ 时，$$f^\prime(x)&gt;0$$，$$f(x)$$ 单调递增</p><p>对于 $$\displaystyle i\leq x\leq i + 1$$（$$i\geq2$$），因为 $$f(x)$$ 单调递增，所以 $$\displaystyle x\ln x\geq i\ln i$$<br>那么<br>$$<br>\displaystyle \sum_{i = 2}^{n - 1}\int_{i}^{i + 1}i\ln i dx\leq\sum_{i = 2}^{n - 1}\int_{i}^{i + 1}x\ln xdx<br>$$<br>即<br>$$<br>\displaystyle \sum_{i = 2}^{n - 1}i\ln i\leq\int_{2}^{n}x\ln xdx<br>$$<br><strong>再证右边：</strong></p><p>利用分部积分法计算 $$\displaystyle \int_{2}^{n}x\ln xdx$$</p><p>根据分部积分公式 $$\displaystyle \int u dv = uv-\int v du$$，令 $$u = \ln x$$，$$dv = xdx$$，则 $$\displaystyle du=\frac{1}{x}dx$$，$$\displaystyle v=\frac{x^{2}}{2}$$</p><p>所以 $$\displaystyle \int_{2}^{n}x\ln xdx=\frac{x^{2}}{2}\ln x\big|<em>{2}^{n}-\int</em>{2}^{n}\frac{x}{2}dx$$</p><p>计算<br>$$<br>\begin{align*}<br>&amp;\frac{x^{2}}{2}\ln x\big|<em>{2}^{n}-\int</em>{2}^{n}\frac{x}{2}dx\<br>=&amp;\left(\frac{n^{2}}{2}\ln n - \frac{2^{2}}{2}\ln 2\right)-\int_{2}^{n}\frac{x}{2}dx\<br>=&amp;\left(\frac{n^{2}}{2}\ln n - \frac{2^{2}}{2}\ln 2\right)-\left[\frac{x^{2}}{4}\right]<em>{2}^{n}\<br>=&amp;\left(\frac{n^{2}}{2}\ln n - \frac{2^{2}}{2}\ln 2\right)-\left(\frac{n^{2}}{4}-\frac{2^{2}}{4}\right)\<br>=&amp;\frac{n^{2}}{2}\ln n - \frac{n^{2}}{4}+1 - 2\ln 2<br>\end{align*}<br>$$<br>因为 $$- 2\ln 2\leq0$$，所以<br>$$<br>\displaystyle \int</em>{2}^{n}x\ln xdx\leq\frac{n^{2}}{2}\ln n - \frac{n^{2}}{4}+1<br>$$<br>综上，不等式 $$\displaystyle \ln(\prod_{i = 1}^{n}i^{i})\leq\int_{2}^{n}x\ln xdx\leq\frac{n^{2}}{2}\ln n - \frac{n^{2}}{4}+1$$ 得证</p><h2 id="例题三">例题三</h2><p>设 $$f(x)$$ 在 $$[a,b]$$ 二阶连续可导，证明 $$\displaystyle \lim_{n \to \infty} \left(n^{2} \int_{a}^{b} f(x)dx - \frac{b - a}{n} \sum_{k = 1}^{n} f(a + \frac{2k - 1}{2n}(b - a))\right)=\frac{(b - a)^{3}}{24}[f^\prime(b)-f^\prime(a)]$$</p><p><strong>解：</strong> <strong>第一步：构造</strong> $$I_n$$ <strong>并变形</strong></p><p>定义<br>$$<br>\displaystyle I_{n}=\int_{a}^{b} f(x)dx - \frac{b - a}{n} \sum_{k = 1}^{n} f(a + \frac{2k - 1}{2n}(b - a))<br>$$<br>将积分区间 $$[a,b]$$ 进行 $$n$$ 等分，每个小区间为 $$\displaystyle [a+\frac{k - 1}{n}(b - a),a+\frac{k}{n}(b - a)]$$</p><p>则<br>$$<br>\displaystyle I_{n}=\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} f(x)dx - \sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} f(a + \frac{2k - 1}{2n}(b - a))dx<br>$$<br>进一步化为<br>$$<br>\displaystyle I_{n}=\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} [f(x)-f(a + \frac{2k - 1}{2n}(b - a))]dx<br>$$<br><strong>步骤二：利用泰勒公式</strong></p><p>根据泰勒公式<br>$$<br>\displaystyle f(x)=f(x_{0})+f^\prime(x_{0})(x - x_{0})+\frac{f^{\prime\prime}(\xi)}{2!}(x - x_{0})^{2}  \quad(\xi \ 介于\ x\ 与\ x_{0}\ 之间)<br>$$<br>在区间 $$\displaystyle [a+\frac{k - 1}{n}(b - a),a+\frac{k}{n}(b - a)]$$ 上，令 $$\displaystyle x_{0}=a + \frac{2k - 1}{2n}(b - a)$$</p><p>则<br>$$<br>\displaystyle f(x)-f(a + \frac{2k - 1}{2n}(b - a))=\frac{f^{\prime\prime}(\xi_{k})}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2} \quad(\xi_{k}\ 在该区间内)<br>$$<br>所以<br>$$<br>\displaystyle I_{n}=\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} \frac{f^{\prime\prime}(\xi_{k})}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx<br>$$<br><strong>步骤三：放缩与求极限</strong></p><p>设 $$\displaystyle f^{\prime\prime}(x)$$ 在 $$\displaystyle [a+\frac{k - 1}{n}(b - a),a+\frac{k}{n}(b - a)]$$ 上的最大值和最小值分别为 $$M_{k}$$，$$m_{k}$$</p><p>因为 $$\displaystyle m_{k}\leq f^{\prime\prime}(\xi_{k})\leq M_{k}$$ ，所以<br>$$<br>\displaystyle \sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} \frac{m_{k}}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx\leq I_{n}\leq\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} \frac{M_{k}}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx<br>$$<br>计算<br>$$<br>\displaystyle \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} [x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx=\frac{1}{3}(\frac{b - a}{2n})^{3}<br>$$<br>则<br>$$<br>\displaystyle \sum_{k = 1}^{n} \frac{m_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}\leq I_{n}\leq\sum_{k = 1}^{n} \frac{M_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}<br>$$<br>两边同乘 $$n^{2}$$ 得到<br>$$<br>\displaystyle n^{2}\sum_{k = 1}^{n} \frac{m_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}\leq n^{2}I_{n}\leq n^{2}\sum_{k = 1}^{n} \frac{M_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}<br>$$<br>当 $$\displaystyle n \to \infty$$ 时，利用定积分定义<br>$$<br>\displaystyle \lim_{n \to \infty} \sum_{k = 1}^{n} \frac{m_{k}}{n}\cdot\frac{b - a}{n}=\int_{a}^{b} f^{\prime\prime}(x)dx \ \displaystyle \lim_{n \to \infty} \sum_{k = 1}^{n} \frac{M_{k}}{n}\cdot\frac{b - a}{n}=\int_{a}^{b} f^{\prime\prime}(x)dx<br>$$<br>又因为 $$\displaystyle \int_{a}^{b} f^{\prime\prime}(x)dx=f^\prime(b)-f^\prime(a)$$ ，经过计算可得<br>$$<br>\displaystyle \lim_{n \to \infty} (n^{2}I_{n})=\frac{(b - a)^{3}}{24}[f^\prime(b)-f^\prime(a)]<br>$$<br>即<br>$$<br>\lim_{n \to \infty} \left(n^{2} \int_{a}^{b} f(x)dx - \frac{b - a}{n} \sum_{k = 1}^{n} f(a + \frac{2k - 1}{2n}(b - a))\right)=\frac{(b - a)^{3}}{24}[f^\prime(b)-f^\prime(a)]<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分数阶导数与积分的数学表达与应用</title>
      <link href="/2025/05/13/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E5%88%86%E6%95%B0%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E7%A7%AF%E5%88%86%E7%9A%84%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2025/05/13/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E5%88%86%E6%95%B0%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E7%A7%AF%E5%88%86%E7%9A%84%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>一、基本定义与性质</h1><h2 id="1-Riemann-Liouville分数阶积分">1. Riemann-Liouville分数阶积分</h2><p><strong>定义式</strong>：<br>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t-\alpha)^{\alpha-1} f(\tau) d\tau \quad (\alpha&gt;0)<br>$$</p><p><strong>性质</strong>：</p><ul><li>半群性：$\displaystyle I^\alpha I^\beta = I^{\alpha+\beta}$</li><li>当$\alpha\to n^+$时收敛于n重积分</li><li>对常数$C$的积分：$\displaystyle I^\alpha C = \frac{C(t-a)^\alpha}{\Gamma(\alpha+1)}$</li></ul><h2 id="2-Caputo分数阶导数">2. Caputo分数阶导数</h2><p><strong>定义式</strong>：<br>$$<br>^C D^\alpha f(t) = \frac{1}{\Gamma(m-\alpha)} \int_a^t \frac{f^{(m)}(\tau)}{(t-\tau)^{\alpha+1-m}} d\tau<br>$$<br>其中$m-1 &lt; \alpha \leq m$, $m\in\mathbb{N}$</p><p><strong>优势</strong>：</p><ul><li>常数导数为零：$^C D^\alpha C = 0$</li><li>允许传统初始条件：$\displaystyle f(a), f’(a),…,f^{(m-1)}(a)$</li></ul><h2 id="3-Grunwald-Letnikov定义">3. Grünwald-Letnikov定义</h2><p><strong>离散形式</strong>：<br>$$<br>D^\alpha f(t) = \lim_{h\to 0} h^{-\alpha} \sum_{k=0}^{[(t-a)/h]} (-1)^k \binom{\alpha}{k} f(t-kh)<br>$$</p><p><strong>权重系数递推</strong>：<br>$$<br>w_0^{(\alpha)} = 1, \quad w_k^{(\alpha)} = \left(1-\frac{\alpha+1}{k}\right)w_{k-1}^{(\alpha)}<br>$$</p><p><strong>本文我们主要关注Riemann-Liouville 分数阶积分与分数阶导数的性质</strong></p><h1>二、Riemann-Liouville 分数阶积分与分数阶导数的关系推导</h1><h2 id="1-Riemann-Liouville-分数阶积分的定义">1. Riemann-Liouville 分数阶积分的定义</h2><p>设函数 $f(t)$ 在区间 $[a, t]$ 上定义，阶数 $\alpha &gt; 0 $，则 <strong>Riemann-Liouville 左侧分数阶积分</strong> 定义为：<br>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t - \tau)^{\alpha - 1} f(\tau) , d\tau,<br>$$</p><p>其中 $\Gamma(\alpha)$ 是 Gamma 函数。</p><hr><h2 id="2-Riemann-Liouville-分数阶导数的定义">2. Riemann-Liouville 分数阶导数的定义</h2><p>设 $n = \lceil \alpha \rceil$ 是不小于 $ \alpha $ 的最小整数，则 <strong>Riemann-Liouville 分数阶导数</strong> 定义为：</p><p>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n} \left( I^{n - \alpha} f(t) \right) = \frac{1}{\Gamma(n - \alpha)} \frac{d^n}{dt^n} \int_a^t (t - \tau)^{n - \alpha - 1} f(\tau) , d\tau.<br>$$</p><blockquote><p>即：<strong>分数阶导数是对分数阶积分的整数阶导数。</strong></p></blockquote><hr><h2 id="3-从积分推导到导数">3. 从积分推导到导数</h2><p>设有：</p><p>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t - \tau)^{\alpha - 1} f(\tau) , d\tau,<br>$$</p><p>我们希望找到某种操作 $D^\alpha$ 使得：</p><p>$$<br>D^\alpha \left( I^\alpha f(t) \right) = f(t).<br>$$</p><p>使用分数阶导数的定义，我们有：</p><p>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n} \left( I_a^{n - \alpha} f(t) \right),<br>$$</p><p>那么对于 $f(t) = I^\alpha g(t)$，有：</p><p>$$<br>D^\alpha f(t) = D^\alpha \left( I^\alpha g(t) \right) = g(t),<br>$$</p><p>因为：</p><p>$$<br>D^\alpha \left( I^\alpha \right) = \text{Identity operator}.<br>$$</p><hr><h2 id="4-总结关系">4. 总结关系</h2><ul><li><p>分数阶积分是分数阶导数的逆操作：<br>$$<br>D^\alpha \left( I^\alpha f(t) \right) = f(t).<br>$$</p></li><li><p>分数阶导数可以表示为先做积分，再做整数阶导数：<br>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n} \left( I^{n - \alpha} f(t) \right),<br>$$<br>其中 $n = \lceil \alpha \rceil$。</p></li></ul><hr><h2 id="5-特殊情况举例-0-alpha-1">5. 特殊情况举例  $( 0 &lt; \alpha &lt; 1 )$</h2><p>当 $0 &lt; \alpha &lt; 1$ 时，有：</p><ul><li><p>分数阶积分：<br>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t - \tau)^{\alpha - 1} f(\tau) , d\tau.<br>$$</p></li><li><p>分数阶导数：<br>$$<br>D^\alpha f(t) = \frac{d}{dt} \left( \frac{1}{\Gamma(1 - \alpha)} \int_a^t (t - \tau)^{-\alpha} f(\tau) , d\tau \right).<br>$$</p></li></ul><hr><h2 id="6-结论">6. 结论</h2><p>Riemann-Liouville 分数阶导数与积分之间的本质关系是：</p><p>$$<br>D^\alpha = \frac{d^n}{dt^n} \circ I^{n - \alpha},<br>$$</p><p>也即：</p><ul><li><strong>分数阶导数 = 整数阶导数 ∘ 分数阶积分</strong>；</li><li><strong>分数阶积分 = 分数阶导数的逆操作。</strong></li></ul><h1>三、重要数学特性</h1><h2 id="1-非局部性证明">1. 非局部性证明</h2><p>对于任意$t&gt;a$：<br>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n}\left[\frac{1}{\Gamma(n-\alpha)} \int_a^t \frac{f(\tau)}{(t-\tau)^{\alpha+1-n}} d\tau\right]<br>$$<br>其中$n=\lceil\alpha\rceil$</p><h2 id="2-Leibniz法则推广">2. Leibniz法则推广</h2><p>$$<br>D^\alpha(fg) = \sum_{k=0}^\infty \binom{\alpha}{k} (D^{\alpha-k}f) D^k g<br>$$</p><h2 id="3-Laplace变换关系">3. Laplace变换关系</h2><p>$$<br>\mathcal{L}{^C D^\alpha f(t)} = s^\alpha F(s) - \sum_{k=0}^{m-1} s^{\alpha-k-1} f^{(k)}(0^+)<br>$$</p><h1>四、数值实现方法</h1><h2 id="1-分数阶微积分的离散化方案">1. 分数阶微积分的离散化方案</h2><p><strong>Grunwald-Letnikov改进格式</strong>：<br>$$<br>D^\alpha f(t_n) \approx \frac{1}{h^\alpha} \sum_{k=0}^{n} w_k^{(\alpha)} f(t_{n-k}) + \mathcal{O}(h^p)<br>$$<br>其中$p$为精度阶数，权重系数满足：<br>$$<br>w_0^{(\alpha)} = 1, \quad w_k^{(\alpha)} = \left(1-\frac{\alpha+1}{k}\right)w_{k-1}^{(\alpha)}<br>$$</p><h2 id="2-短记忆原理实现">2. 短记忆原理实现</h2><p><strong>MATLAB代码示例</strong>：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[dy]</span> = <span class="title">fgl_deriv</span><span class="params">(a, y, h, L)</span></span></span><br><span class="line">    <span class="comment">% 参数说明：</span></span><br><span class="line">    <span class="comment">% a: 分数阶次 (0 &lt; a &lt; 1)</span></span><br><span class="line">    <span class="comment">% y: 输入信号序列</span></span><br><span class="line">    <span class="comment">% h: 采样步长</span></span><br><span class="line">    <span class="comment">% L: 记忆窗口长度</span></span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">length</span>(y);</span><br><span class="line">    dy = <span class="built_in">zeros</span>(<span class="built_in">size</span>(y));</span><br><span class="line">    weights = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">    weights(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">        weights(k+<span class="number">1</span>) = (<span class="number">1</span> - (a+<span class="number">1</span>)/k)*weights(k);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    M = <span class="built_in">min</span>(<span class="built_in">floor</span>(L/h), n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = M+<span class="number">1</span>:n</span><br><span class="line">        dy(<span class="built_in">i</span>) = sum(weights(<span class="number">1</span>:M+<span class="number">1</span>).*y(<span class="built_in">i</span>:<span class="number">-1</span>:<span class="built_in">i</span>-M)&#x27;)/h^a;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="3-分数阶微分方程求解器">3. 分数阶微分方程求解器</h2><h4 id="3-1-Predictor-Corrector算法完整推导">3.1 Predictor-Corrector算法完整推导</h4><p>对于分数阶初值问题：<br>$$<br>\begin{cases}<br>^C D^\alpha_t y(t) = f(t,y(t)), \quad 0 &lt; \alpha &lt; 1 \<br>y(0) = y_0<br>\end{cases}<br>$$</p><p><strong>离散化步骤</strong>：</p><ol><li><p><strong>分数阶积分近似</strong>：<br>$$<br>y(t_{n+1}) = y_0 + \frac{1}{\Gamma(\alpha)} \int_0^{t_{n+1}} (t_{n+1}-\tau)^{\alpha-1} f(\tau,y(\tau)) d\tau<br>$$</p></li><li><p><strong>预测项计算</strong>：<br>$$<br>y^{P}<em>{n+1} = y_0 + \frac{h^\alpha}{\Gamma(\alpha+1)} \sum</em>{j=0}^n b_{j,n+1} f(t_j,y_j)<br>$$<br>其中权重系数：<br>$$<br>b_{j,n+1} = (n+1-j)^\alpha - (n-j)^\alpha<br>$$</p></li><li><p><strong>校正项计算</strong>：<br>$$<br>y_{n+1} = y_0 + \frac{h^\alpha}{\Gamma(\alpha+2)} \left[ f(t_{n+1},y^{P}<em>{n+1}) + \sum</em>{j=0}^n a_{j,n+1} f(t_j,y_j) \right]<br>$$<br>校正权重：<br>$$<br>a_{j,n+1} =<br>\begin{cases}<br>n^{\alpha+1} - (n-\alpha)(n+1)^\alpha, &amp; j=0 \<br>(n-j+2)^{\alpha+1} + (n-j)^{\alpha+1} - 2(n-j+1)^{\alpha+1}, &amp; 1 \leq j \leq n \<br>1, &amp; j=n+1<br>\end{cases}<br>$$</p></li></ol><h3 id="3-2-Python实现代码">3.2 Python实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> gamma</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frac_pc_solver</span>(<span class="params">f, alpha, y0, t_span, h</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Predictor-Corrector方法求解分数阶微分方程</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        f: 右端函数 f(t,y)</span></span><br><span class="line"><span class="string">        alpha: 分数阶次 (0 &lt; alpha &lt; 1)</span></span><br><span class="line"><span class="string">        y0: 初始条件</span></span><br><span class="line"><span class="string">        t_span: 时间区间 [t0, tf]</span></span><br><span class="line"><span class="string">        h: 步长</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">        t: 时间节点数组</span></span><br><span class="line"><span class="string">        y: 解向量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t0, tf = t_span</span><br><span class="line">    t = np.arange(t0, tf + h, h)</span><br><span class="line">    n = <span class="built_in">len</span>(t) - <span class="number">1</span></span><br><span class="line">    y = np.zeros(n + <span class="number">1</span>)</span><br><span class="line">    y[<span class="number">0</span>] = y0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预计算权重</span></span><br><span class="line">    b_weights = [(k+<span class="number">1</span>)**alpha - k**alpha <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">    a_weights = np.zeros((n+<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">            a_weights[:,j] = np.arange(n+<span class="number">1</span>)**(alpha+<span class="number">1</span>) - \</span><br><span class="line">                            (np.arange(n+<span class="number">1</span>)-alpha)*(np.arange(n+<span class="number">1</span>)+<span class="number">1</span>)**alpha</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a_weights[j:,j] = (np.arange(n+<span class="number">1</span>-j)+<span class="number">2</span>)**(alpha+<span class="number">1</span>) + \</span><br><span class="line">                             (np.arange(n+<span class="number">1</span>-j))**(alpha+<span class="number">1</span>) - \</span><br><span class="line">                             <span class="number">2</span>*(np.arange(n+<span class="number">1</span>-j)+<span class="number">1</span>)**(alpha+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n_step <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># Predictor</span></span><br><span class="line">        y_p = y0 + (h**alpha/gamma(alpha+<span class="number">1</span>)) * \</span><br><span class="line">              <span class="built_in">sum</span>(b_weights[n_step - k] * f(t[k], y[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n_step+<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Corrector</span></span><br><span class="line">        sum_c = <span class="built_in">sum</span>(a_weights[n_step+<span class="number">1</span>, k] * f(t[k], y[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n_step+<span class="number">1</span>))</span><br><span class="line">        y[n_step+<span class="number">1</span>] = y0 + (h**alpha/gamma(alpha+<span class="number">2</span>)) * \</span><br><span class="line">                      (f(t[n_step+<span class="number">1</span>], y_p) + sum_c)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t, y</span><br></pre></td></tr></table></figure><h3 id="3-3-收敛性分析">3.3 收敛性分析</h3><h4 id="理论误差界">理论误差界</h4><p>对于分数阶微分方程：</p><p>$$<br>{}^C D^\alpha y(t) = f(t, y(t)), \quad y(0) = y_0<br>$$</p><p>Predictor-Corrector 方法的全局误差为：</p><p>$$<br>\max_{0 \leq t_n \leq T} |y(t_n) - y_n| \leq C \cdot h^{\min{2,1+\alpha}}<br>$$</p><p>其中：</p><ul><li>$C$ 依赖于 $\alpha$、$f$ 的 Lipschitz 常数和终态时间 $T$。</li><li>当 $\alpha \to 1^-$，收敛阶趋近于 2（与经典 ODE 一致）。</li></ul><hr><h4 id="数值验证实验">数值验证实验</h4><h5 id="测试方程：">测试方程：</h5><p>$$<br>{}^C D^{0.6} y(t) = \frac{\Gamma(4)}{\Gamma(3.4)} t^{2.4} - y(t), \quad y(0) = 0<br>$$</p><h5 id="解析解：">解析解：</h5><p>$$<br>y(t) = t^3 - \frac{\Gamma(4)}{\Gamma(3.4)} \int_0^t (t - \tau)^{2.4} \tau^3 , d\tau<br>$$<br><strong>python误差计算代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> gamma</span><br><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> quad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exact_solution</span>(<span class="params">t, alpha=<span class="number">0.6</span></span>):</span><br><span class="line">    <span class="comment"># 解析解计算（需数值积分）</span></span><br><span class="line">    integral = quad(<span class="keyword">lambda</span> tau: (t - tau)**(alpha - <span class="number">1</span>) * tau**<span class="number">3</span>, <span class="number">0</span>, t)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> t**<span class="number">3</span> - gamma(<span class="number">4</span>)/gamma(<span class="number">3.4</span>) * integral / gamma(alpha)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_errors</span>(<span class="params">alpha=<span class="number">0.6</span>, T=<span class="number">1</span>, steps=[<span class="number">0.1</span>, <span class="number">0.05</span>, <span class="number">0.025</span>, <span class="number">0.0125</span>]</span>):</span><br><span class="line">    errors = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> steps:</span><br><span class="line">        t, y = frac_pc_solver(<span class="keyword">lambda</span> t, y: gamma(<span class="number">4</span>)/gamma(<span class="number">3.4</span>) * t**<span class="number">2.4</span> - y,</span><br><span class="line">                             alpha, <span class="number">0</span>, [<span class="number">0</span>, T], h)</span><br><span class="line">        y_exact = np.array([exact_solution(ti) <span class="keyword">for</span> ti <span class="keyword">in</span> t])</span><br><span class="line">        errors[h] = np.<span class="built_in">max</span>(np.<span class="built_in">abs</span>(y - y_exact))</span><br><span class="line">    <span class="keyword">return</span> errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出误差表</span></span><br><span class="line">errors = compute_errors()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;| 步长 h | 最大误差 E_inf | 收敛阶 p |&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|--------|----------------|----------|&quot;</span>)</span><br><span class="line">h_list = <span class="built_in">sorted</span>(errors.keys())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h_list)):</span><br><span class="line">    h = h_list[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        p = <span class="string">&quot;--&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = np.log(errors[h_list[i-<span class="number">1</span>]] / errors[h]) / np.log(h_list[i-<span class="number">1</span>] / h)</span><br><span class="line">        p = <span class="string">f&quot;<span class="subst">&#123;p:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;| <span class="subst">&#123;h:<span class="number">.4</span>f&#125;</span> | <span class="subst">&#123;errors[h]:<span class="number">.4</span>e&#125;</span> | <span class="subst">&#123;p&#125;</span> |&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="高阶方法扩展（Adams-型）">高阶方法扩展（Adams 型）</h4><p>对于更高精度需求，可采用 <strong>分数阶 Adams-Bashforth-Moulton (ABM)</strong> 方法：</p><p><strong>Predictor:</strong></p><p>$$<br>y_{n+1}^P = y_0 + \frac{h^\alpha}{\Gamma(\alpha)} \sum_{j=0}^{n} b_{j,n+1} f(t_j, y_j)<br>$$</p><p><strong>Corrector:</strong></p><p>$$<br>y_{n+1} = y_0 + \frac{h^\alpha}{\Gamma(\alpha + 2)} \left[ f(t_{n+1}, y_{n+1}^P) + \sum_{j=0}^{n} a_{j,n+1} f(t_j, y_j) \right]<br>$$</p><p>其中权重系数：</p><p>$$<br>b_{j,n+1} = \frac{(n+1 - j)^\alpha - (n - j)^\alpha}{\alpha}<br>$$</p><p>$$<br>a_{j,n+1} = \frac{(n - j + 2)^{\alpha + 1} - 2(n - j + 1)^{\alpha + 1} + (n - j)^{\alpha + 1}}{\alpha + 1}<br>$$<br><strong>python实现代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">frac_abm_solver</span>(<span class="params">f, alpha, y0, t_span, h, corrector_steps=<span class="number">2</span></span>):</span><br><span class="line">    t = np.arange(t_span[<span class="number">0</span>], t_span[<span class="number">1</span>] + h, h)</span><br><span class="line">    n = <span class="built_in">len</span>(t) - <span class="number">1</span></span><br><span class="line">    y = np.zeros(n + <span class="number">1</span>)</span><br><span class="line">    y[<span class="number">0</span>] = y0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算权重</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b_weight</span>(<span class="params">k, alpha</span>):</span><br><span class="line">        <span class="keyword">return</span> ((k+<span class="number">1</span>)**alpha - k**alpha) / alpha</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a_weight</span>(<span class="params">k, alpha</span>):</span><br><span class="line">        <span class="keyword">return</span> ((k+<span class="number">2</span>)**(alpha+<span class="number">1</span>) - <span class="number">2</span>*(k+<span class="number">1</span>)**(alpha+<span class="number">1</span>) + k**(alpha+<span class="number">1</span>)) / (alpha+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># Predictor</span></span><br><span class="line">        y_p = y0 + (h**alpha / gamma(alpha)) * <span class="built_in">sum</span>(</span><br><span class="line">            b_weight(i - j, alpha) * f(t[j], y[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 多步校正</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(corrector_steps):</span><br><span class="line">            sum_c = <span class="built_in">sum</span>(a_weight(i - j, alpha) * f(t[j], y[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>))</span><br><span class="line">            y[i+<span class="number">1</span>] = y0 + (h**alpha / gamma(alpha+<span class="number">2</span>)) * (</span><br><span class="line">                f(t[i+<span class="number">1</span>], y_p) + sum_c)</span><br><span class="line">            y_p = y[i+<span class="number">1</span>]  <span class="comment"># 迭代校正</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t, y</span><br></pre></td></tr></table></figure><h3 id="3-4-改进算法变体">3.4 改进算法变体</h3><h4 id="自适应步长控制">自适应步长控制</h4><p>通过局部误差估计：</p><p>$$<br>\epsilon_{n+1} \approx \frac{\Gamma(\alpha + 2)}{h^\alpha} \left| y_{n+1} - y_{n+1}^P \right|<br>$$</p><p>步长调整策略：</p><p>$$<br>h_{\text{new}} = 0.9 h_{\text{old}} \left( \frac{\tau}{\epsilon_{n+1}} \right)^{\frac{1}{1 + \alpha}}<br>$$</p><hr><h4 id="高阶修正格式">高阶修正格式</h4><p>采用加权 Grünwald 近似：</p><p>$$<br>D^\alpha y(t_n) \approx \frac{1}{h^\alpha} \sum_{k=0}^n w_k^{(\alpha)} y_{n-k} + \frac{1}{h^\alpha} \sum_{k=1}^p c_k \Delta^k y_n<br>$$</p><p>其中 $c_k$ 为修正系数，$\Delta^k$ 为阶差分算子。</p><p><strong>差分算子 $\Delta^k$</strong><br>$$<br>\Delta^k y_n = \sum_{i = 0}^{k} (-1)^i \binom{k}{i} y_{n - i}<br>$$</p><p><strong>修正系数 $c_k$</strong><br>$$<br>c_k = \frac{(-1)^k}{k!} \prod_{j = 1}^{k} (\alpha - j + 1)<br>$$</p><p><strong>MATLAB高阶实现</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[t, y]</span> = <span class="title">high_order_frac_solver</span><span class="params">(f, alpha, y0, t_span, h, p)</span></span></span><br><span class="line">    t = t_span(<span class="number">1</span>):h:t_span(<span class="number">2</span>);</span><br><span class="line">    n = <span class="built_in">length</span>(t);</span><br><span class="line">    y = <span class="built_in">zeros</span>(<span class="number">1</span>, n);</span><br><span class="line">    y(<span class="number">1</span>) = y0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算 Grünwald 权重</span></span><br><span class="line">    w = <span class="built_in">zeros</span>(<span class="number">1</span>, n);</span><br><span class="line">    w(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">        w(k+<span class="number">1</span>) = (<span class="number">1</span> - (alpha + <span class="number">1</span>)/k) * w(k);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算差分修正系数</span></span><br><span class="line">    c = <span class="built_in">zeros</span>(<span class="number">1</span>, p);</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:p</span><br><span class="line">        c(k) = (<span class="number">-1</span>)^k / <span class="built_in">factorial</span>(k) * prod(alpha - (<span class="number">0</span>:k<span class="number">-1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>:n</span><br><span class="line">        <span class="comment">% 基础 Grünwald 近似</span></span><br><span class="line">        D_alpha = sum(w(<span class="number">1</span>:<span class="built_in">i</span>) .* y(<span class="built_in">i</span>:<span class="number">-1</span>:<span class="number">1</span>)) / h^alpha;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 高阶修正项</span></span><br><span class="line">        correction = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:p</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">i</span> &gt; k</span><br><span class="line">                delta_k = sum((<span class="number">-1</span>).^(<span class="number">0</span>:k) .* <span class="built_in">nchoosek</span>(k, <span class="number">0</span>:k) .* y(<span class="built_in">i</span>:<span class="number">-1</span>:<span class="built_in">i</span>-k));</span><br><span class="line">                correction = correction + c(k) * delta_k / h^alpha;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 更新解</span></span><br><span class="line">        y(<span class="built_in">i</span>) = y(<span class="built_in">i</span><span class="number">-1</span>) + h * f(t(<span class="built_in">i</span><span class="number">-1</span>), D_alpha + correction);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-5-刚性系统处理">3.5 刚性系统处理</h3><h4 id="隐式格式的牛顿迭代法">隐式格式的牛顿迭代法</h4><ol><li><strong>隐式方程</strong><br>$$<br>y_{n + 1} = y_0 + \frac{h^{\alpha}}{\Gamma(\alpha + 2)} \left[ f(t_{n + 1}, y_{n + 1}) + \sum_{j = 0}^{n} a_{j, n + 1} f(t_j, y_j) \right]<br>$$</li><li><strong>牛顿迭代步骤</strong><br>$$<br>y_{n + 1}^{(k + 1)} = y_{n + 1}^{(k)} - \left[ I - \frac{h^{\alpha}}{\Gamma(\alpha + 2)} J_f(t_{n + 1}, y_{n + 1}^{(k)}) \right]^{-1} \cdot \text{Residual}<br>$$<br>其中 $J_f$ 为 Jacobi 矩阵。</li></ol><p><strong>python刚性系统求解</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">implicit_frac_solver</span>(<span class="params">f, jacobian, alpha, y0, t_span, h, max_iter=<span class="number">10</span>, tol=<span class="number">1e-8</span></span>):</span><br><span class="line">    t = np.arange(t_span[<span class="number">0</span>], t_span[<span class="number">1</span>] + h, h)</span><br><span class="line">    n = <span class="built_in">len</span>(t)</span><br><span class="line">    y = np.zeros((n, <span class="built_in">len</span>(y0)))</span><br><span class="line">    y[<span class="number">0</span>] = y0</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 显式预测</span></span><br><span class="line">        y_pred = y[<span class="number">0</span>] + (h**alpha / gamma(alpha + <span class="number">1</span>)) * <span class="built_in">sum</span>(</span><br><span class="line">            ((i - j + <span class="number">1</span>)**alpha - (i - j)**alpha) * f(t[j], y[j]) </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐式校正（牛顿迭代）</span></span><br><span class="line">        y_current = y_pred.copy()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_iter):</span><br><span class="line">            residual = y_current - y[<span class="number">0</span>] - (h**alpha / gamma(alpha + <span class="number">2</span>)) * (</span><br><span class="line">                f(t[i], y_current) + </span><br><span class="line">                <span class="built_in">sum</span>(a_weight(i - j - <span class="number">1</span>, alpha) * f(t[j], y[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i)))</span><br><span class="line">            </span><br><span class="line">            J = np.eye(<span class="built_in">len</span>(y0)) - (h**alpha / gamma(alpha + <span class="number">2</span>)) * jacobian(t[i], y_current)</span><br><span class="line">            delta = np.linalg.solve(J, -residual)</span><br><span class="line">            y_current += delta</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> np.linalg.norm(delta) &lt; tol:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        y[i] = y_current</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 辅助函数：计算隐式权重</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_weight</span>(<span class="params">k, alpha</span>):</span><br><span class="line">    <span class="keyword">return</span> ((k + <span class="number">2</span>)**(alpha + <span class="number">1</span>) - <span class="number">2</span> * (k + <span class="number">1</span>)**(alpha + <span class="number">1</span>) + k**(alpha + <span class="number">1</span>)) / (alpha + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="理论分析">理论分析</h4><h5 id="1-稳定性">1. 稳定性</h5><ul><li>隐式格式对刚性系统的稳定性优于显式格式，稳定区域覆盖整个负半平面。</li></ul><h5 id="2-计算复杂度">2. 计算复杂度</h5><table><thead><tr><th>方法</th><th>每步计算量</th><th>适用场景</th></tr></thead><tbody><tr><td>自适应步长</td><td>$O(n)$</td><td>非光滑解</td></tr><tr><td>高阶修正</td><td>$O(n + p^2)$</td><td>高精度需求</td></tr><tr><td>隐式迭代</td><td>$O(n \cdot d^3)$</td><td>刚性系统 ($d$ 为维数)</td></tr></tbody></table><h5 id="3-收敛性">3. 收敛性</h5><p>$$<br>| y(t_n) - y_n | \leq C \cdot \left( h^{\min{2, 1 + \alpha}} + \tau \right)<br>$$<br>其中 $\tau$ 为牛顿迭代容差。</p><h1>五、典型应用案例</h1><h2 id="1-异常扩散建模">1. 异常扩散建模</h2><p><strong>时间分数阶扩散方程</strong>：<br>$$<br>\frac{\partial^\gamma u}{\partial t^\gamma} = K_\gamma \frac{\partial^2 u}{\partial x^2}, \quad 0&lt;\gamma&lt;1<br>$$</p><p><strong>解析解</strong>：<br>$$<br>u(x,t) = \frac{1}{2\sqrt{K_\gamma t^\gamma}} M_{1-\gamma/2}\left(\frac{|x|}{\sqrt{K_\gamma t^\gamma}}\right)<br>$$<br>其中$M_\beta(z)$是Wright函数。</p><h2 id="2-粘弹性材料本构关系">2. 粘弹性材料本构关系</h2><p><strong>分数阶Kelvin-Voigt模型</strong>：<br>$$<br>\sigma(t) = E_\infty \epsilon(t) + E_\alpha D^\alpha \epsilon(t)<br>$$</p><h2 id="3-锂电池状态估计">3. 锂电池状态估计</h2><p><strong>分数阶等效电路模型</strong>：<br>$$<br>D^\alpha U_{oc}(t) = \frac{I(t)}{C} + R D^\beta I(t)<br>$$</p><p><strong>参数辨识算法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fode_identify</span>(<span class="params">data, alpha_range, beta_range</span>):</span><br><span class="line">    <span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">params</span>):</span><br><span class="line">        alpha, beta, C, R = params</span><br><span class="line">        <span class="comment"># 实现分数阶数值求解</span></span><br><span class="line">        <span class="keyword">return</span> error</span><br><span class="line">    res = minimize(cost, x0=[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>], </span><br><span class="line">                  bounds=[alpha_range, beta_range, (<span class="number">0</span>,<span class="literal">None</span>), (<span class="number">0</span>,<span class="literal">None</span>)])</span><br><span class="line">    <span class="keyword">return</span> res.x</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伽马函数与贝塔函数</title>
      <link href="/2025/05/11/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E4%B8%8E%E8%B4%9D%E5%A1%94%E5%87%BD%E6%95%B0/"/>
      <url>/2025/05/11/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E4%B8%8E%E8%B4%9D%E5%A1%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1>伽马函数</h1><h2 id="定义">定义</h2><p>伽马函数（Gamma Function）是阶乘函数在实数与复数域上的扩展。对于正实数 $$ x $$（$$ x &gt; 0 $$），伽马函数的定义如下：</p><p>$$<br>\Gamma(x) = \int_{0}^{\infty} t^{x-1} e^{-t} , dt<br>$$</p><p>对于正整数 $$ n $$，伽马函数满足：<br>$$<br>\Gamma(n) = (n-1)!<br>$$</p><h2 id="性质">性质</h2><ol><li><p><strong>递推关系</strong>：$$\displaystyle \Gamma(x+1) = x \Gamma(x) $$</p></li><li><p><strong>特殊值</strong>：</p><ul><li>$$ \Gamma(1) = 1 $$</li><li>$$ \Gamma\left(\frac{1}{2}\right) = \sqrt{\pi} $$</li></ul></li><li><p><strong>欧拉反射公式</strong>：<br>$$<br>\Gamma(x) \Gamma(1-x) = \frac{\pi}{\sin(\pi x)}<br>$$</p></li></ol><hr><h2 id="例题">例题</h2><h3 id="例题1：计算-displaystyle-Gamma-left-frac-5-2-right">例题1：计算  $$\displaystyle  \Gamma\left(\frac{5}{2}\right) $$</h3><p><strong>解</strong>：<br>利用递推关系：<br>$$<br>\Gamma\left(\frac{5}{2}\right) = \frac{3}{2} \Gamma\left(\frac{3}{2}\right) = \frac{3}{2} \cdot \frac{1}{2} \Gamma\left(\frac{1}{2}\right)<br>$$<br>已知 $$\displaystyle  \Gamma\left(\frac{1}{2}\right) = \sqrt{\pi} $$，因此：<br>$$<br>\Gamma\left(\frac{5}{2}\right) = \frac{3}{4} \sqrt{\pi}<br>$$</p><hr><h3 id="例题2：验证-displaystyle-int-0-infty-x-2-e-x-dx-Gamma-3">例题2：验证  $$\displaystyle  \int_{0}^{\infty} x^{2} e^{-x} , dx = \Gamma(3) $$</h3><p><strong>解</strong>：<br>根据伽马函数定义：<br>$$<br>\int_{0}^{\infty} x^{2} e^{-x} , dx = \Gamma(3)<br>$$<br>计算得：<br>$$<br>\Gamma(3) = 2! = 2<br>$$<br>因此积分值为 $$ 2 $$</p><hr><h2 id="伽马函数的推广形式">伽马函数的推广形式</h2><h2 id="指数部分为-a-x-的广义积分">指数部分为 $$-a x$$ 的广义积分</h2><p>当积分中的指数函数形式为 $$\displaystyle e^{-a x}$$（$$a &gt; 0$$）时，伽马函数的定义可推广为：</p><p>$$<br>\int_{0}^{\infty} x^{k-1} e^{-a x} , dx = \frac{\Gamma(k)}{a^k}, \quad k &gt; 0, , a &gt; 0<br>$$</p><h3 id="推导过程">推导过程</h3><p>通过变量替换 $$\displaystyle  t = a x $$（即 $$\displaystyle  x = \frac{t}{a} $$，$$\displaystyle  dx = \frac{dt}{a} $$），原积分变为：<br>$$<br>\int_{0}^{\infty} \left(\frac{t}{a}\right)^{k-1} e^{-t} \cdot \frac{dt}{a} = \frac{1}{a^k} \int_{0}^{\infty} t^{k-1} e^{-t} , dt = \frac{\Gamma(k)}{a^k}<br>$$</p><hr><h2 id="例题-2">例题</h2><h3 id="例题3：计算-displaystyle-int-0-infty-x-3-e-2x-dx">例题3：计算  $$\displaystyle  \int_{0}^{\infty} x^{3} e^{-2x} , dx $$</h3><p><strong>解</strong>：<br>对应形式为 $$ k = 4 $$，$$ a = 2 $$：<br>$$<br>\int_{0}^{\infty} x^{3} e^{-2x} , dx = \frac{\Gamma(4)}{2^4} = \frac{3!}{16} = \frac{6}{16} = \frac{3}{8}<br>$$</p><hr><h3 id="例题4：计算-displaystyle-int-0-infty-sqrt-x-e-3x-dx">例题4：计算  $$\displaystyle  \int_{0}^{\infty} \sqrt{x} e^{-3x} , dx $$</h3><p><strong>解</strong>：<br>对应形式为 $$ k = \frac{3}{2} $$，$$ a = 3 $$：<br>$$<br>\int_{0}^{\infty} x^{\frac{1}{2}} e^{-3x} , dx = \frac{\Gamma\left(\frac{3}{2}\right)}{3^{\frac{3}{2}}} = \frac{\frac{1}{2} \Gamma\left(\frac{1}{2}\right)}{3 \sqrt{3}} = \frac{\frac{1}{2} \sqrt{\pi}}{3 \sqrt{3}} = \frac{\sqrt{\pi}}{6 \sqrt{3}}<br>$$</p><hr><h3 id="例题5：验证-displaystyle-int-0-infty-x-e-5x-dx-frac-1-25">例题5：验证  $$\displaystyle  \int_{0}^{\infty} x e^{-5x} , dx = \frac{1}{25} $$</h3><p><strong>解</strong>：<br>对应形式为 $$ k = 2 $$，$$ a = 5 $$：<br>$$<br>\int_{0}^{\infty} x e^{-5x} , dx = \frac{\Gamma(2)}{5^2} = \frac{1!}{25} = \frac{1}{25}<br>$$</p><hr><h2 id="伽马函数在指数为二次时的推广">伽马函数在指数为二次时的推广</h2><h2 id="高斯积分（指数为-a-x-2-的情形）">高斯积分（指数为 $$-a x^2$$ 的情形）</h2><p>对于形如 $$\displaystyle e^{-a x^2}$$ 的指数函数，积分可以表示为：</p><p>$$<br>\int_{0}^{\infty} e^{-a x^2} dx = \frac{1}{2}\sqrt{\frac{\pi}{a}}, \quad a &gt; 0<br>$$</p><h2 id="一般形式">一般形式</h2><p>对于积分：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^2} dx, \quad n \geq 0, a &gt; 0<br>$$</p><p>结果为：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^2} dx = \frac{1}{2}a^{-\frac{n+1}{2}}\Gamma\left(\frac{n+1}{2}\right)<br>$$</p><h3 id="推导过程-2">推导过程</h3><p>令 $$u = a x^2$$，则：</p><p>$$<br>\begin{aligned}<br>\int_{0}^{\infty} x^n e^{-a x^2} dx &amp;= \frac{1}{2}a^{-\frac{n+1}{2}}\int_{0}^{\infty} u^{\frac{n-1}{2}} e^{-u} du \<br>&amp;= \frac{1}{2}a^{-\frac{n+1}{2}}\Gamma\left(\frac{n+1}{2}\right)<br>\end{aligned}<br>$$</p><hr><h2 id="例题-3">例题</h2><h3 id="例题6：计算-displaystyle-int-0-infty-e-3x-2-dx">例题6：计算  $$\displaystyle \int_{0}^{\infty} e^{-3x^2} dx$$</h3><p>$$<br>\int_{0}^{\infty} e^{-3x^2} dx = \frac{1}{2}\sqrt{\frac{\pi}{3}} = \frac{\sqrt{3\pi}}{6}<br>$$</p><hr><h3 id="例题7：计算-displaystyle-int-0-infty-x-2-e-2x-2-dx">例题7：计算  $$\displaystyle \int_{0}^{\infty} x^2 e^{-2x^2} dx$$</h3><p>$$<br>\begin{aligned}<br>\int_{0}^{\infty} x^2 e^{-2x^2} dx &amp;= \frac{1}{2} \cdot 2^{-\frac{3}{2}} \Gamma\left(\frac{3}{2}\right) \<br>&amp;= \frac{1}{2^{5/2}} \cdot \frac{1}{2}\sqrt{\pi} \<br>&amp;= \frac{\sqrt{\pi}}{8\sqrt{2}}<br>\end{aligned}<br>$$</p><hr><h3 id="例题8：计算-displaystyle-int-0-infty-x-4-e-x-2-dx">例题8：计算  $$\displaystyle \int_{0}^{\infty} x^4 e^{-x^2} dx$$</h3><p>$$<br>\begin{aligned}<br>\int_{0}^{\infty} x^4 e^{-x^2} dx &amp;= \frac{1}{2}\Gamma\left(\frac{5}{2}\right) \<br>&amp;= \frac{1}{2} \cdot \frac{3}{2} \cdot \frac{1}{2}\sqrt{\pi} \<br>&amp;= \frac{3\sqrt{\pi}}{8}<br>\end{aligned}<br>$$</p><hr><h2 id="更一般情形">更一般情形</h2><p>对于积分：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^m} dx, \quad n \geq 0, a &gt; 0, m &gt; 0<br>$$</p><p>结果为：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^m} dx = \frac{1}{m}a^{-\frac{n+1}{m}}\Gamma\left(\frac{n+1}{m}\right)<br>$$</p><h3 id="示例：计算-displaystyle-int-0-infty-x-3-e-x-4-dx">示例：计算  $$\displaystyle \int_{0}^{\infty} x^3 e^{-x^4} dx$$</h3><h2 id="int-0-infty-x-3-e-x-4-dx-frac-1-4-Gamma-1-frac-1-4">$$<br>\int_{0}^{\infty} x^3 e^{-x^4} dx = \frac{1}{4}\Gamma(1) = \frac{1}{4}<br>$$</h2><h2 id="伽马函数速记">伽马函数速记</h2><p>规定：$\displaystyle (-\frac{1}{2})!=\sqrt{\pi}$ ，$\displaystyle (\frac{1}{2})!=\frac{1}{2}\sqrt{\pi}$，$\displaystyle (\frac{3}{2})!=\frac{3}{2}\frac{1}{2}\sqrt{\pi}$</p><table><thead><tr><th style="text-align:left">$\displaystyle \int_{0}^{\infty} x^a e^{-x} dx = a!$</th><th style="text-align:left">$\displaystyle \int_{0}^{\infty} x^a e^{-x^2} dx = \frac{1}{2}(\frac{a-1}{2})!$</th></tr></thead><tbody><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} \quad e^{-x} dx = 0!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} \quad e^{-x^2} dx = \frac{1}{2}(\frac{0-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^1 e^{-x} dx = 1!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^1 e^{-x^2} dx = \frac{1}{2}(\frac{1-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^2 e^{-x} dx = 2!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^2 e^{-x^2} dx = \frac{1}{2}(\frac{2-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^3 e^{-x} dx = 3!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^3 e^{-x^2} dx = \frac{1}{2}(\frac{3-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^4 e^{-x} dx = 4!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^4 e^{-x^2} dx = \frac{1}{2}(\frac{4-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^5 e^{-x} dx = 5!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^5 e^{-x^2} dx = \frac{1}{2}(\frac{5-1}{2})!$</td></tr></tbody></table><h1>贝塔函数</h1><h2 id="定义-2">定义</h2><h3 id="积分定义">积分定义</h3><p>贝塔函数（Beta Function）是两类特殊函数之一，定义为以下含参积分：<br>$$<br>B(x, y) = \int_{0}^{1} t^{x-1} (1-t)^{y-1} dt \quad (x &gt; 0, y &gt; 0)<br>$$</p><ul><li><strong>收敛性</strong>：当且仅当 $x&gt;0$ 且 $y&gt;0$ 时积分收敛</li><li><strong>对称性</strong>：$\displaystyle B(x,y) = B(y,x)$</li></ul><h3 id="1-2-伽马函数关系">1.2 伽马函数关系</h3><p>贝塔函数与伽马函数（Gamma Function）存在如下关系：<br>$$<br>B(x, y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)}<br>$$<br>其中伽马函数定义为：<br>$$<br>\Gamma(z) = \int_{0}^{\infty} t^{z-1} e^{-t} dt<br>$$</p><h2 id="重要性质">重要性质</h2><table><thead><tr><th>性质</th><th>数学表达式</th></tr></thead><tbody><tr><td>递推关系</td><td>$\displaystyle B(x+1,y) = \frac{x}{x+y} B(x,y)$</td></tr><tr><td>三角函数形式</td><td>$\displaystyle B(x,y) = 2 \int_{0}^{\pi/2} \sin^{2x-1}\theta \cos^{2y-1}\theta d\theta$</td></tr><tr><td>与组合数关系</td><td>$\displaystyle B(n, m) = \frac{(n-1)!(m-1)!}{(n+m-1)!}$ （$n,m \in \mathbb{Z}^+$）</td></tr></tbody></table><h2 id="典型例题">典型例题</h2><h3 id="例题1：基础积分计算">例题1：基础积分计算</h3><p>计算 $B(3, 2)$</p><p><strong>分步解析：</strong></p><ol><li><p>根据积分定义：<br>$$<br>B(3, 2) = \int_{0}^{1} t^{2} (1-t)^{1} dt<br>$$</p></li><li><p>展开被积函数：<br>$$<br>= \int_{0}^{1} (t^2 - t^3) dt<br>$$</p></li><li><p>逐项积分：<br>$$<br>= \left[ \frac{t^3}{3} - \frac{t^4}{4} \right]_{0}^{1}<br>$$</p></li><li><p>代入上下限：<br>$$<br>= \frac{1}{3} - \frac{1}{4} = \frac{1}{12}<br>$$</p></li></ol><p><strong>验证</strong>：通过伽马函数验证：<br>$$<br>B(3,2) = \frac{\Gamma(3)\Gamma(2)}{\Gamma(5)} = \frac{2! \cdot 1!}{4!} = \frac{2}{24} = \frac{1}{12}<br>$$</p><h3 id="例题2：三角函数形式">例题2：三角函数形式</h3><p>证明：<br>$$<br>\int_{0}^{\pi/2} \sin^5 x \cos^3 x dx = \frac{1}{24}<br>$$</p><p><strong>分步解析：</strong></p><ol><li><p>转换为贝塔函数形式：<br>$$<br>\text{原式} = \frac{1}{2} B(3, 2)<br>$$</p></li><li><p>计算贝塔函数值：<br>$$<br>B(3,2) = \frac{\Gamma(3)\Gamma(2)}{\Gamma(5)} = \frac{1}{12}<br>$$</p></li><li><p>最终结果：<br>$$<br>\frac{1}{2} \times \frac{1}{12} = \frac{1}{24}<br>$$</p></li></ol><h2 id="扩展公式">扩展公式</h2><p>不完全贝塔函数：<br>$$<br>B_z(a,b) = \int_{0}^{z} t^{a-1} (1-t)^{b-1} dt \quad (0 \leq z \leq 1)<br>$$</p><p>正则化贝塔函数：<br>$$<br>I_z(a,b) = \frac{B_z(a,b)}{B(a,b)}<br>$$</p><h1>贝塔函数的三角形式详解</h1><h2 id="基本三角形式定义">基本三角形式定义</h2><p>贝塔函数可以通过三角函数表示为：<br>$$<br>B(x, y) = 2 \int_{0}^{\pi/2} \sin^{2x-1}\theta \cdot \cos^{2y-1}\theta , d\theta \quad (x&gt;0, y&gt;0)<br>$$</p><h2 id="推导过程-3">推导过程</h2><h3 id="变量代换">变量代换</h3><p>从标准积分定义出发：<br>$$<br>B(x, y) = \int_{0}^{1} t^{x-1} (1-t)^{y-1} dt<br>$$</p><p>作变量替换：<br>$$<br>t = \sin^2 \theta, \quad 1-t = \cos^2 \theta<br>$$</p><p>微分变换：<br>$$<br>dt = 2 \sin \theta \cos \theta , d\theta<br>$$</p><h3 id="积分限变化">积分限变化</h3><p>当 $t=0$ 时 $\theta=0$，当 $t=1$ 时 $\theta=\pi/2$，因此：<br>$$<br>\begin{aligned}<br>B(x, y) &amp;= \int_{0}^{\pi/2} (\sin^2 \theta)^{x-1} (\cos^2 \theta)^{y-1} \cdot 2 \sin \theta \cos \theta , d\theta \<br>&amp;= 2 \int_{0}^{\pi/2} \sin^{2x-1}\theta \cdot \cos^{2y-1}\theta , d\theta<br>\end{aligned}<br>$$</p><h2 id="特殊情形">特殊情形</h2><h3 id="对称性体现">对称性体现</h3><p>当 $\displaystyle x = y = \frac{1}{2}$ 时：<br>$$<br>B\left(\frac{1}{2}, \frac{1}{2}\right) = 2 \int_{0}^{\pi/2} d\theta = \pi<br>$$</p><h3 id="整数参数情形">整数参数情形</h3><p>对于 $\displaystyle m, n \in \mathbb{Z}^+$：<br>$$<br>B(m, n) = 2 \int_{0}^{\pi/2} \sin^{2m-1}\theta \cos^{2n-1}\theta , d\theta<br>$$</p><h2 id="典型例题-2">典型例题</h2><h3 id="例题1：计算-displaystyle-int-0-pi-2-sin-5-theta-cos-3-theta-d-theta">例题1：计算  $\displaystyle \int_{0}^{\pi/2} \sin^5 \theta \cos^3 \theta , d\theta$</h3><p><strong>解：</strong></p><ol><li><p>识别贝塔函数形式：<br>$$<br>\text{积分} = \frac{1}{2} B(3, 2)<br>$$</p></li><li><p>计算贝塔函数值：<br>$$<br>B(3, 2) = \frac{\Gamma(3)\Gamma(2)}{\Gamma(5)} = \frac{2! \cdot 1!}{4!} = \frac{1}{12}<br>$$</p></li><li><p>最终结果：<br>$$<br>\int_{0}^{\pi/2} \sin^5 \theta \cos^3 \theta , d\theta = \frac{1}{2} \times \frac{1}{12} = \frac{1}{24}<br>$$</p></li></ol><h3 id="例题2：证明-displaystyle-int-0-pi-2-sqrt-tan-theta-d-theta-frac-pi-sqrt-2">例题2：证明  $\displaystyle \int_{0}^{\pi/2} \sqrt{\tan \theta} , d\theta = \frac{\pi}{\sqrt{2}}$</h3><p><strong>分步解析：</strong></p><ol><li><p>令 $t = \tan \theta$，则：<br>$$<br>\int_{0}^{\pi/2} \tan^{1/2} \theta , d\theta = \int_{0}^{\infty} \frac{t^{1/2}}{1+t^2} dt<br>$$</p></li><li><p>转换为贝塔函数：<br>$$<br>= \frac{1}{2} \int_{0}^{\infty} \frac{u^{1/4}}{1+u} du \quad (u=t^2) \<br>= \frac{1}{2} B\left(\frac{5}{4}, \frac{3}{4}\right)<br>$$</p></li><li><p>利用伽马函数性质：<br>$$<br>= \frac{1}{2} \cdot \frac{\Gamma(5/4)\Gamma(3/4)}{\Gamma(2)} = \frac{\pi}{2 \sin(\pi/4)} = \frac{\pi}{\sqrt{2}}<br>$$</p></li></ol><h2 id="扩展形式">扩展形式</h2><h3 id="广义三角形式">广义三角形式</h3><p>对于任意积分限 $[0, \phi]$：<br>$$<br>B_{\phi}(x, y) = 2 \int_{0}^{\phi} \sin^{2x-1}\theta \cos^{2y-1}\theta , d\theta<br>$$</p><h3 id="双参数形式">双参数形式</h3><p>$$<br>B(x, y) = \int_{0}^{\infty} \frac{t^{x-1}}{(1+t)^{x+y}} dt<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记之栈与队列</title>
      <link href="/2025/04/24/Hexo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2025/04/24/Hexo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1>栈</h1><h2 id="栈的定义">栈的定义</h2><p><strong>栈</strong> 在百度百科中是这样定义的：</p><p>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。</p><p>它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><p><strong>栈顶、栈底</strong>：允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)。栈底固定，而栈顶浮动。</p><p><strong>空栈</strong>：栈中元素个数为零时称为空栈。</p><p><strong>进栈</strong>：插入一般称为进栈（PUSH）。</p><p><strong>出栈</strong>：删除则称为退栈（POP）。</p><p><img src="https://s21.ax1x.com/2025/04/24/pEo36gJ.png" alt=" "></p><h2 id="顺序栈">顺序栈</h2><h3 id="顺序栈的存储结构">顺序栈的存储结构</h3><p>顺序栈，即用顺序表实现栈存储结构。</p><p>通过前面的学习我们知道，使用栈存储结构操作数据元素必须遵守 “先进后出” 的原则，<br>如果你仔细观察顺序表（底层实现是数组）和栈结构就会发现，它们存储数据的方式高度相似，只不过栈对数据的存取过程有特殊的限制，而顺序表没有。</p><p>例如，我们先使用顺序栈（a 数组）存储 {1,2,3,4}，存储状态如下图所示：<br><img src="https://s21.ax1x.com/2025/04/24/pEo8sdP.png" alt=" "></p><p>于是我们可以很清楚的得到，顺序栈的存储结构就是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> top = <span class="number">-1</span>; <span class="comment">//top指向栈顶</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h3 id="栈空">栈空</h3><p>很自然的，我们将top初始化为-1，代表栈空的状态 top == -1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(SqStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/04/24/pEo8ci8.png" alt=" "></p><h3 id="栈满">栈满</h3><p>因为MaxSize代表的是最大存储个数，所以我们top最大的下标只能到MaxSize-1，</p><p>所以当 top == MaxSize - 1 时即为栈满的状态<br><img src="https://s21.ax1x.com/2025/04/24/pEo82Rg.png" alt=" "></p><p>下面我们将数组“竖着”放置来看，进行出栈、入栈的学习<br><img src="https://s21.ax1x.com/2025/04/24/pEo8RzQ.png" alt=" "></p><h3 id="入栈">入栈</h3><p>首先我们需要明确，因为栈限制在一端进行数据的输入输出，所以我们只需要对top进行移动即可实现。</p><p>对于入栈(栈不满的情况下)，设想一下，我们应该先找到“空出位置的编号”，再将其“对号入座”，而top是栈顶元素的下标，所以我们要先将top++，再将数组对应top位置赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(SqStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == MAXSIZE - <span class="number">1</span>)&#123; <span class="comment">// 栈满的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data[++s-&gt;top] = e; <span class="comment">//按照优先级，先取s-&gt;top 然后自增1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈">出栈</h3><p>同样的，出栈我们应该先得到栈顶元素的数据，然后在将其栈顶位置下标减1即可</p><p>(实际上原来top下标的数据仍然存在于数组中，但是并不在栈中，因为它不在top范围内)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(SqStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)&#123; <span class="comment">// 栈空的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序栈基本操作完整代码">顺序栈基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//顺序栈的实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> top = <span class="number">-1</span>; <span class="comment">//top指向栈顶</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(SqStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(SqStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == MAXSIZE - <span class="number">1</span>)&#123; <span class="comment">// 栈满的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data[++s-&gt;top] = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(SqStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)&#123; <span class="comment">// 栈空的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(SqStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(! <span class="built_in">IsEmpty</span>(s))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">Pop</span>(&amp;s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int i = 0; i &lt;= s.top; i++)&#123; //方式二</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;,s.data[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqStack s;</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">6</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">9</span>);</span><br><span class="line"><span class="built_in">Print</span>(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链栈">链栈</h2><p>栈的链式存储结构，简称为链栈，就和链表一样，用指针实现的就是单链表</p><p>想想看，栈知识栈顶来做插入和删除操作，栈顶放在链表的头部还是尾部呢？</p><p>由于单链表有头指针，而栈顶指针也是必需的，那直接让它俩合二为一不就好了！</p><p>所以比较好的方法是把栈顶放在单链表的头部。</p><p>另外，都已经有了栈顶在头部了，单链表中比较常用的头结点也就失去了意义，通常对于链栈来说，是不需要头结点的。</p><h3 id="链栈的存储结构">链栈的存储结构</h3><p>Node结构体和单链表的一样，用于存储数据和下一个指针</p><p>LinkStack相当于定义了一个“栈”结构体，里面记录cnt(结点数量)，以及栈顶top指针</p><p>链栈的操作绝大部分都和单链表类似，只是在插入和删除上特殊一些。<br><img src="https://s21.ax1x.com/2025/04/24/pEo8hss.png" alt=" "><br><strong>注意：在链栈中注意指针的方向是从栈顶指向栈底</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">//结点的数据</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; <span class="comment">//栈的数据</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">Node* top;</span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure><p><strong>栈空</strong><br>因为top指针即为指向栈顶的指针，如果top == NULL则代表栈空</p><p><strong>栈满</strong><br>对于链栈来说，基本不存在栈满的情况，除非内存已经没有可以使用的空间，</p><p>如果真的发生，那此时的计算机操作系统已经面临死机崩溃的情况， 而不是这个链表是否溢出问题。</p><p><strong>初始化</strong><br>这里采用 LinkStack 非指针的方式定义栈 s，将其初始化后返回给main中定义的s即可</p><p>而在调用基本操作的函数时，因为我们只需要修改s里面的top指针，所以函数形参使用指针类型(地址)，函数实参 &amp;s 传入地址</p><p>(当然也可以像链表一样直接定义为 LinkStack * 类型，实参传入 s即可，效果是一样的)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">LinkStack <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkStack s;</span><br><span class="line">s.cnt = <span class="number">0</span>;</span><br><span class="line">s.top = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">s.top = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入栈-2">入栈</h3><p>将链表头部作为栈顶的一端，可以避免在实现数据 “入栈” 和 “出栈” 操作时做大量遍历链表的耗时操作。</p><p>链表的头部作为栈顶，意味着：<br>在实现数据&quot;入栈&quot;操作时，需要将数据从链表的头部插入；<br>在实现数据&quot;出栈&quot;操作时，需要删除链表头部的首元节点；</p><p><strong>链栈实际上就是一个只能采用头插法插入或删除数据的链表</strong></p><p>入栈时类似头插法，用一个指针指向top，然后将top指针的指向和该指针指向一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(LinkStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = p;</span><br><span class="line">s-&gt;cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈-2">出栈</h3><p>出栈时用p指针指向栈顶(方便free栈顶元素)，然后把栈顶的指向 指向下一个结点即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(LinkStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s-&gt;top-&gt;data);</span><br><span class="line">p = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">s-&gt;cnt--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS：入栈、出栈别忘记更新cnt的值</strong></p><h3 id="链栈基本操作完整代码">链栈基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//链栈的实现</span></span><br><span class="line"><span class="comment">//链栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">//结点的数据</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; <span class="comment">//栈的数据</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">Node* top;</span><br><span class="line">&#125;LinkStack;</span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">LinkStack <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkStack s;</span><br><span class="line">s.cnt = <span class="number">0</span>;</span><br><span class="line">s.top = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">s.top = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(LinkStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.cnt == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(LinkStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = p;</span><br><span class="line">s-&gt;cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(LinkStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s-&gt;top-&gt;data);</span><br><span class="line">p = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">s-&gt;cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkStack s = <span class="built_in">Init</span>();</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的应用">栈的应用</h2><h3 id="括号匹配">括号匹配</h3><p><strong>算法思想</strong>：在遍历存放字符数组中，如果遇到（、{、[ 等左括号，就将其压入栈中，在遇到 ）、}、] 等右括号之后，就需要从栈中出栈判断是否有对应的左括号与之匹配，如果存在，则将其出栈，后继续遍历字符数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sequence_stack</span></span><br><span class="line">&#123;</span><br><span class="line">    datatype a[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; seq_stack;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(seq_stack* st)</span>        <span class="comment">//初始化栈，生成一个初始栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">empty</span><span class="params">(seq_stack st)</span>           <span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>( st.top ? <span class="number">0</span>:<span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">datatype <span class="title">top</span><span class="params">(seq_stack st)</span>        <span class="comment">//取栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(st))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n栈是空的!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> st.a[st.top<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(seq_stack* st, datatype x)</span>    <span class="comment">//进行压栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top == MAXSIZE)            <span class="comment">//判断栈是否已经满了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nThe sequence stack is full!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    st-&gt;a[st-&gt;top]=x;</span><br><span class="line">    st-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(seq_stack* st)</span>        <span class="comment">//进行出栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top==<span class="number">0</span>)            <span class="comment">//判断栈是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nThe sequence stack is empty!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    st-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">match_kuohao</span><span class="params">(<span class="type">char</span> c[])</span>        <span class="comment">//括号匹配算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    sequence_stack s;            <span class="comment">//新建一个栈</span></span><br><span class="line">    <span class="built_in">init</span>(&amp;s);</span><br><span class="line">    <span class="keyword">while</span>(c[i]!=<span class="string">&#x27;#&#x27;</span>)            <span class="comment">//进行输入括号</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">switch</span>(c[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:     <span class="built_in">push</span>(&amp;s,c[i]); <span class="keyword">break</span>;                <span class="comment">// 开括号全部入栈</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:     <span class="keyword">if</span>( !<span class="built_in">empty</span>(s) &amp;&amp; <span class="built_in">top</span>(s)==<span class="string">&#x27;&#123;&#x27;</span>  )   <span class="comment">// 假如 &#123;和&#125;匹配</span></span><br><span class="line">                          &#123;<span class="built_in">pop</span>(&amp;s); <span class="keyword">break</span>;&#125;</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:     <span class="keyword">if</span>( !<span class="built_in">empty</span>(s) &amp;&amp; <span class="built_in">top</span>(s) == <span class="string">&#x27;[&#x27;</span> )      <span class="comment">// 假如 [和]匹配</span></span><br><span class="line">                          &#123;<span class="built_in">pop</span>(&amp;s); <span class="keyword">break</span>;&#125;</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:     <span class="keyword">if</span>( !<span class="built_in">empty</span>(s)&amp;&amp; <span class="built_in">top</span>(s)==<span class="string">&#x27;(&#x27;</span>  )      <span class="comment">// 假如 (和)匹配</span></span><br><span class="line">                          &#123;<span class="built_in">pop</span>(&amp;s); <span class="keyword">break</span>;&#125;</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">empty</span>(s));        <span class="comment">//栈为空则匹配,否则不匹配</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> szKuohao[] = <span class="string">&quot;(([()&#123;&#125;]))#&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">match_kuohao</span>(szKuohao);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配不成功！\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换">进制转换</h3><p><strong>算法思想</strong>：十进制数 和其他 进制数的转换是计算机实现计算的基本问题，其解决方法很 多，其中一个简单算法基千下列原理：</p><blockquote><p>N=(N div d)Xd+N mod d (其中： div 为整除运算， mod 为求余运算）</p></blockquote><p><img src="https://s21.ax1x.com/2025/04/24/pEoYIeA.png" alt=" "><br>假设现要编制一个满足下列要求的程序：对于输入的任意一个非负十进制整数，打印 输出与其等值的八进制数。由千上述计算过程是从低位到高位顺序产生八进制数的各个数位，而打印输出，一般来说应从高位到低位进行，恰好和计算过程相反。因此，若将计算 过程中得到的八进制数的各位顺序进栈，则按出栈序列打印输出的即为与输人对应的八进制数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m)</span><br><span class="line">&#123;</span><br><span class="line">a[top++]=m%n;</span><br><span class="line">m=m/n;</span><br><span class="line">&#125;</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[top]&gt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[top]+<span class="string">&#x27;A&#x27;</span><span class="number">-10</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[top]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入要转换的十进制数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要转换的进制：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">change</span>(m,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h1>队列</h1><h2 id="队列的定义">队列的定义</h2><p>队列是一种特殊的线性表，特殊之处在于<strong>它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作</strong>，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h2 id="顺序队列">顺序队列</h2><h3 id="顺序队列的存储方式">顺序队列的存储方式</h3><p>顺序队列通常采用一维数组存储队列中的元素，另外增加两个指针分别指示数组中存放的队首元素和队尾元素。其中指向队首元素的指针称为队头指针front，指向队尾元素下一个位置的指针称为队尾指针rear。<br>初始化时，队头指针front和队尾指针rear都指向下标为0的存储单元<br><img src="https://s21.ax1x.com/2025/04/24/pEo8bJU.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h3 id="初始化">初始化</h3><p>初始化就是将front rear的值初始化为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列空">队列空</h3><p>当front == rear 的时候就代表队列为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.front == q.rear) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入队">入队</h3><p>因为rear是最后一个元素的下一个位置下标，所以我们直接将元素存到rear下标处即可<br><img src="https://s21.ax1x.com/2025/04/24/pEo8bJU.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;rear + <span class="number">1</span> &lt;= MAXSIZE)&#123;</span><br><span class="line">q-&gt;data[q-&gt;rear++] = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队">出队</h3><p>入队更改rear，出队则更改front</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(Queue* q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q-&gt;data[q-&gt;front++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历队列">遍历队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = q.front ; i &lt; q.rear ; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="假溢出">假溢出</h3><p>但是按照前面介绍的顺序存储方式，容易出现“假溢出”。</p><p>所谓“假溢出”，就是经过多次插入和删除操作后，实际队列还有存储空间，但是又无法向队列中插入元素。简单来说就是数组下标越界的错误</p><p>例如在图中队列删除a和b，然后依次插入h、i和j，当插入j后，就会出现队尾指针rear越出数组的下界造成“假溢出”，如图：<br><img src="https://s21.ax1x.com/2025/04/24/pEo8XQJ.png" alt=" "></p><h3 id="顺序队列基本操作完整代码">顺序队列基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//顺序队列的实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.front == q.rear) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;rear + <span class="number">1</span> &lt;= MAXSIZE)&#123;</span><br><span class="line">q-&gt;data[q-&gt;rear++] = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(Queue* q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q-&gt;data[q-&gt;front++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = q.front ; i &lt; q.rear ; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"><span class="built_in">Init</span>(&amp;q);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环队列">循环队列</h2><p>解决假溢出的办法就是后面满了，再从头开始，也就是“头尾相接”的循环结构</p><p>我们把队列的这种头尾相接的顺序存储结构成为循环队列。</p><p>当队尾指针rear或队头指针front到达存储空间的最大值时（假定队列的存储空间为QueueSize），让队尾指针或者队头指针转化为0，这样就可以将元素插入到队列的空闲存储单元中，有效的利用存储空间，消除“假溢出”。<br><img src="https://s21.ax1x.com/2025/04/24/pEoGCFK.png" alt=" "></p><h3 id="循环队列的存储结构">循环队列的存储结构</h3><p>其实循环队列也是用数组存储，只不过为了形象表现出来，我们将图做成一个“环”状，实际上还是线性的数组结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h3 id="初始化-2">初始化</h3><p>初始化将其头尾指针都赋值为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">    q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列空-2">队列空</h3><p>显然，当front == rear 表示没有元素，此时队空<br><img src="https://s21.ax1x.com/2025/04/24/pEoYTot.jpg" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.front == q.rear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列满">队列满</h3><p>那队列满呢？为了和队列空区分</p><p>我们不妨让队列多添加一个位置，这个位置不放任何元素，仅仅是为了区别空与满：</p><p>由于rear可能比front大或者小，所以它们相差一个位置的时候就是队满，</p><p>但也可能相差整整一圈</p><p>所以如果最大尺寸为MAXSIZE，</p><p>那么当 (rear + 1) % MAXSIZE == front 时就代表队列满了！<br><img src="https://s21.ax1x.com/2025/04/24/pEoYXQg.jpg" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列满</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsFull</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear<span class="number">+1</span>) % MAXSIZE == q.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取循环队列长度">获取循环队列长度</h3><p>统一rear&gt;front 和 rear&lt;front后的情况，</p><p>通用的计算队列长度的公式为：</p><p>(rear - front + MAXSIZE) % MAXSIZE</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取队列长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q.rear - q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入队-2">入队</h3><p>很简单，因为rear指向末尾元素的下一个位置，</p><p>所以先将元素存储到rear下标处，再将rear下标往“后”移动一个位置即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsFull</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列满 入队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;data[q-&gt;rear] = e;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-2">出队</h3><p>出队则是更改front指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d出队\n&quot;</span>,q-&gt;data[q-&gt;front]);</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印队列">打印队列</h3><p>只要队列不为空，就一直“出队”，这里只是假出队，因为我们传递的是q 根据值传递，只是一个“复制品” 所以并不会真的修改队列q的指针值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印队列元素:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(! <span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[q.front]);</span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列完整代码">循环队列完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//循环队列的实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.front == q.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队列满</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsFull</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear<span class="number">+1</span>) % MAXSIZE == q.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear - q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsFull</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列满 入队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;data[q-&gt;rear] = e;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d出队\n&quot;</span>,q-&gt;data[q-&gt;front]);</span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印队列元素:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(! <span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[q.front]);</span><br><span class="line">q.front = (q.front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"><span class="built_in">Init</span>(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列长度为：%d\n&quot;</span>,<span class="built_in">Length</span>(q));</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指针值：%d %d\n&quot;</span>,q.front,q.rear);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印前指针值：%d %d\n&quot;</span>,q.front,q.rear);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印后指针值：%d %d\n&quot;</span>,q.front,q.rear);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链队列">链队列</h2><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，</p><p>我们把它简称为链队列。</p><p>为了操作上的方便，我们将对头指针指向链队列的头结点，而队尾指针指向终端节点<br><img src="https://s21.ax1x.com/2025/04/24/pEotdtP.png" alt=" "></p><h3 id="链队列的存储结构">链队列的存储结构</h3><p>将整个结构分为结点的存储和队列的存储，</p><p>结点存储data数据和next指针</p><p>队列存储头结点和尾指针以及队列长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结点的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *Next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//链队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">Node *front,*rear;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/04/24/pEotwff.png" alt=" "></p><h3 id="初始化-3">初始化</h3><p>将队列的front、rear指针指向同一块地址区域作为头结点，不存储值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">q-&gt;rear = q-&gt;front;</span><br><span class="line">q-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列空-3">队列空</h3><p>判断队列空有两种方法，一种是直接由长度得出，另一种是判断rear和front指针是否重合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列满-2">队列满</h3><p>链队列不考虑队列满的情况</p><h3 id="获取长度">获取长度</h3><p>直接返回队列的length属性即可</p><h3 id="入队-3">入队</h3><p>因为带有尾结点，所以很方便就能操作队尾元素了，直接将队尾的next指针指向新结点即可<br><img src="https://s21.ax1x.com/2025/04/24/pEotD1S.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;rear-&gt;Next = p;</span><br><span class="line">q-&gt;rear = p;</span><br><span class="line">q-&gt;length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-3">出队</h3><p>由于带有头结点，所以直接将头结点的next指针指向队首元素的下一个结点即可<br><img src="https://s21.ax1x.com/2025/04/24/pEot4pT.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q-&gt;front-&gt;Next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d出队成功\n&quot;</span>,p-&gt;data);</span><br><span class="line">q-&gt;front-&gt;Next = p-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">q-&gt;length--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列的遍历">链队列的遍历</h3><p>和单链表的情况一样，只需判断是否为空，然后依次取data的值，再进行next的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q.front-&gt;Next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列基本操作完整代码">链队列基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//链队列的实现</span></span><br><span class="line"><span class="comment">//结点的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *Next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//链队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">Node *front,*rear;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">q-&gt;rear = q-&gt;front;</span><br><span class="line">q-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;rear-&gt;Next = p;</span><br><span class="line">q-&gt;rear = p;</span><br><span class="line">q-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q-&gt;front-&gt;Next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d出队成功\n&quot;</span>,p-&gt;data);</span><br><span class="line">q-&gt;front-&gt;Next = p-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">q-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Length</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前队列长度为：%d\n&quot;</span>,q.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q.front-&gt;Next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"><span class="built_in">Init</span>(&amp;q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Length</span>(q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>栈与队列内容总结</h1><p>栈(stack)是限定仅在表尾进行插入和删除的线性表</p><p>队列(queue)是仅允许在一端进行插入操作，在另一端进行删除操作的线性表</p><p>它们均可以用线性表的顺序村粗结构来实现，但都存在着顺序存储的一些弊端</p><p>同时也都可以通过链式存储结构来实现，实现原则上与线性表基本相同</p><p>关于栈和队列还有独特的用处，例如利用栈来实现前中后缀表达式的转换和计算、以及括号匹配问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm的配置与使用</title>
      <link href="/2025/04/16/Hexo/nvm%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/04/16/Hexo/nvm%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上文<a href="https://www.vendre.top/2025/04/14/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E6%8F%92%E4%BB%B6/">在Hexo博客中添加豆瓣插件</a>中提到Hexo中豆瓣插件的安装对nodejs的版本号有要求，在网上搜索的过程中发现有这样一款工具能够轻松实现对nodejs多个版本的下载与切换，成功解决了我的需求，于是便有了本篇文章的出现。</p></blockquote><h1>1.nvm介绍</h1><p>Node Version Manager（NVM） 是一种用于管理多个主动节点.js版本的工具。<br><img src="https://s21.ax1x.com/2025/04/16/pEfyVXD.png" alt=" "><br><a href="https://gitcode.com/open-source-toolkit/adb88?utm_source=highlight_word_gitcode&amp;word=node.js">Node.js</a>平台，Node.js工具社区和Node.js库是快速移动的目标 - 在一个Node.js版本下可能有效的方法不能保证适用于另一个版本的Node.js。因此，用户需要一些方法在 Node 的多个版本之间切换.js</p><h2 id="为什么使用nvm？">为什么使用nvm？</h2><p>nvm 允许用户：</p><ul><li>使用简单的命令在本地下载任何远程长期支持 （LTS） 版本的 Node.js。</li><li>直接从命令行在 Node.js 的多个版本之间轻松切换。</li><li>设置别名以轻松在不同下载版本的 Node.js之间切换。</li></ul><h1>2.nvm下载与安装</h1><h2 id="下载">下载</h2><p>nvm同时支持Linux和macOS</p><p>我们这里是在Windows上操作，也是将来工作用的最多的操作系统</p><p>下载链接：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a><br><img src="https://s21.ax1x.com/2025/04/16/pEfyB90.md.png" alt="下载这两个均可"></p><h2 id="安装">安装</h2><p><strong>如果电脑上之前已经单独安装了node，先卸载（可以在控制面板里面卸载），然后再安装nvm</strong></p><p>找到上一步下载的软件，双击安装包，一直点击下一步即可安装。</p><p>安装完成后，可以打开cmd命令行窗口。执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm -v</span><br></pre></td></tr></table></figure><p>若能若下图所示 显示版本号 则代表安装成功<br><img src="https://s21.ax1x.com/2025/04/16/pEfyD3V.png" alt=" "></p><h1>3.nvm环境配置</h1><p>安装完毕后，需要找到安装的路径，一些简单配置，</p><h2 id="配置环境变量">配置环境变量</h2><blockquote><p>注意事项：<br>如果是默认安装在c盘的。就可以跳过下面的步骤<br>如果电脑用户名是中文不建议默认安装，可以选择其它盘安装，安装路径不要有中文出现</p></blockquote><p>如果是安装在其他盘的、则需要配置相应的环境变量</p><p>怎样打开环境变量？</p><p>打开我的电脑&gt;右键&gt;属性&gt;高级系统设置&gt;环境变量</p><p>在环境变量里就可以看见nvm的路径。如果是安装在其他盘的。就去找到对应的安装路径修改即可。</p><p><strong>如果安装nvm的文件夹里没有nodejs这个文件夹的话，可以自己手动新建一个空的nodejs文件夹即可。</strong></p><h2 id="配置国内镜像">配置国内镜像</h2><p>使用npm的同学应该都知道，使用国内的淘宝镜像安装比较快。</p><p>我们先找到nvm所在文件位置，点开setting里面的配置。</p><p>原本只有2行代码。我们只需要在最后面追加2行代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node_mirror: <span class="title">http</span>://<span class="title">npmmirror.com</span>/<span class="title">mirrors</span>/<span class="title">node</span>/</span></span><br><span class="line"><span class="function"><span class="title">npm_mirror</span>: <span class="title">http</span>://<span class="title">registry.npmmirror.com</span>/<span class="title">mirrors</span>/<span class="title">npm</span>/</span></span><br></pre></td></tr></table></figure><p>然后保存关闭即可</p><h1>4.nvm使用</h1><p>打开cmd(最好以管理员身份运行)，执行以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls                      // 看安装的所有node.js的版本</span><br><span class="line"></span><br><span class="line">nvm list available          // 查显示可以安装的所有node.js的版本</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/04/16/pEfyrcT.png" alt=" "><br>可以在可选列表里。选择任意版本安装，比如安装18.18.0</p><p>执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install <span class="number">18</span>.<span class="number">18</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>安装好了之后。可以执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><p>可以在列表里看到这个版本代表安装成功</p><p>如果想使用18.18.0这个版本的话。就执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use <span class="number">18</span>.<span class="number">18</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>就可以看到当前版本已经是18.18.0了</p><h1>5.nvm常用命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nvm off                     // 禁用node.js版本管理(不卸载任何东西)</span><br><span class="line">nvm on                      // 启用node.js版本管理</span><br><span class="line">nvm install &lt;version&gt;       // 安装node.js的命名 version是版本号 例如：nvm install <span class="number">8</span>.<span class="number">12</span>.<span class="number">0</span></span><br><span class="line">nvm uninstall &lt;version&gt;     // 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用</span><br><span class="line">nvm ls                      // 显示所有安装的node.js版本</span><br><span class="line">nvm list available          // 显示可以安装的所有node.js的版本</span><br><span class="line">nvm use &lt;version&gt;           // 切换到使用指定的nodejs版本</span><br><span class="line">nvm v                       // 显示nvm版本</span><br><span class="line">nvm install stable          // 安装最新稳定版</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">nvm命令行操作命令</span><br><span class="line"><span class="number">1</span>,nvm nvm list 是查找本电脑上所有的node版本</span><br><span class="line"> </span><br><span class="line">- nvm list 查看已经安装的版本</span><br><span class="line">- nvm list installed 查看已经安装的版本</span><br><span class="line">- nvm list available 查看网络可以安装的版本</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>,nvm install 安装最新版本nvm</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>,nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line"> </span><br><span class="line"><span class="number">4</span>,nvm ls 列出所有版本</span><br><span class="line"> </span><br><span class="line"><span class="number">5</span>,nvm current显示当前版本</span><br><span class="line"> </span><br><span class="line"><span class="number">6</span>,nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line"> </span><br><span class="line"><span class="number">7</span>,nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line"> </span><br><span class="line"><span class="number">8</span>,nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line"> </span><br><span class="line"><span class="number">9</span>,nvm on 打开nodejs控制</span><br><span class="line"> </span><br><span class="line"><span class="number">10</span>,nvm off 关闭nodejs控制</span><br><span class="line"> </span><br><span class="line"><span class="number">11</span>,nvm proxy 查看设置与代理</span><br><span class="line"> </span><br><span class="line"><span class="number">12</span>,nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">　　nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line"> </span><br><span class="line"><span class="number">13</span>,nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line"> </span><br><span class="line"><span class="number">14</span>,nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line"> </span><br><span class="line"><span class="number">15</span>,nvm root [<span class="built_in">path</span>] 设置和查看root路径</span><br><span class="line"> </span><br><span class="line"><span class="number">16</span>,nvm version 查看当前的版本</span><br></pre></td></tr></table></figure><p>在做项目的时候。不同的项目使用的nodejs版本可能不一样。我们可以在配置文件里看见：</p><p>由于nodejs版本和npm版本的不同。导致项目无法运行。所以我们就需要用到nvm这个工具了！</p><h1>6.结论</h1><p>nvm对于任何Node.js开发人员来说都是一个很棒的工具。它可以实现无忧安装，并在不同版本之间轻松切换，从而节省了真正重要的事情的时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo博客中添加豆瓣插件</title>
      <link href="/2025/04/14/Hexo/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E6%8F%92%E4%BB%B6/"/>
      <url>/2025/04/14/Hexo/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>若此方法不适用：node 版本过低导致，可以下个 nvm 来控制 node 版本，建议安装较新的 node 版本(要求大于v18)</p></blockquote><h1>在Hexo博客中添加豆瓣插件</h1><h2 id="1-安装豆瓣插件">1. 安装豆瓣插件</h2><h3 id="前往博客根目录，打开cmd命令窗口执行-span-style-background-color-rgb-126-110-228-color-white-npm-install-hexo-douban-save-span">前往博客根目录，打开cmd命令窗口执行<span style="background-color:rgb(126, 110, 228); color: white;">npm install hexo-douban --save</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h2 id="2-注入豆瓣内容">2.注入豆瓣内容</h2><h3 id="修改站点配置文件-span-style-background-color-rgb-126-110-228-color-white-config-yml-span-，添加如下代码：">修改站点配置文件<span style="background-color: rgb(126, 110, 228); color: white;">_config.yml</span> ，添加如下代码：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">228172215</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item_per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">books/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">movies/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">games/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">song:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">songs/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my song title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my song quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><ul><li>id: 你的豆瓣ID(纯数字格式，不是自定义的域名)。获取方法可以参考 怎样获取豆瓣的数字 ID ？</li><li>builtin: 是否将 hexo douban 命令默认嵌入进 hexo g、hexo s，使其自动执行 hexo douban 命令。默认关闭。当你的豆瓣条目较多时，也建议关闭。</li><li>item_per_page: 每页展示的条目数，默认 10 。</li><li>path: 生成页面后的路径，默认生成在 movies/index.html 等下面。如需自定义路径，则可以修改这里。</li><li>title: 该页面的标题。</li><li>quote: 写在页面开头的一段话,支持 html 语法。</li><li>option: 该页面额外的 Front-matter 配置，参考 Hexo 文档。无特别需要，留空即可。</li><li>timeout: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><h2 id="3-主题中注入豆瓣">3.主题中注入豆瓣</h2><h3 id="在主题配置文件-span-style-background-color-rgb-126-110-228-color-white-config-butterfly-yml-span-中配置以下内容：">在主题配置文件<span style="background-color: rgb(126, 110, 228); color: white;">_config.butterfly.yml</span>中配置以下内容：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你有使用hexo-douban，可配置這個</span></span><br><span class="line"><span class="attr">douban:</span></span><br><span class="line">   <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">movies_img:</span> <span class="string">https://fastly.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/movie.jpg</span></span><br><span class="line">   <span class="attr">books_img:</span> <span class="string">https://fastly.jsdelivr.net/npm/blog-gallery@1.0.0/1/20200206161657.webp</span></span><br><span class="line"><span class="comment">#   games_img:</span></span><br></pre></td></tr></table></figure><h2 id="4-执行Docs命令">4.执行Docs命令</h2><h3 id="前往博客根目录，打开cmd命令窗口执行-span-style-background-color-rgb-126-110-228-color-white-hexo-douban-span">前往博客根目录，打开cmd命令窗口执行<span style="background-color: rgb(126, 110, 228); color: white;">hexo douban</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo douban</span><br></pre></td></tr></table></figure><p>等待命令执行完毕，出现下图所示内容即为成功。<br><img src="https://s21.ax1x.com/2025/04/14/pEWsK9f.png" alt=" "></p><blockquote><p>我的博客只添加了电影页面</p></blockquote><ul><li>collect代表看过</li><li>wish代表想看</li><li>do代表在看</li><li>括号中的数字代表影片数量，与你豆瓣档案里的一致</li></ul><h2 id="5-添加相关导航">5.添加相关导航</h2><h3 id="如下图：">如下图：</h3><p><img src="https://s21.ax1x.com/2025/04/14/pEWsW8K.png" alt=" "></p><h2 id="效果展示">效果展示</h2><p><img src="https://s21.ax1x.com/2025/04/16/pEfycB4.png" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
