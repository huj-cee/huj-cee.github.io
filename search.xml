<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微分方程数值解 第一章（1）</title>
      <link href="/2025/05/18/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/"/>
      <url>/2025/05/18/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>Euler法</h1><p>对于常微分方程（ODE）问题：</p><p>$$<br>\begin{cases}<br>u’ = f(t, u), &amp; 0 \leq t \leq T \<br>u(0) = u_0<br>\end{cases}<br>$$<br>其中 $f(t, u)$ 关于 $u$ 满足 Lipschitz 条件</p><h2 id="欧拉法推导：">欧拉法推导：</h2><p><strong>连续问题离散化</strong></p><p>设真解为 $u(t)$。将区间 $[0, T]$ 离散化，令 $\displaystyle \frac{T}{N}=h$，其中 $h$ 为步长，且 $0 = t_0 &lt; t_1 &lt; \cdots &lt; t_N = T$，$t_n=nh$</p><p>已知 $u(t_0)=u_0$，$u’(t_0)=f(t_0, u_0)$</p><p><strong>利用 Taylor 展开推导近似值</strong></p><p>对 $u(t_1)$ 进行 Taylor 展开：$\displaystyle u(t_1)=u(t_0 + h)=u(t_0)+u’(t_0)h+\frac{u’‘(\xi)}{2!}h^2$ ，其中 $\displaystyle \xi\in(t_0,t_1)$ ，记为 $\displaystyle u(t_0)+u’(t_0)h + R_0$ ，$\displaystyle R_0 = O(h^2)$ 是二阶小量</p><p>略去二阶小量 $R_0$ ，得到 $u(t_1)$ 的近似值 $\displaystyle u_1 = u_0+hf(t_0, u_0)\approx u(t_1)$</p><p>类似地，可得到 $u(t_2)$ 的近似值 $u_2 = u_1+hf(t_1, u_1)$</p><p>以此类推，得到递推公式：$u_{n + 1}=u_n+hf(t_n, u_n)$ ，这就是 Euler 法</p><p><strong>显格式与隐格式</strong></p><p><strong>显格式</strong>：</p><p>$\displaystyle u_{n + 1}=u_n+hf(t_n, u_n)$ ，变形为 $\displaystyle \frac{u_{n + 1}-u_n}{h}=f(t_n, u_n)$ ，即用差商 $\displaystyle \frac{u_{n + 1}-u_n}{h}$（向前差分）代替导数 $u’(t_n)$</p><p><strong>隐格式</strong>：</p><p>$\displaystyle \frac{u_n - u_{n - 1}}{h}=f(t_n, u_n)$ ，也可写成 $\displaystyle u_{n + 1}=u_n+hf(t_{n + 1}, u_{n + 1})$ ，这里用向后差分 $\displaystyle \frac{u_n - u_{n - 1}}{h}$ 近似 $u’(t_n)$ ，隐格式一般需要迭代求解</p><p>迭代公式为<br>$$<br>\displaystyle u_{n + 1}^{[k + 1]}=u_n+hf(t_{n + 1}, u_{n + 1}^{[k]})<br>$$</p><h2 id="数值积分法：ODE-数值解的等价积分形式">数值积分法：ODE 数值解的等价积分形式</h2><p>常微分方程 $u’(t)=f(t, u(t))$ ，$u(t_0)$ 已知，其等价积分形式为：</p><p>$$<br>u(t)=u(t_0)+\int_{t_0}^{t}f(\tau, u(\tau))d\tau<br>$$<br>通过对积分项进行不同的数值近似，可得到不同的数值解法</p><h3 id="矩形公式">矩形公式</h3><p><strong>左矩形公式（显式 Euler 法）</strong></p><p>公式：$\displaystyle u_1 = u_0 + f(t_0, u_0)h$</p><p>原理：用左端点的函数值 $f(t_0, u_0)$ 近似积分区间 $[t_0, t_0 + h]$ 上 $\displaystyle f(\tau, u(\tau))$ 的平均值，来计算积分 $\displaystyle \int_{t_0}^{t_0 + h}f(\tau, u(\tau))d\tau\approx hf(t_0, u_0)$ ，进而得到 $u(t_1)$（$t_1=t_0 + h$ ）的近似值 $u_1$</p><p><strong>右矩形公式（隐式 Euler 法）</strong></p><p>公式：$\displaystyle u_1 = u_0 + f(t_1, u_1)h$</p><p>原理：用右端点的函数值 $f(t_1, u_1)$ 近似积分区间 $[t_0, t_0 + h]$ 上 $f(\tau, u(\tau))$ 的平均值 ，但由于 $u_1$ 未知，该方法是隐式的，一般需迭代求解</p><p><strong>梯形公式（改进 Euler 法）</strong></p><p>公式：$\displaystyle u_{n + 1}=u_n+\frac{h}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]$</p><p>原理：用梯形面积公式近似积分，即把积分区间 $[t_n, t_{n + 1}]$ 上 $f(\tau, u(\tau))$ 的平均值近似为 $\displaystyle \frac{1}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]$ ，从而计算积分<br>$$<br>\displaystyle \int_{t_n}^{t_{n + 1}}f(\tau, u(\tau))d\tau\approx\frac{h}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]<br>$$</p><h2 id="Euler-误差分析">Euler 误差分析</h2><p><strong>数值解与精确解</strong></p><p><strong>数值解</strong>：显式 Euler 法的迭代公式为 $\displaystyle u_{n + 1}=u_n+hf(t_n, u_n)$</p><p><strong>精确解</strong>：对 $u(t_{n + 1})$ 在 $t_n$ 处进行 Taylor 展开，$\displaystyle u(t_{n + 1})=u(t_n)+hf(t_n, u(t_n))+\frac{u’‘(t_n)}{2!}h^2+\frac{u’‘’(\xi)}{3!}h^3$ ，$\xi\in(t_n, t_{n + 1})$</p><h3 id="局部截断误差">局部截断误差</h3><p><strong>定义</strong>：把精确解 $u(t)$ 代入差分格式得到的余项。差分格式 $\displaystyle L[u_n, h]=u_{n + 1}-u_n - hf(t_n, u_n)$ ，将真解代入得 $\displaystyle L[u(t_n), h]=u(t_{n + 1})-u(t_n)-hf(t_n, u(t_n))\neq0$ ，余项 $\displaystyle R_n=\frac{u’‘(t_n)}{2!}h^2+\frac{u’‘’(\xi)}{3!}h^3$ 。当 $h\to0$ 时，Euler 法的局部截断误差为 $O(h^2)$ ，意味着随着步长 $h$ 趋于 0 ，误差主要由 $h^2$ 阶项决定</p><p><strong>改进 Euler 法局部截断误差</strong></p><p>利用积分中值定理相关结论<br>$$<br>\displaystyle \int_{a}^{b}v(x)dx=\frac{1}{2}(b - a)(v(a)+v(b))-\frac{(b - a)^3}{12}v’‘(\xi)<br>$$<br>将真解代入改进 Euler 法格式 $\displaystyle u_{n + 1}-u_n-\frac{h}{2}[f(t_n, u_n)+f(t_{n + 1}, u_{n + 1})]=0$ ，得到余项为 $\displaystyle -\frac{h^3}{12}u’‘’(\xi)$ ，$\xi\in(t_n, t_{n + 1})$ ，所以改进 Euler 法的局部截断误差为 $O(h^3)$ ，比 Euler 法精度更高</p><h3 id="整体误差">整体误差</h3><p>记 $\displaystyle e_n = u(t_n)-u_n$</p><p><strong>Euler 法</strong>：<br>$$<br>\begin{align*}<br>u_{n + 1}&amp;=u_n+hf(t_n,u_n)\<br>u(t_{n+1})&amp;=u(t_n)+hf(t_n,u(t_n)) + R_n<br>\end{align*}<br>$$<br>作差：<br>$$<br>\displaystyle e_{n + 1}=e_n+h[f(t_n,u_n)-f(t_n,u(t_n))]+R_n<br>$$</p><p>记 $R=\max|R_n|$，由于 $f$ 满足 Lipschitz 条件得：</p><p>$$<br>\begin{align*}<br>|e_{n+1}|&amp;\leq|e_n|+L\cdot h\cdot|e_n| + R\<br>|e_n|&amp;\leq(1 + Lh)|e_{n - 1}|+R\<br>&amp;\leq(1 + Lh)^2|e_{n - 2}|+(1 + Lh)R+R\<br>&amp;\vdots\<br>&amp;\leq(1 + Lh)^n|e_0|+R\sum_{j = 0}^{n - 1}(1 + Lh)^j\<br>&amp;=(1 + Lh)^n|e_0|+R\cdot\frac{(1 + Lh)^n-1}{Lh}<br>\end{align*}<br>$$</p><p>由 $\ln(1 + Lh)\leq Lh$，$\Rightarrow n\ln(1 + Lh)\leq n\cdot Lh\leq L(T - t_0)$，$\Rightarrow(1 + Lh)^n\leq e^{L(T - t_0)}$</p><p>于是<br>$$<br>|e_n|\leq e^{L(T - t_0)}|e_0|+\frac{R}{Lh}(e^{L(T - t_0)}-1)，n = 1,2,\cdots,N<br>$$</p><p>对 Euler 法，可取 $e_0 = 0$，$R = ch^2$</p><p>则<br>$$<br>|e_n|\leq\frac{ch}{L}(e^{L(T - t_0)})\leq ch<br>$$<br>即 $e_n = o(h)$</p><p>注意比较局部截断误差与整体误差的关系</p><h2 id="稳定性">稳定性</h2><p><strong>定义</strong>：中途误差是否连续地依赖于初始值误差。初始误差包括测量误差、舍入误差</p><p><strong>Euler 法稳定性分析</strong>：</p><p>从初值 $u_0$，$v_0$ 算出的节点值分别记为 ${u_n}$，${v_n}$。</p><p>$$<br>\begin{align*}<br>u_n&amp;=u_{n - 1}+hf(t_{n - 1},u_{n - 1})\<br>v_n&amp;=v_{n - 1}+hf(t_{n - 1},v_{n - 1})<br>\end{align*}<br>$$</p><p>两式相减，记 $e_n = u_n - v_n$，则<br>$$<br>e_n=e_{n - 1}+h[f(t_{n - 1},u_{n - 1})-f(t_{n - 1},v_{n - 1})]<br>$$<br>由 Lipschitz 条件，有<br>$$<br>|e_n|\leq|e_{n - 1}|+hL|e_{n - 1}|=(1 + Lh)|e_{n - 1}|<br>$$</p><p>递推可得：</p><p>$$<br>\begin{align*}<br>|e_n|&amp;\leq(1 + Lh)^n|e_0|\<br>&amp;\leq e^{L(T - t_0)}|e_0|<br>\end{align*}<br>$$<br>这表明 $e_n$ 连续地依赖于初始误差 $e_0$，即 <strong>Euler 法稳定</strong></p><h1>线性多步法</h1><h2 id="数值积分法">数值积分法</h2><p>数值积分公式：<br>$$<br>u(t_{n + 1})=u(t_n)+\int_{t_n}^{t_{n + 1}}f(t,u(t))dt<br>$$<br><strong>思想</strong>：适当地选取节点，用 Lagrange 插值多项式代替 $f(t,u(t))$</p><p><strong>Adams 外插法（显式）</strong></p><p>节点：$t_{n - k},\cdots,t_n$（$k + 1$ 个点），对应 $k + 1$ 步法</p><p>使用 $k$ 次 Lagrange 插值多项式</p><p><strong>Adams 内插法（隐式）</strong></p><p>节点：$\displaystyle t_{n - k},\cdots,t_n,t_{n + 1}$（未知 $t_{n + 1}$ 故仍为 $k + 1$ 步法）</p><p>使用 $k + 1$ 次 Lagrange 插值多项式</p><h2 id="Adams-外插法">Adams 外插法</h2><p><strong>插值分解</strong></p><p>将 $f(t, u(t))$ 分解为 $\displaystyle f(t, u(t)) = L_{n,k}(t) + r_{n,k}(t)$ ，其中 $\displaystyle L_{n,k}(t)$ 是插值多项式，$\displaystyle r_{n,k}(t)$ 是插值余项</p><p>根据积分的线性性质，有<br>$$<br>\displaystyle u(t_{n + 1}) = u(t_n)+\int_{t_n}^{t_{n + 1}}L_{n,k}(t)dt+\int_{t_n}^{t_{n + 1}}r_{n,k}(t)dt<br>$$<br>记为式 ①</p><p><strong>离散格式</strong><br>$$<br>\displaystyle u_{n + 1}=u_n+\int_{t_n}^{t_{n + 1}}L_{n,k}(t)dt<br>$$<br>是通过用插值多项式 $L_{n,k}(t)$ 近似 $f(t, u(t))$ 并积分得到的数值求解公式</p><p><strong>局部截断误差</strong></p><p>局部截断误差 $\displaystyle R_{n,k}=\int_{t_n}^{t_{n + 1}}r_{n,k}(t)dt$ ，它衡量了用插值多项式近似 $f(t, u(t))$ 并积分时产生的误差</p><p><strong>Lagrange 插值公式回顾</strong></p><p><strong>Lagrange 插值多项式</strong></p><p>对于给定节点 $x_0, x_1,\cdots, x_k$ ，函数 $f(x)$ 的 $k$ 次 Lagrange 插值多项式为 $\displaystyle L_k(x)=\sum_{i = 0}^{k}f(x_i)l_i(x)$ ，其中 $l_i(x)$ 是 Lagrange 基函数</p><p><strong>Newton 型插值多项式</strong></p><p>向前形式：$\displaystyle f(x_0)+f[x_0,x_1](x - x_0)+\cdots$</p><p>向后形式：$\displaystyle f(x_k)+f[x_{k - 1},x_k](x - x_k)+\cdots + f[x_0,\cdots,x_k](x - x_k)\cdots(x - x_0)$ ，其中 $\displaystyle f[x_i,\cdots,x_j]$ 是 $i$ 阶差商</p><p><strong>差分</strong></p><p>向前差分：$\displaystyle \Delta_+ f_j = f_{j + 1}-f_j$</p><p>向后差分：$\displaystyle \Delta_- f_j = f_j - f_{j - 1}$ ，且 $\displaystyle \Delta_-^k f_j=\Delta_+^k f_{-k}$</p><p><strong>采用 Newton 向后插值公式</strong></p><p>Newton 向后插值公式 $L_{n,k}(t)$ 是基于节点处函数值 $g(t_i)$ 及其差商，通过差商的线性组合来近似 $g(t)$ ，进而用于数值积分求解 $u(t_{n + 1})$  ，展开形式是利用差商和节点信息逐步构建，以逼近 $g(t)$ 在区间 $[t_n, t_{n + 1}]$ 上的积分</p><p>设 $t_{n - k},\cdots,t_{n - 1},t_n$ 为节点，令 $f(t, u(t)) = g(t)$ ，$t = t_n+\tau h$，$\tau\in[0,1]$<br>$$<br>\begin{align*}<br>L_{n,k}(t)&amp;=L_{n,k}(t)=g(t_n)+g(t_n,t_{n-1})(t-t_n)+\cdots+g(t_n,\cdots,t_{n-k})(t-t_n)\cdots(t-t_{n-k+1})\<br>&amp;=g(t_n)+\frac{g(t_n-g_{n-1})}{t_n-t_{n-1}}+\cdots\cdots<br>\end{align*}<br>$$<br><strong>Newton 向后插值多项式展开</strong></p><p>把 $L_{n,k}(t)$ 在 $t = t_n+\tau h$ 处展开，$\displaystyle g_{n - j}=f_{n - j}=f(t_{n - j},u_{n - j})$ 是节点处的函数值。利用向前差分 $\displaystyle \Delta_+^i g_{n - i}$ 来构建插值多项式，$\displaystyle \binom{s}{j}=\frac{s(s - 1)\cdots(s - j + 1)}{j!}$ ，$\displaystyle \binom{s}{0}=1$ ，得到 $L_{n,k}(t)$ 的具体形式<br>$$<br>L_{n,k}(t)=g(t_n)+\frac{\Delta_+^i g_{n - 1}}{h}\tau h+\frac{\Delta_+^i g_{n - 2}}{2!}\tau(\tau+1)+ \cdots+\frac{\tau(\tau+1)\cdots(\tau+k-1)}{k!}\Delta_+^i g_{n - k}<br>$$<br>则<br>$$<br>\begin{align*}<br>L_{n,k}(t)&amp;=L_{n,k}(t_n+\tau h) \<br>&amp;=\sum_{j=0}^k (-1)^j\binom{-\tau}{j}\Delta_+^i f_{n - j}\<br>\end{align*}<br>$$</p><p><strong>代入积分并化简</strong></p><p>将 $L_{n,k}(t)$ 代入 $\displaystyle u_{n + 1}=u_n+\int_{t_n}^{t_{n + 1}}L_{n,k}(t)dt$ ，通过换元 $t = t_n+\tau h$ ，$dt = h d\tau$ ，把积分区间从 $[t_n,t_{n + 1}]$ 转换为 $[0,1]$ 。然后对积分进行计算，提出与 $j$ 无关的项 $h$ 和 $\Delta_+^j f_{n - j}$ ，得到 $\displaystyle u_{n + 1}=u_n + h\sum_{j = 0}^{k}a_j\Delta_+^j f_{n - j}$ ，其中记 $\displaystyle a_j = (-1)^j\int_{0}^{1}\binom{-\tau}{j}d\tau$</p><p>具体步骤如下：<br>$$<br>\begin{align*}<br>u_{n+1}&amp;=u_n+\int_{t_n}^{t_{n+1}} L_{n,k}(t)dt\<br>&amp;=u_n+\int_{0}^{1} L_{n,k}(t_n+\tau h)hd\tau\<br>&amp;=\displaystyle u_n + h\sum_{j = 0}^{k}(-1)^j\int_{0}^{1}\binom{-\tau}{j}d\tau\Delta_+^j f_{n - j}\<br>&amp;=\displaystyle u_n + h\sum_{j = 0}^{k}a_j\Delta_+^j f_{n - j}<br>\end{align*}<br>$$<br><strong>计算系数（生成函数法）</strong></p><p>把 $(-1)^j(-\tau)(-\tau - 1)\cdots(-\tau - j + 1)$ 看成是 $(1 - t)^{-\tau}$ 关于 $t$ 在 $t = 0$ 处的导数</p><p>利用泰勒级数展开<br>$$<br>(1 - t)^{-\tau}=\sum_{j = 0}^{\infty}\frac{(-1)^j(-\tau)(-\tau - 1)\cdots(-\tau - j + 1)}{j!}t^j<br>$$</p><p>对上述展开式的左右两端在 $[0,1]$ 上积分并进行一系列变形</p><p>得<br>$$<br>\displaystyle -\frac{t}{(1 - t)\ln(1 - t)}=\sum_{j = 0}^{\infty}a_j t^{j + 1}<br>$$</p><p>变形得<br>$$<br>-\frac{\ln(1 - t)}{t}\sum_{j = 0}^{\infty}a_j t^{j + 1}=\frac{1}{1-t}=1+t+t^2+\cdots+t^n<br>$$</p><p>由<br>$$<br>-\frac{\ln(1 - t)}{t}=1+\frac{t}{2}+\frac{t^2}{3}+\cdots+\frac{t^{n-1}}{n}<br>$$</p><p>代入得<br>$$<br>(1+\frac{t}{2}+\frac{t^2}{3}+\cdots+\frac{t^{n-1}}{n})(a_0+a_1+\cdots+a_nt^n)=(1+t+t^2+\cdots+t^n)<br>$$</p><p>比较系数得到 $a_j$<br>$$<br>\begin{equation}<br>\begin{cases}<br>a_0=1 \<br>a_1+\frac{1}{2}a_0= 1 \<br>\quad \quad \vdots  \<br>a_n + \frac{1}{2}a_{n-1}+\frac{1}{3}a_{n-2}+\cdots+\frac{1}{n+1}a_{0} = 1<br>\end{cases}<br>\end{equation}<br>$$</p><p><strong>计算 $\Delta_-^j f_{n-j}$</strong></p><p><strong>原理</strong>：利用向前差分算子 $\Delta_+$ 的性质，$\Delta_+=(S - I)$（$S$ 为移位算子，$\displaystyle Sf_n = f_{n + 1}$ ，$I$ 为恒等算子 ），通过二项式定理 $\displaystyle (a + b)^j=\sum_{l = 0}^{j}C_{j}^{l}a^{j - l}b^{l}$ 展开 $(E - I)^j$ 来计算 $\Delta_+^j f_{n - j}$</p><p><strong>具体实现步骤：</strong><br>$$<br>\Delta_+ f_n=f_{n+1}-f_{n}=(S-I)f_n \<br>$$</p><p>$$<br>\begin{align*}<br>\Delta_+ f_n &amp;=(S-I)^jf_{n-j} \<br>&amp;=\sum_{l = 0}^{j}C_{j}^{l}S^{J - l}(-I)^{l}f_{n-j}\<br>&amp;=\sum_{l = 0}^{j}(-1)^l\binom{j}{l}f_{n-l}<br>\end{align*}<br>$$</p><p>因而<br>$$<br>\begin{align*}<br>u_{n + 1}&amp;=u_n + h\sum_{j = 0}^{k}a_j\Delta_+^j f_{n - j} \<br>&amp;=u_n + h\sum_{j = 0}^{k}a_j\sum_{l=0}^{j}(-1)^l\binom{j}{l}f_{n - l}\<br>&amp;=u_n + h\sum_{l=0}^{j}\sum_{j = 0}^{k}(-1)^la_j\binom{j}{l}f_{n - l}\<br>&amp;=u_n+h\sum_{j = 0}^{k}b_{kl}f_{n - l}<br>\end{align*}<br>$$</p><p>其中记 $\displaystyle b_{kl}=\sum_{j = 0}^{k}(-1)^la_j\binom{j}{l}$</p><p><strong>$k=0$</strong>：此时公式为 $\displaystyle u_{n + 1}=u_n+hf(t_n,u_n)$ ，这就是显式 Euler 法，它是 Adams 外插法的最简单形式，基于当前点的函数值来预估下一点的值</p><p><strong>$k=1$</strong>：$\displaystyle u_{n + 1}=u_n+\frac{h}{2}(3f_n - f_{n - 1})$ ，利用前两个节点的函数值来计算下一个节点的数值解，相比 Euler 法考虑了更多历史信息</p><p><strong>$k=2$</strong>：$\displaystyle u_{n + 1}=u_n+\frac{h}{12}(23f_n - 16f_{n - 1}+5f_{n - 2})$ ，使用了前三个节点的函数值，精度进一步提高</p><p><strong>$k=3$</strong>：$\displaystyle u_{n + 1}=u_n+\frac{h}{24}(55f_n - 59f_{n - 1}+37f_{n - 2}-9f_{n - 3})$ ，借助更多历史节点信息来逼近真实解</p><p>Adams 外插法局部截断误差</p><p><strong>插值余项公式</strong>：对于函数 $f(x)$ 的 $n$ 次插值多项式 $P_n(x)$</p><p>插值余项<br>$$<br>\displaystyle E(f,x)=f(x)-P_n(x)=\frac{(x - x_0)(x - x_1)\cdots(x - x_n)}{(n + 1)!}f^{(n + 1)}(\xi)\quad(\xi 介于 x 与节点之间)<br>$$</p><p><strong>应用到 Adams 外插法</strong>：这里 $g(t)=f(t,u(t))$ ，$L_{n,k}(t)$ 是插值多项式，$\displaystyle r_{n,k}(t)=g(t)-L_{n,k}(t)$ 为插值余项</p><p>根据插值余项公式<br>$$<br>\displaystyle r_{n,k}(t)=\frac{(t - t_{n - k})(t - t_{n - k + 1})\cdots(t - t_n)}{(k + 1)!}g^{(k + 1)}(\xi)<br>$$</p><p>$\xi$ 与 $t$ 有关，局部截断误差就是对 $\displaystyle r_{n,k}(t)$ 在积分区间上积分产生的误差</p><p>将 $t = t_n+\tau h$ 代入插值余项表达式 $\displaystyle r_{n,k}(t)$ 。根据插值余项公式 $\displaystyle r_{n,k}(t)=\frac{(t - t_{n - k})(t - t_{n - k + 1})\cdots(t - t_n)}{(k + 1)!}u^{(k + 2)}(\xi)$ ，当 $t = t_n+\tau h$ 时，$\displaystyle t - t_{n - i}=\tau h + ih = (\tau + i)h$ （$i = 0,1,\cdots,k$ ），</p><p>代入后经过整理得到<br>$$<br>\displaystyle r_{n,k}(t_n+\tau h)=\frac{(\tau + k)(\tau + k - 1)\cdots(\tau + 1)\tau h^{k + 1}}{(k + 1)!}u^{(k + 2)}(\xi)<br>$$</p><p>进一步变形为<br>$$<br>\displaystyle r_{n,k}(t_n+\tau h)=(-1)^{k + 1}\binom{-\tau}{k + 1}h^{k + 1}u^{(k + 2)}(\xi)<br>$$</p><p><strong>积分变换</strong>：已知 $\displaystyle R_{n,k}=\int_{t_n}^{t_{n + 1}}r_{n,k}(t)dt$ ，通过换元 $t = t_n+\tau h$ ，$dt = h d\tau$ ，积分区间从 $[t_n,t_{n + 1}]$ 变为 $[0,1]$</p><p>则<br>$$<br>R_{n,k}=\int_{0}^{1}r_{n,k}(t_n+\tau h)\cdot h d\tau<br>$$</p><p><strong>代入化简</strong>：将 $\displaystyle r_{n,k}(t_n+\tau h)=(-1)^{k + 1}\binom{-\tau}{k + 1}h^{k + 1}u^{(k + 2)}(\xi)$ 代入上式</p><p>得到<br>$$<br>R_{n,k}=\int_{0}^{1}(-1)^{k + 1}\binom{-\tau}{k + 1}u^{(k + 2)}(\xi)d\tau h^{k + 2}<br>$$</p><p><strong>结果分析</strong>：由于 $\displaystyle u^{(k + 2)}(\xi)$ 在积分区间内有界（在一定条件下 ），令 $\displaystyle \alpha_{k + 1}=\int_{0}^{1}(-1)^{k + 1}\binom{-\tau}{k + 1}d\tau$</p><p>则<br>$$<br>\displaystyle R_{n,k}=\alpha_{k + 1}u^{(k + 2)}(\overline{\xi})h^{k + 2}<br>$$</p><p>可知 $\displaystyle R_{n,k}=O(h^{k + 2})$ ，这表明 Adams 外插法的<strong>局部截断误差阶</strong>为 $h^{k + 2}$ ，即随着步长 $h$ 减小，误差以 $\displaystyle h^{k + 2}$ 的速度趋近于 0</p><h2 id="Adams-内插法">Adams 内插法</h2><p>Adams 内插法为隐格式</p><p>局部截断误差比外插法高一阶，为 $O(h^{k + 3})$</p><p>$k = 0, 1, 2, 3$的内插公式：</p><p>$k = 0$：$\displaystyle u_{n + 1} = u_n + hf_{n + 1}$  → 隐式 Euler</p><p>$k = 1$：$\displaystyle u_{n + 1} = u_n + \frac{h}{2}(f_{n + 1} + f_n)$  → 改进 Euler</p><p>$k = 2$：$\displaystyle u_{n + 1} = u_n + \frac{h}{12}(5f_{n + 1} + 8f_n - f_{n - 1})$</p><p>$k = 3$：$\displaystyle u_{n + 1} = u_n + \frac{h}{24}(9f_{n + 1} + 19f_n - 5f_{n - 1} + f_{n - 2})$</p><p>多步法一般形式：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f_{n + j}<br>$$</p><p>由 $\displaystyle u_n, u_{n + 1}, \cdots, u_{n + k - 1}$ → $u_{n + k}$ （共 $k$ 个，即$k$步法）</p><p>Adams 方法：<br>$$<br>\alpha_k = 1，\alpha_{k - 1} = -1，\displaystyle \alpha_{k - 2} = \cdots = \alpha_0 = 0<br>$$<br>注：$\alpha_k$ 总可取成 1，显方法 $\beta_k = 0$，隐方法 $\beta_k \neq 0$</p><p>实际计算时，初始 $u_0, u_1, \cdots, u_{k - 1}$，可由单步法算</p><h3 id="待定系数法">待定系数法</h3><p>将真解 $u(t)$ 代入格式：$\displaystyle L[u(t_n); h] = \sum_{j = 0}^{k} [\alpha_j u(t_{n + j}) - h\beta_j f(t_{n + j}, u(t_{n + j}))]$</p><p>为简便且讨论一般，在 $t_n$ 处作 Taylor 展开：</p><p>$$<br>u(t_{n + j}) = u(t_n + jh) = u(t_n) + u’(t_n)jh + \frac{u’‘(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q)}(t_n)}{q!}(jh)^q + \cdots \<br>f(t_{n + j}, u(t_{n + j})) = u’(t_{n + j}) = u’(t_n + jh) = u’(t_n) + u’‘(t_n)jh + \frac{u’‘’(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q + 1)}(t_n)}{q!}(jh)^q + \cdots<br>$$<br>则：</p><p>$$<br>\begin{align*}<br>&amp;\sum_{j = 0}^{k} [\alpha_j u(t_{n + j}) - h\beta_j f(t_{n + j}, u(t_{n + j}))] \<br>&amp;=\sum_{j = 0}^{k} [\alpha_j (u(t_n) + u’(t_n)jh + \frac{u’‘(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q)}(t_n)}{q!}(jh)^q + \cdots) - h\beta_j (u’(t_n) + u’‘(t_n)jh + \frac{u’‘’(t_n)}{2!}(jh)^2 + \cdots + \frac{u^{(q + 1)}(t_n)}{q!}(jh)^q)] \<br>&amp;=\sum_{j = 0}^{k} \alpha_j u(t_n) + \sum_{j = 0}^{k} (j\alpha_j - \beta_j)u’(t_n) \cdot h + \cdots + \sum_{j = 0}^{k} (\alpha_j \frac{j^q}{q!} - \beta_j \frac{j^{q - 1}}{(q - 1)!}) \cdot h^q \<br>&amp;= C_0 u(t_n) + C_1 u’(t_n) + \cdots + C_q u^{(q)}(t_n) \cdot h^q + \cdots<br>\end{align*}<br>$$</p><p>其中：<br>$$<br>\begin{equation}<br>\begin{cases}<br>C_0 = \alpha_0 + \alpha_1 + \cdots + \alpha_k \<br>C_1 = \alpha_1 + 2\alpha_2 + \cdots + k\alpha_k - (\beta_0 + \beta_1 + \cdots + \beta_k) \<br>\quad \quad \vdots  \<br>C_q = \frac{1}{q!}(\alpha_1 + 2^q\alpha_2 + \cdots + k^q\alpha_k) - \frac{1}{(q - 1)!}(\beta_1 + 2^{q - 1}\beta_2 + \cdots + k^{q - 1}\beta_k)<br>\end{cases}<br>\end{equation}<br>$$</p><p>若 $u(t)$ 有 $p + 2$ 次连续导数，则可选 $\alpha_j, \beta_j$</p><p>使得：<br>$$<br>C_0 = C_1 = \cdots = C_p = 0，C_{p + 1} \neq 0<br>$$<br>此时：<br>$$<br>L[u(t_n); h] = C_{p + 1} u^{(p + 1)}(t_n)h^{p + 1} + O(h^{p + 2})<br>$$<br>得到了 $p$ 阶 $k$ 步法：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f_{n + j}<br>$$<br>局部截断误差为 $O(h^{p + 1})$<br>整体误差为 $O(h^p)$</p><h1>相容性、稳定性和误差估计</h1><p><strong>k 步法</strong>：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f_{n + j}<br>$$</p><h2 id="相容性">相容性</h2><p><strong>相容性：差分算子逼近微分算子</strong></p><p><strong>以 Euler 法为例</strong>：</p><p>$$<br>u_{n + 1} = u_n + hf(t_n, u_n)，变形为 \frac{u_{n + 1} - u_n}{h} = f(t_n, u_n)<br>$$<br><strong>差分算子</strong>：<br>$$<br>L[u(t_n); h] = u(t_{n + 1}) - u(t_n) - hf(t_n, u(t_n))<br>$$<br><strong>差商算子</strong>：<br>$$<br>\frac{1}{h}L[u(t_n); h] = \frac{u(t_{n + 1}) - u(t_n)}{h} - f(t_n, u(t_n))<br>$$<br><strong>微分算子</strong>：<br>$$<br>u’(t) - f(t, u(t))<br>$$<br><strong>Euler 法相容性</strong>：<br>$$<br>\frac{1}{h}L[u(t_n); h] - [u’(t_n) - f(t_n, u(t_n))] \to 0，当 h \to 0<br>$$<br><strong>k 步法相容性</strong>：<br>$$<br>\frac{1}{h} [\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) - h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j}))] - [u’(t_n) - f(t_n, u(t_n))] = o(1)，当 h \to 0<br>$$</p><p>即<br>$$<br>\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) - h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j})) = o(h) \ \Leftrightarrow (C_0 = 0, C_1 = 0)<br>$$<br>其中<br>$$<br>\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) - h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j})) = C_0u(t) + C_1u’(t)h + C_2u’'(t)h^2 + \cdots<br>$$</p><h3 id="特征多项式">特征多项式</h3><p><strong>第一特征多项式：</strong><br>$$<br>\rho(\lambda) = \sum_{j = 0}^{k} \alpha_j \lambda^j<br>$$<br><strong>第二特征多项式：</strong><br>$$<br>\sigma(\lambda) = \sum_{j = 0}^{k} \beta_j \lambda^j<br>$$</p><h4 id="定理3-1">定理3.1</h4><p>$$<br>k步法相容 \Leftrightarrow C_0 = 0, C_1 = 0 \Leftrightarrow \rho(1) = 0, \rho’(1) = \sigma(1)<br>$$</p><p>其中：<br>$$<br>\begin{align*}<br>&amp;C_0 = \alpha_0 + \alpha_1 + \cdots + \alpha_k = \rho(1)\<br>&amp;C_1 = \alpha_1 + 2\alpha_2 + \cdots + k\alpha_k - (\beta_0 + \beta_1 + \cdots + \beta_k) = \rho’(1) - \sigma(1)<br>\end{align*}<br>$$</p><h2 id="稳定性-2">稳定性</h2><p>稳定性：解对初值的连续依赖性</p><p><strong>k 步法</strong>：由初值 $u_0, u_1, \cdots, u_{k - 1}$ 得到 $u_n$ 。若 $u_0, u_1, \cdots, u_{k - 1}$ 有误差，$u_n$ 的误差是否会无限增长？</p><p><strong>定义 3.2</strong>：若 $\exists \tau &gt; 0, h_0 &gt; 0$ ，使得当网格步长 $h$ 满足 $0 &lt; h &lt; h_0$ 时，对 $k$ 步法的任意两个解 ${u_n}$， ${v_n}$</p><p>都有<br>$$<br>\max_{n \leq \frac{T}{h}} |u_n - v_n| \leq \tau \max_{0 \leq j \leq k} |u_j - v_j|<br>$$<br>则称 $k$ 步法<strong>稳定</strong></p><h3 id="具体方法的误差递推关系">具体方法的误差递推关系</h3><p><strong>显式 Euler：</strong><br>$$<br>|e_{n + 1}| \leq |e_n| + Lh|e_n| + R<br>$$<br>此为误差递推关系</p><p><strong>隐式 Euler：</strong><br>$$<br>u_{n + 1} = u_n + hf(t_{n + 1}, u_{n + 1})\<br>v_{n + 1} = v_n + hf(t_{n + 1}, v_{n + 1})\<br>\rightarrow|e_{n + 1}| \leq |e_n| + Lh|e_{n + 1}|\<br>\rightarrow|e_{n + 1}| \leq \frac{1}{1 - Lh}|e_n|<br>$$<br><strong>k 步法：</strong></p><p>已知：由 $u_0, u_1, \cdots, u_{k - 1}$ 得到 $u_n$ ，满足<br>$$<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u_{n + j})<br>$$<br>由 $v_0, v_1, \cdots, v_{k - 1}$ 得到 $v_n$ ，满足<br>$$<br>\sum_{j = 0}^{k} \alpha_j v_{n + j} = h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, v_{n + j})<br>$$<br>记 $e_n = u_n - v_n$ ，则<br>$$<br>\sum_{j = 0}^{k} \alpha_j e_{n + j} = h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u_{n + j}) - f(t_{n + j}, v_{n + j})]<br>$$<br>记 $hb_n$ 为：<br>$$<br>hb_n=h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u_{n + j}) - f(t_{n + j}, v_{n + j})]<br>$$<br>进一步得到<br>$$<br>e_{n + k} = \frac{1}{\alpha_k}(-\alpha_{k - 1}e_{n + k - 1} - \cdots - \alpha_0 e_n + hb_n)<br>$$<br>将 $k$ 个连续的 $e_i$ 构成向量形式：<br>$$<br>\begin{bmatrix}e_{n + k}\e_{n + k - 1}\\vdots\e_{n + 1}\end{bmatrix}=</p><p>\begin{bmatrix}<br>-\frac{\alpha_{k - 1}}{\alpha_k}   &amp;-\frac{\alpha_{k - 2}}{\alpha_k}    &amp;\cdots&amp;    -\frac{\alpha_0}{\alpha_k}  \   1&amp;0&amp;\cdots&amp;0\    \vdots&amp;\ddots&amp;\ddots&amp;\vdots\0&amp;\cdots&amp;1&amp;0\end{bmatrix}</p><p>\begin{bmatrix}e_{n + k - 1}\e_{n + k - 2}\\vdots\e_{n}\end{bmatrix}+\begin{bmatrix}h\frac{b_n}{\alpha_k}\0\\vdots\0\end{bmatrix}<br>$$<br>即<br>$$<br>E_{n + 1} = CE_n + B_n<br>$$<br>类似数值代数中迭代法</p><p>且<br>$$<br>E_n = C^nE_0 + \sum_{l = 0}^{n - 1} C^l B_{n - 1 - l}<br>$$</p><h3 id="关于-C-n-有界性分析">关于 $C^n$ 有界性分析</h3><p><strong>特征方程</strong></p><p>计算 $\det(C - \lambda I_k)$ ，其结果为<br>$$<br>(\alpha_k\lambda^k+\cdots+\alpha_1\lambda+\alpha_0)\cdot(-1)^k\alpha_k^{-1}<br>$$<br>记<br>$$<br>\rho(\lambda)=\alpha_k\lambda^k+\cdots+\alpha_1\lambda+\alpha_0<br>$$<br><strong>利用 Jordan 标准型计算</strong></p><p>设 $\lambda_j$ 是 $C$ 的特征值，$\displaystyle x_j=(d_{k - 1},\cdots,d_0)^T$ 是相应特征向量 ，则有 $Cx_j=\lambda_jx_j$ ，由此推导出一系列等式：</p><p>$$<br>-\alpha_k^{-1}(\alpha_{k - 1}d_{k - 1}+\cdots+\alpha_1d_1+\alpha_0d_0)=\lambda_jd_{k - 1}\<br>d_{k - 2}=\lambda_jd_{k - 3}$ ，$\cdots$ ，$d_1=\lambda_jd_0<br>$$<br>进而得到<br>$$<br>d_{k - 1}=\lambda_j^{k - 1}d_0\<br>x_j = d_0(\lambda_j^{k - 1},\cdots,\lambda_j,1)<br>$$<br>因而 $C$ 的每个特征值的特征子空间维数都是 1，即每个特征值几何重数为 1，每个特征值的 Jordan 块只有 1 块。记 $C$ 的 Jordan 标准型为 $J$</p><p>则<br>$$<br>C = PJP^{-1}<br>$$<br><strong>Jordan 块形式：</strong>$J$ 的 Jordan 块要么是 $\lambda$ ，要么是 $J_r(\lambda)$，$r$ 是 $\lambda$ 的重数<br>$$<br>J_r(\lambda)=\begin{bmatrix}<br>\lambda &amp; 1       &amp; \cdots &amp; 0 \<br>0       &amp; \lambda &amp; \ddots &amp; \vdots \<br>\vdots  &amp; \vdots  &amp; \ddots &amp; 1 \<br>0       &amp; 0       &amp; \cdots &amp; \lambda<br>\end{bmatrix}<br>$$</p><p>$\displaystyle C^n = PJ^nP^{-1}$ ，且 $J^n$ 也是分块矩阵，每一块形式为 $\lambda^n$ 或 $J_r^n$<br>$$<br>J_r^n(\lambda)=\begin{bmatrix}<br>\lambda &amp; c_n^1\lambda^{n-1}-\cdots c_n^{r-1}\lambda^{n-r+1}       &amp; \cdots &amp; 0 \<br>0       &amp; \lambda &amp; \ddots &amp; \vdots \<br>\vdots  &amp; \vdots  &amp; \ddots &amp; c_n^1\lambda^{n-1} \<br>0       &amp; 0       &amp; \cdots &amp; \lambda<br>\end{bmatrix}<br>$$</p><p>对于 $J_r=\lambda I + S$ ，（其中 $S$ 是幂零矩阵）<br>$$<br>S=\begin{bmatrix}<br>0&amp; 1       &amp; \cdots &amp; 0 \<br>0       &amp; 0  &amp; \ddots &amp; \vdots \<br>\vdots  &amp; \vdots  &amp; \ddots &amp; 1 \<br>0       &amp; 0       &amp; \cdots &amp; 0<br>\end{bmatrix}<br>\quad</p><p>S^2=\begin{bmatrix}<br>0 &amp; 0 &amp;1      &amp; \cdots &amp; 0 \<br>0       &amp; 0&amp; \ddots &amp; \ddots &amp;\vdots\<br>0 &amp; 0 &amp;\ddots &amp;\ddots &amp;1\<br>\vdots  &amp; \vdots  &amp; \ddots &amp; 0 &amp;0\<br>0       &amp; 0       &amp; \cdots &amp; 0&amp;0<br>\end{bmatrix} \quad</p><p>S^r=0<br>$$</p><p>利用二项式定理计算<br>$$<br>\begin{align*}<br>J_r^n &amp;= (\lambda I+S)^n  \<br>&amp;=\sum_{j = 0}^{n}C_{n}^{j}\lambda^{n - j}S^j  \<br>&amp;=\sum_{j = 0}^{r - 1}C_{n}^{j}\lambda^{n - j}S^j<br>\end{align*}<br>$$<br>这里 $\displaystyle C_{n}^{j}=\frac{n!}{j!(n - j)!}$</p><h3 id="引理-1-1">引理 1.1</h3><ol><li><p>$C^n$有界 $\Leftrightarrow |\lambda_j| \leq 1$ ，且若 $|\lambda_j| = 1$ ，则 $\lambda_j$ 是单根</p></li><li><p>$C^n$有极限 $\Leftrightarrow |\lambda_j| \leq 1$ ，且若 $|\lambda_j| = 1$ ，则 $\lambda_j$ 不仅是单根且 $\lambda_j = 1$</p></li><li><p>$C^n \to 0 \Leftrightarrow |\lambda_j| &lt; 1$</p></li></ol><h3 id="定理：线性多步法稳定的充要条件">定理：线性多步法稳定的充要条件</h3><p>线性 $k$ 步法稳定 $\Leftrightarrow$ 第一特征多项式 $\rho(\lambda)$ 的根满足 $|\lambda| \leq 1$ ，且位于单位圆周上的根都是单根（即 $\rho(\lambda)$ 满足根条件</p><p><strong>证明</strong></p><p><strong>必要性证明</strong></p><p>将 $k$ 步法用于方程 $u’ = 0$ ，此时 $f(t, u) \equiv 0$ ，则 $\displaystyle \sum_{j = 0}^{k} \alpha_j u_{n + j} = 0$ ，${u_n = 0}$ 是上述方程的平凡解。</p><p>因为 $k$ 步法稳定，所以 $\exists \tau, h_0$ ，使得当 $0 &lt; h &lt; h_0$ 时，$\displaystyle \max_{n \leq \frac{T}{h}} |u_n| \leq \tau \max_{0 \leq j \leq k} |u_j|$ ，即 ${u_n}$ 关于 $n, h$ 一致有界。</p><p>又因为 $u_n = C^n u_0$ （这里 $\displaystyle u_0 = [u_{k - 1}, \cdots, u_0]^T$ ，$\displaystyle u_n = [u_{n + k - 1}, \cdots, u_n]^T$ ），所以 ${C^n}$ 一致有界，从而 $\rho(\lambda)$ 满足根条件。</p><p><strong>充分性证明</strong></p><p>设 ${u_n}, {v_n}$ 是 $k$ 步法的两个解，令 $e_n = u_n - v_n$ ，则<br>$$<br>\displaystyle \sum_{j = 0}^{k} \alpha_j e_{n + j} = h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u_{n + j}) - f(t_{n + j}, v_{n + j})] = hb_n<br>$$<br>设 $B = \max{|\beta_0|, \cdots, |\beta_k|}$ ，由 $f$ 关于 $u$ 满足 Lipschitz 条件，可得<br>$$<br>|b_n| \leq B\cdot L \sum_{j = 0}^{k} |e_{n + j}|<br>$$<br>记 $\displaystyle E_n = (e_{n + k - 1}, \cdots, e_n)^T$ ，$\displaystyle B_n = (h\alpha_k^{-1}b_n, 0, \cdots, 0)^T$ ，则 $E_{n + 1} = CE_n + B_n$ ，进而有<br>$$<br>E_n = C^n E_0 + \sum_{l = 0}^{n - 1} C^l B_{n - 1 - l}<br>$$<br>由于 $\rho(\lambda)$ 满足根条件，所以 $|C^n| \leq M, \forall n$ ，且<br>$$<br>|B_n| \leq h|\alpha_k^{-1}| |b_n| \leq h|\alpha_k^{-1}| \cdot B\cdot L \sum{j = 0}^{k} |e{n + j}|<br>$$<br>经过推导可得<br>$$<br>\begin{align}<br>|E_n| &amp;\leq M|E_0| + \sum_{l = 0}^{n - 1} M\cdot h|\alpha_k^{-1}| \cdot B\cdot L \sum_{j = 0}^{k} |e_{n - 1 - l + j}| \&amp;\leq M|E_0| + M_1 \sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - 1 - l + j}|<br>\end{align}<br>$$<br>对 $\displaystyle \sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}|$ 进行放缩：<br>$$<br>\sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}|=\sum_{l = 0}^{n - 1} |e_{n + k - 1 - l}|+\sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}|<br>$$<br>利用向量范数性质，有<br>$$<br>\sum_{l = 0}^{n - 1} |e_{n + k - 1 - l}|+\sum_{l = 0}^{n - 1} \sum_{j = 0}^{k} |e_{n - l - 1 + j}| \leq \sum_{l = 0}^{n - 1} |E_{n - l - 1}|+\sum_{l = 0}^{n - 1} \sqrt{k} |E_{n - l - 1}|<br>$$<br>进一步得到<br>$$<br>\sum_{l = 0}^{n - 1} |E_{n - l - 1}|+\sum_{l = 0}^{n - 1} \sqrt{k} |E_{n - l - 1}|=|E_n|+(1 + \sqrt{k})\sum_{i = 0}^{n - 1} |E_i|<br>$$<br>结合前面 $|E_n|$ 的表达式<br>$$<br>|E_n| \leq M|E_0| + M B L|\alpha_k^{-1}| h |E_n|+M B L|\alpha_k^{-1}| h\cdot(\sqrt{k}+1)\sum_{l = 0}^{n - 1} |E_l|<br>$$<br>在 $\displaystyle MBL|\alpha_k^{-1}| h_0 &lt; 1$ 条件下，令 $\displaystyle K_1=\frac{M}{1 - M B L|\alpha_k^{-1}| h_0}$ ，$\displaystyle K_2 = K_1 M B L|\alpha_k^{-1}|(\sqrt{k}+1)$ ，可得<br>$$<br>|E_n| \leq M|E_0| + M B L|\alpha_k^{-1}| h |E_n|+M B L|\alpha_k^{-1}| h\cdot(\sqrt{k}+1)\sum_{l = 0}^{n - 1} |E_l|<br>$$<br>再由 Gronwall 不等式，得到<br>$$<br>|E_n| \leq e^{K_2 T}(K_1 + K_2 h_0)|E_0|<br>$$<br>进而有<br>$$<br>\max_{n \leq \frac{T}{h}} |u_n - v_n| \leq \overline{c} \max_{0 \leq j \leq k} |u_j - v_j|<br>$$</p><p>说明方法稳定</p><p>应用：Euler 法稳定性、Adams 外插和内插法稳定性</p><h2 id="收敛性与误差估计">收敛性与误差估计</h2><p><strong>定义与设定</strong>：设真解 $u(t_n)$ 和数值解 $u_n$ 满足 ：<br>$$<br>\sum_{j = 0}^{k} \alpha_j u(t_{n + j}) = h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u(t_{n + j})) + R_n \<br>\sum_{j = 0}^{k} \alpha_j u_{n + j} = h\sum_{j = 0}^{k} \beta_j f(t_{n + j}, u_{n + j})<br>$$</p><p>令 $\displaystyle e_n = u(t_n) - u_n$</p><p>则<br>$$<br>\begin{align}<br>\sum_{j = 0}^{k} \alpha_j e_{n + j} &amp;= h\sum_{j = 0}^{k} \beta_j [f(t_{n + j}, u(t_{n + j})) - f(t_{n + j}, u_{n + j})]+R_n \&amp;= hb_n + R_n<br>\end{align}<br>$$</p><p>设 $\displaystyle R_n = C_{p + 1}h^{p + 1}$ ，记 $\displaystyle E_{n + 1} = CE_n + B_n^<em>$ ，其中 $\displaystyle B_n^</em>=(h\alpha_k^{-1}b_n^<em>, 0, \cdots, 0)^T$ ，且<br>$$<br>\displaystyle |B_n^</em>| \leq h B L|\alpha_k^{-1}| \sum_{j = 0}^{k} |e_{n + j}|+M_{p + 1}h^{p + 1}<br>$$</p><h3 id="定理">定理</h3><p>相容性 + 稳定性 $\Rightarrow$ 收敛。且若 $E_0 = 0$ ，则 $|E_n| \leq C h^p$  。即当数值方法满足<strong>相容性</strong>（差分算子能逼近微分算子）和<strong>稳定性</strong>（解对初值连续依赖）时，随着步长 $h$ 趋于 0 ，数值解会收敛到真解 ，且在初始误差为 0 时，误差阶为 $O(h^p)$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微分方程数值解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>积分与求和转换的思想求解一类积分不等式问题</title>
      <link href="/2025/05/14/%E7%A7%AF%E5%88%86%E4%B8%8E%E6%B1%82%E5%92%8C%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%80%9D%E6%83%B3%E6%B1%82%E8%A7%A3%E4%B8%80%E7%B1%BB%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/14/%E7%A7%AF%E5%88%86%E4%B8%8E%E6%B1%82%E5%92%8C%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%80%9D%E6%83%B3%E6%B1%82%E8%A7%A3%E4%B8%80%E7%B1%BB%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>核心思想：积分就是求和，求和就是积分，一个针对连续量，一个针对离散量，两者可以互相转化，二者既对立又统一</strong></p><h2 id="从一道经典的考研数学真题引入">从一道经典的考研数学真题引入</h2><p>设 $f(x)$ 在 $[1,+\infty)$ 上连续且单调递减，并且在定义域内 $$f(x)&gt;0$$，$$\displaystyle a_n=\sum_{k=1}^{n}f(k)-\int_1^{n}f(x)dx$$，证明：数列 $$a_n$$ 收敛</p><p><strong>解：</strong> <strong>第一步：判断数列 $a_n$ 的单调性</strong></p><p><strong>计算</strong> $$a_{n + 1}-a_{n}:$$<br>$$<br>\begin{align}</p><pre><code>a_&#123;n+1&#125;-a_&#123;n&#125; &amp;= \left(\sum_&#123;k = 1&#125;^&#123;n + 1&#125;f(k)-\int_&#123;1&#125;^&#123;n + 1&#125;f(x)dx\right)-\left(\sum_&#123;k = 1&#125;^&#123;n&#125;f(k)-\int_&#123;1&#125;^&#123;n&#125;f(x)dx\right) \nonumber \\     &amp;= f(n + 1)-\int_&#123;n&#125;^&#123;n + 1&#125;f(x)dx \nonumber \\</code></pre><p>\end{align}<br>$$<br>根据积分中值定理，若函数 $y = f(x)$ 在区间 $[a,b]$ 上连续，则在 $[a,b]$ 上至少存在一点 $\xi$，使得 $$\displaystyle \int_{a}^{b}f(x)dx=(b - a)f(\xi)$$，则存在 $$\xi\in(n,n + 1)$$，使得 $$\displaystyle \int_{n}^{n + 1}f(x)dx=f(\xi)$$</p><p>因为 $f(x)$ 单调递减，且 $n&lt;\xi&lt;n + 1$，所以<br>$$<br>\displaystyle f(n + 1)-\int_{n}^{n + 1}f(x)dx=f(n + 1)-f(\xi)\leq0<br>$$<br>（当且仅当 $f(x)$ 为常函数时取等号，但 $f(x)$ 单调递减不是常函数 ），即 $$a_{n + 1}\leq a_{n}$$，所以数列 $${a_{n}}$$ 单调递减。</p><p><strong>第二步：对</strong> $$\displaystyle a_n$$ <strong>进行变形</strong></p><p>已知 $$\displaystyle a_{n}=\sum_{k = 1}^{n}f(k)-\int_{1}^{n}f(x)dx$$，将 $$\displaystyle \int_{1}^{n}f(x)dx$$ 进行拆分：$$\displaystyle \int_{1}^{n}f(x)dx=\sum_{k = 1}^{n - 1}\int_{k}^{k + 1}f(x)dx$$</p><p>则<br>$$<br>\displaystyle a_{n}=\sum_{k = 1}^{n}f(k)-\sum_{k = 1}^{n - 1}\int_{k}^{k + 1}f(x)dx=\sum_{k = 1}^{n - 1}\left(f(k)-\int_{k}^{k + 1}f(x)dx\right)+f(n)<br>$$<br>根据积分中值定理，对于 $$\displaystyle \int_{k}^{k + 1}f(x)dx$$，存在 $$\displaystyle \xi_{k}\in(k,k + 1)$$，使得 $$\displaystyle \int_{k}^{k + 1}f(x)dx=f(\xi_{k})$$</p><p>因为 $$f(x)$$ 在 $$[1,+\infty)$$ 单调递减，所以 $$\displaystyle f(k)&gt;f(\xi_{k})$$  $$(\displaystyle k&lt;\xi_{k}&lt;k + 1)$$，那么<br>$$<br>\displaystyle f(k)-\int_{k}^{k + 1}f(x)dx=f(k)-f(\xi_{k})&gt;0<br>$$<br>且 $$f(n)&gt;0$$，所以 $$a_{n}&gt;0$$，即数列 $${a_{n}}$$ 有下界 $$0$$</p><p><strong>第三步：根据单调有界准则得出结论</strong></p><p>根据单调有界准则：单调递减且有下界的数列必收敛。</p><p>由于数列 $${a_{n}}$$ 单调递减且有下界 $$0$$，故数列 $${a_{n}}$$ 收敛。</p><p><strong>通过此题的结论我们可以解决一系列有关数列收敛的问题</strong></p><p>如这道经典的有关欧拉常数的数列， $$a_{n}=1+\frac{1}{2}+\frac{1}{3}+\cdots+\frac{1}{n}-\ln n$$，显然是令本题中的 $$\displaystyle f(x)=\frac{1}{x}$$ 得到的</p><p><strong>下面我们继续用积分与求和转换的思想证明一类积分不等式问题</strong></p><h2 id="例题一">例题一</h2><p>设 $f(x)$ 在 $[0,1]$ 连续，对 $\forall x,y$ 均有 $\displaystyle \vert f(x) - f(y)\vert\leq M\cdot\vert x - y\vert$，证：$$\displaystyle \left|\int_{0}^{1}f(x)dx - \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})\right|\leq\frac{M}{2n}$$</p><p><strong>解：</strong> <strong>第一步：对式子进行变形</strong></p><p>首先将 $$\displaystyle \left|\int_{0}^{1}f(x)dx - \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})\right|$$ 进行处理，把 $$\displaystyle \int_{0}^{1}f(x)dx$$ 拆分为 $$\displaystyle \sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(x)dx$$，把 $$\displaystyle \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})$$ 写成 $$\displaystyle \sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(\frac{k}{n})dx$$</p><p>因为<br>$$<br>\displaystyle \int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(\frac{k}{n})dx=f(\frac{k}{n})\int_{\frac{k - 1}{n}}^{\frac{k}{n}}dx=\frac{1}{n}f(\frac{k}{n}))<br>$$<br>所以原式变成了<br>$$<br>\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(x)dx-\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}f(\frac{k}{n})dx\right|<br>$$<br>合并后为<br>$$<br>\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(f(x)-f(\frac{k}{n}))dx\right|<br>$$<br>这一步是通过积分区间的拆分和等价变形，将原式转化为便于后续处理的形式。</p><p><strong>第二步：利用绝对值不等式放缩</strong></p><p>根据绝对值不等式 $$\displaystyle \left|\int_{a}^{b}g(x)dx\right|\leq\int_{a}^{b}\vert g(x)\vert dx$$，对于 $$\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(f(x)-f(\frac{k}{n}))dx\right|$$，可得<br>$$<br>\displaystyle \left|\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(f(x)-f(\frac{k}{n}))dx\right|\leq\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}\vert f(x)-f(\frac{k}{n})\vert dx<br>$$<br><strong>第三步：代入已知条件进一步放缩</strong></p><p>已知对 $$\forall x,y$$ 均有 $$\displaystyle \vert f(x) - f(y)\vert\leq M\cdot\vert x - y\vert$$，在这里 $$\displaystyle y = \frac{k}{n}$$，所以 $$\displaystyle \vert f(x)-f(\frac{k}{n})\vert\leq M\cdot\vert x - \frac{k}{n}\vert$$ 。由于在区间 $$\displaystyle [\frac{k - 1}{n},\frac{k}{n}]$ 上，$\displaystyle x\leq \frac{k}{n}$$，则 $$\displaystyle \vert x - \frac{k}{n}\vert=\frac{k}{n}-x$$，那么<br>$$<br>\displaystyle \sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}\vert f(x)-f(\frac{k}{n})\vert dx\leq M\cdot\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx<br>$$<br><strong>第四步：计算积分并化简</strong></p><p>计算 $$\displaystyle \int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx$$，根据积分公式 $$\displaystyle \int(ax + b)dx=\frac{ax^{2}}{2}+bx + C$$ ，可得<br>$$<br>\displaystyle \int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx=-\frac{1}{2}(x - \frac{k}{n})^{2}\big|<em>{\frac{k - 1}{n}}^{\frac{k}{n}}<br>$$<br>代入上下限：<br>$$<br>\displaystyle -\frac{1}{2}(x - \frac{k}{n})^{2}\big|</em>{\frac{k - 1}{n}}^{\frac{k}{n}}=-\frac{1}{2}(0 - (\frac{k}{n}-\frac{k - 1}{n})^{2})=\frac{1}{2n^{2}}<br>$$<br>则<br>$$<br>\displaystyle M\cdot\sum_{k = 1}^{n}\int_{\frac{k - 1}{n}}^{\frac{k}{n}}(\frac{k}{n}-x)dx = M\cdot\sum_{k = 1}^{n}\frac{1}{2n^{2}}<br>$$<br>因为 $$\displaystyle \sum_{k = 1}^{n}1=n$$，所以 $$\displaystyle M\cdot\sum_{k = 1}^{n}\frac{1}{2n^{2}}=\frac{M}{2n}$$</p><p>综上，通过以上逐步推导，证明了 $$\displaystyle \left|\int_{0}^{1}f(x)dx - \frac{1}{n}\cdot\sum_{k = 1}^{n}f(\frac{k}{n})\right|\leq\frac{M}{2n}$$</p><h2 id="例题二">例题二</h2><p><strong>证明：</strong><br>$$<br>\displaystyle (\ln(\prod_{i = 1}^{n}i^{i}))\leq\int_{2}^{n}x\cdot\ln xdx\leq\frac{n^{2}}{2}\cdot\ln n - \frac{n^{2}}{4}+1<br>$$<br><strong>证：</strong> <strong>先证左边：</strong></p><p>根据对数运算法则 $$\displaystyle \ln(\prod_{i = 1}^{n}i^{i})=\sum_{i = 1}^{n - 1}i\ln i$$ ，即证明 $$\displaystyle \sum_{i = 2}^{n - 1}i\ln i\leq\int_{2}^{n}x\ln xdx$$</p><p>将 $$\displaystyle \int_{2}^{n}x\ln xdx$$ 进行拆分：<br>$$<br>\displaystyle \int_{2}^{n}x\ln xdx=\sum_{i = 2}^{n - 1}\int_{i}^{i + 1}x\ln xdx<br>$$<br>令 $$f(x)=x\ln x$$，当 $$\displaystyle x\in(0,\frac{1}{e})$$ 时，$$f^\prime(x)&lt;0$$，$$f(x)$$ 单调递减；当 $$\displaystyle x\in(\frac{1}{e},+\infty)$$ 时，$$f^\prime(x)&gt;0$$，$$f(x)$$ 单调递增</p><p>对于 $$\displaystyle i\leq x\leq i + 1$$（$$i\geq2$$），因为 $$f(x)$$ 单调递增，所以 $$\displaystyle x\ln x\geq i\ln i$$<br>那么<br>$$<br>\displaystyle \sum_{i = 2}^{n - 1}\int_{i}^{i + 1}i\ln i dx\leq\sum_{i = 2}^{n - 1}\int_{i}^{i + 1}x\ln xdx<br>$$<br>即<br>$$<br>\displaystyle \sum_{i = 2}^{n - 1}i\ln i\leq\int_{2}^{n}x\ln xdx<br>$$<br><strong>再证右边：</strong></p><p>利用分部积分法计算 $$\displaystyle \int_{2}^{n}x\ln xdx$$</p><p>根据分部积分公式 $$\displaystyle \int u dv = uv-\int v du$$，令 $$u = \ln x$$，$$dv = xdx$$，则 $$\displaystyle du=\frac{1}{x}dx$$，$$\displaystyle v=\frac{x^{2}}{2}$$</p><p>所以 $$\displaystyle \int_{2}^{n}x\ln xdx=\frac{x^{2}}{2}\ln x\big|<em>{2}^{n}-\int</em>{2}^{n}\frac{x}{2}dx$$</p><p>计算<br>$$<br>\begin{align*}<br>&amp;\frac{x^{2}}{2}\ln x\big|<em>{2}^{n}-\int</em>{2}^{n}\frac{x}{2}dx\<br>=&amp;\left(\frac{n^{2}}{2}\ln n - \frac{2^{2}}{2}\ln 2\right)-\int_{2}^{n}\frac{x}{2}dx\<br>=&amp;\left(\frac{n^{2}}{2}\ln n - \frac{2^{2}}{2}\ln 2\right)-\left[\frac{x^{2}}{4}\right]<em>{2}^{n}\<br>=&amp;\left(\frac{n^{2}}{2}\ln n - \frac{2^{2}}{2}\ln 2\right)-\left(\frac{n^{2}}{4}-\frac{2^{2}}{4}\right)\<br>=&amp;\frac{n^{2}}{2}\ln n - \frac{n^{2}}{4}+1 - 2\ln 2<br>\end{align*}<br>$$<br>因为 $$- 2\ln 2\leq0$$，所以<br>$$<br>\displaystyle \int</em>{2}^{n}x\ln xdx\leq\frac{n^{2}}{2}\ln n - \frac{n^{2}}{4}+1<br>$$<br>综上，不等式 $$\displaystyle \ln(\prod_{i = 1}^{n}i^{i})\leq\int_{2}^{n}x\ln xdx\leq\frac{n^{2}}{2}\ln n - \frac{n^{2}}{4}+1$$ 得证</p><h2 id="例题三">例题三</h2><p>设 $$f(x)$$ 在 $$[a,b]$$ 二阶连续可导，证明 $$\displaystyle \lim_{n \to \infty} \left(n^{2} \int_{a}^{b} f(x)dx - \frac{b - a}{n} \sum_{k = 1}^{n} f(a + \frac{2k - 1}{2n}(b - a))\right)=\frac{(b - a)^{3}}{24}[f^\prime(b)-f^\prime(a)]$$</p><p><strong>解：</strong> <strong>第一步：构造</strong> $$I_n$$ <strong>并变形</strong></p><p>定义<br>$$<br>\displaystyle I_{n}=\int_{a}^{b} f(x)dx - \frac{b - a}{n} \sum_{k = 1}^{n} f(a + \frac{2k - 1}{2n}(b - a))<br>$$<br>将积分区间 $$[a,b]$$ 进行 $$n$$ 等分，每个小区间为 $$\displaystyle [a+\frac{k - 1}{n}(b - a),a+\frac{k}{n}(b - a)]$$</p><p>则<br>$$<br>\displaystyle I_{n}=\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} f(x)dx - \sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} f(a + \frac{2k - 1}{2n}(b - a))dx<br>$$<br>进一步化为<br>$$<br>\displaystyle I_{n}=\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} [f(x)-f(a + \frac{2k - 1}{2n}(b - a))]dx<br>$$<br><strong>步骤二：利用泰勒公式</strong></p><p>根据泰勒公式<br>$$<br>\displaystyle f(x)=f(x_{0})+f^\prime(x_{0})(x - x_{0})+\frac{f^{\prime\prime}(\xi)}{2!}(x - x_{0})^{2}  \quad(\xi \ 介于\ x\ 与\ x_{0}\ 之间)<br>$$<br>在区间 $$\displaystyle [a+\frac{k - 1}{n}(b - a),a+\frac{k}{n}(b - a)]$$ 上，令 $$\displaystyle x_{0}=a + \frac{2k - 1}{2n}(b - a)$$</p><p>则<br>$$<br>\displaystyle f(x)-f(a + \frac{2k - 1}{2n}(b - a))=\frac{f^{\prime\prime}(\xi_{k})}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2} \quad(\xi_{k}\ 在该区间内)<br>$$<br>所以<br>$$<br>\displaystyle I_{n}=\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} \frac{f^{\prime\prime}(\xi_{k})}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx<br>$$<br><strong>步骤三：放缩与求极限</strong></p><p>设 $$\displaystyle f^{\prime\prime}(x)$$ 在 $$\displaystyle [a+\frac{k - 1}{n}(b - a),a+\frac{k}{n}(b - a)]$$ 上的最大值和最小值分别为 $$M_{k}$$，$$m_{k}$$</p><p>因为 $$\displaystyle m_{k}\leq f^{\prime\prime}(\xi_{k})\leq M_{k}$$ ，所以<br>$$<br>\displaystyle \sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} \frac{m_{k}}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx\leq I_{n}\leq\sum_{k = 1}^{n} \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} \frac{M_{k}}{2}[x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx<br>$$<br>计算<br>$$<br>\displaystyle \int_{a+\frac{k - 1}{n}(b - a)}^{a+\frac{k}{n}(b - a)} [x-(a + \frac{2k - 1}{2n}(b - a))]^{2}dx=\frac{1}{3}(\frac{b - a}{2n})^{3}<br>$$<br>则<br>$$<br>\displaystyle \sum_{k = 1}^{n} \frac{m_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}\leq I_{n}\leq\sum_{k = 1}^{n} \frac{M_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}<br>$$<br>两边同乘 $$n^{2}$$ 得到<br>$$<br>\displaystyle n^{2}\sum_{k = 1}^{n} \frac{m_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}\leq n^{2}I_{n}\leq n^{2}\sum_{k = 1}^{n} \frac{M_{k}}{2}\cdot\frac{1}{3}(\frac{b - a}{2n})^{3}<br>$$<br>当 $$\displaystyle n \to \infty$$ 时，利用定积分定义<br>$$<br>\displaystyle \lim_{n \to \infty} \sum_{k = 1}^{n} \frac{m_{k}}{n}\cdot\frac{b - a}{n}=\int_{a}^{b} f^{\prime\prime}(x)dx \ \displaystyle \lim_{n \to \infty} \sum_{k = 1}^{n} \frac{M_{k}}{n}\cdot\frac{b - a}{n}=\int_{a}^{b} f^{\prime\prime}(x)dx<br>$$<br>又因为 $$\displaystyle \int_{a}^{b} f^{\prime\prime}(x)dx=f^\prime(b)-f^\prime(a)$$ ，经过计算可得<br>$$<br>\displaystyle \lim_{n \to \infty} (n^{2}I_{n})=\frac{(b - a)^{3}}{24}[f^\prime(b)-f^\prime(a)]<br>$$<br>即<br>$$<br>\lim_{n \to \infty} \left(n^{2} \int_{a}^{b} f(x)dx - \frac{b - a}{n} \sum_{k = 1}^{n} f(a + \frac{2k - 1}{2n}(b - a))\right)=\frac{(b - a)^{3}}{24}[f^\prime(b)-f^\prime(a)]<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分数阶导数与积分的数学表达与应用</title>
      <link href="/2025/05/13/%E5%88%86%E6%95%B0%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E7%A7%AF%E5%88%86%E7%9A%84%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2025/05/13/%E5%88%86%E6%95%B0%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E7%A7%AF%E5%88%86%E7%9A%84%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>一、基本定义与性质</h1><h2 id="1-Riemann-Liouville分数阶积分">1. Riemann-Liouville分数阶积分</h2><p><strong>定义式</strong>：<br>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t-\alpha)^{\alpha-1} f(\tau) d\tau \quad (\alpha&gt;0)<br>$$</p><p><strong>性质</strong>：</p><ul><li>半群性：$\displaystyle I^\alpha I^\beta = I^{\alpha+\beta}$</li><li>当$\alpha\to n^+$时收敛于n重积分</li><li>对常数$C$的积分：$\displaystyle I^\alpha C = \frac{C(t-a)^\alpha}{\Gamma(\alpha+1)}$</li></ul><h2 id="2-Caputo分数阶导数">2. Caputo分数阶导数</h2><p><strong>定义式</strong>：<br>$$<br>^C D^\alpha f(t) = \frac{1}{\Gamma(m-\alpha)} \int_a^t \frac{f^{(m)}(\tau)}{(t-\tau)^{\alpha+1-m}} d\tau<br>$$<br>其中$m-1 &lt; \alpha \leq m$, $m\in\mathbb{N}$</p><p><strong>优势</strong>：</p><ul><li>常数导数为零：$^C D^\alpha C = 0$</li><li>允许传统初始条件：$\displaystyle f(a), f’(a),…,f^{(m-1)}(a)$</li></ul><h2 id="3-Grunwald-Letnikov定义">3. Grünwald-Letnikov定义</h2><p><strong>离散形式</strong>：<br>$$<br>D^\alpha f(t) = \lim_{h\to 0} h^{-\alpha} \sum_{k=0}^{[(t-a)/h]} (-1)^k \binom{\alpha}{k} f(t-kh)<br>$$</p><p><strong>权重系数递推</strong>：<br>$$<br>w_0^{(\alpha)} = 1, \quad w_k^{(\alpha)} = \left(1-\frac{\alpha+1}{k}\right)w_{k-1}^{(\alpha)}<br>$$</p><p><strong>本文我们主要关注Riemann-Liouville 分数阶积分与分数阶导数的性质</strong></p><h1>二、Riemann-Liouville 分数阶积分与分数阶导数的关系推导</h1><h2 id="1-Riemann-Liouville-分数阶积分的定义">1. Riemann-Liouville 分数阶积分的定义</h2><p>设函数 $f(t)$ 在区间 $[a, t]$ 上定义，阶数 $\alpha &gt; 0 $，则 <strong>Riemann-Liouville 左侧分数阶积分</strong> 定义为：<br>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t - \tau)^{\alpha - 1} f(\tau) , d\tau,<br>$$</p><p>其中 $\Gamma(\alpha)$ 是 Gamma 函数。</p><hr><h2 id="2-Riemann-Liouville-分数阶导数的定义">2. Riemann-Liouville 分数阶导数的定义</h2><p>设 $n = \lceil \alpha \rceil$ 是不小于 $ \alpha $ 的最小整数，则 <strong>Riemann-Liouville 分数阶导数</strong> 定义为：</p><p>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n} \left( I^{n - \alpha} f(t) \right) = \frac{1}{\Gamma(n - \alpha)} \frac{d^n}{dt^n} \int_a^t (t - \tau)^{n - \alpha - 1} f(\tau) , d\tau.<br>$$</p><blockquote><p>即：<strong>分数阶导数是对分数阶积分的整数阶导数。</strong></p></blockquote><hr><h2 id="3-从积分推导到导数">3. 从积分推导到导数</h2><p>设有：</p><p>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t - \tau)^{\alpha - 1} f(\tau) , d\tau,<br>$$</p><p>我们希望找到某种操作 $D^\alpha$ 使得：</p><p>$$<br>D^\alpha \left( I^\alpha f(t) \right) = f(t).<br>$$</p><p>使用分数阶导数的定义，我们有：</p><p>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n} \left( I_a^{n - \alpha} f(t) \right),<br>$$</p><p>那么对于 $f(t) = I^\alpha g(t)$，有：</p><p>$$<br>D^\alpha f(t) = D^\alpha \left( I^\alpha g(t) \right) = g(t),<br>$$</p><p>因为：</p><p>$$<br>D^\alpha \left( I^\alpha \right) = \text{Identity operator}.<br>$$</p><hr><h2 id="4-总结关系">4. 总结关系</h2><ul><li><p>分数阶积分是分数阶导数的逆操作：<br>$$<br>D^\alpha \left( I^\alpha f(t) \right) = f(t).<br>$$</p></li><li><p>分数阶导数可以表示为先做积分，再做整数阶导数：<br>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n} \left( I^{n - \alpha} f(t) \right),<br>$$<br>其中 $n = \lceil \alpha \rceil$。</p></li></ul><hr><h2 id="5-特殊情况举例-0-alpha-1">5. 特殊情况举例  $( 0 &lt; \alpha &lt; 1 )$</h2><p>当 $0 &lt; \alpha &lt; 1$ 时，有：</p><ul><li><p>分数阶积分：<br>$$<br>I^\alpha f(t) = \frac{1}{\Gamma(\alpha)} \int_a^t (t - \tau)^{\alpha - 1} f(\tau) , d\tau.<br>$$</p></li><li><p>分数阶导数：<br>$$<br>D^\alpha f(t) = \frac{d}{dt} \left( \frac{1}{\Gamma(1 - \alpha)} \int_a^t (t - \tau)^{-\alpha} f(\tau) , d\tau \right).<br>$$</p></li></ul><hr><h2 id="6-结论">6. 结论</h2><p>Riemann-Liouville 分数阶导数与积分之间的本质关系是：</p><p>$$<br>D^\alpha = \frac{d^n}{dt^n} \circ I^{n - \alpha},<br>$$</p><p>也即：</p><ul><li><strong>分数阶导数 = 整数阶导数 ∘ 分数阶积分</strong>；</li><li><strong>分数阶积分 = 分数阶导数的逆操作。</strong></li></ul><h1>三、重要数学特性</h1><h2 id="1-非局部性证明">1. 非局部性证明</h2><p>对于任意$t&gt;a$：<br>$$<br>D^\alpha f(t) = \frac{d^n}{dt^n}\left[\frac{1}{\Gamma(n-\alpha)} \int_a^t \frac{f(\tau)}{(t-\tau)^{\alpha+1-n}} d\tau\right]<br>$$<br>其中$n=\lceil\alpha\rceil$</p><h2 id="2-Leibniz法则推广">2. Leibniz法则推广</h2><p>$$<br>D^\alpha(fg) = \sum_{k=0}^\infty \binom{\alpha}{k} (D^{\alpha-k}f) D^k g<br>$$</p><h2 id="3-Laplace变换关系">3. Laplace变换关系</h2><p>$$<br>\mathcal{L}{^C D^\alpha f(t)} = s^\alpha F(s) - \sum_{k=0}^{m-1} s^{\alpha-k-1} f^{(k)}(0^+)<br>$$</p><h1>四、数值实现方法</h1><h2 id="1-分数阶微积分的离散化方案">1. 分数阶微积分的离散化方案</h2><p><strong>Grunwald-Letnikov改进格式</strong>：<br>$$<br>D^\alpha f(t_n) \approx \frac{1}{h^\alpha} \sum_{k=0}^{n} w_k^{(\alpha)} f(t_{n-k}) + \mathcal{O}(h^p)<br>$$<br>其中$p$为精度阶数，权重系数满足：<br>$$<br>w_0^{(\alpha)} = 1, \quad w_k^{(\alpha)} = \left(1-\frac{\alpha+1}{k}\right)w_{k-1}^{(\alpha)}<br>$$</p><h2 id="2-短记忆原理实现">2. 短记忆原理实现</h2><p><strong>MATLAB代码示例</strong>：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[dy]</span> = <span class="title">fgl_deriv</span><span class="params">(a, y, h, L)</span></span></span><br><span class="line">    <span class="comment">% 参数说明：</span></span><br><span class="line">    <span class="comment">% a: 分数阶次 (0 &lt; a &lt; 1)</span></span><br><span class="line">    <span class="comment">% y: 输入信号序列</span></span><br><span class="line">    <span class="comment">% h: 采样步长</span></span><br><span class="line">    <span class="comment">% L: 记忆窗口长度</span></span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">length</span>(y);</span><br><span class="line">    dy = <span class="built_in">zeros</span>(<span class="built_in">size</span>(y));</span><br><span class="line">    weights = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">    weights(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">        weights(k+<span class="number">1</span>) = (<span class="number">1</span> - (a+<span class="number">1</span>)/k)*weights(k);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    M = <span class="built_in">min</span>(<span class="built_in">floor</span>(L/h), n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = M+<span class="number">1</span>:n</span><br><span class="line">        dy(<span class="built_in">i</span>) = sum(weights(<span class="number">1</span>:M+<span class="number">1</span>).*y(<span class="built_in">i</span>:<span class="number">-1</span>:<span class="built_in">i</span>-M)&#x27;)/h^a;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="3-分数阶微分方程求解器">3. 分数阶微分方程求解器</h2><h4 id="3-1-Predictor-Corrector算法完整推导">3.1 Predictor-Corrector算法完整推导</h4><p>对于分数阶初值问题：<br>$$<br>\begin{cases}<br>^C D^\alpha_t y(t) = f(t,y(t)), \quad 0 &lt; \alpha &lt; 1 \<br>y(0) = y_0<br>\end{cases}<br>$$</p><p><strong>离散化步骤</strong>：</p><ol><li><p><strong>分数阶积分近似</strong>：<br>$$<br>y(t_{n+1}) = y_0 + \frac{1}{\Gamma(\alpha)} \int_0^{t_{n+1}} (t_{n+1}-\tau)^{\alpha-1} f(\tau,y(\tau)) d\tau<br>$$</p></li><li><p><strong>预测项计算</strong>：<br>$$<br>y^{P}<em>{n+1} = y_0 + \frac{h^\alpha}{\Gamma(\alpha+1)} \sum</em>{j=0}^n b_{j,n+1} f(t_j,y_j)<br>$$<br>其中权重系数：<br>$$<br>b_{j,n+1} = (n+1-j)^\alpha - (n-j)^\alpha<br>$$</p></li><li><p><strong>校正项计算</strong>：<br>$$<br>y_{n+1} = y_0 + \frac{h^\alpha}{\Gamma(\alpha+2)} \left[ f(t_{n+1},y^{P}<em>{n+1}) + \sum</em>{j=0}^n a_{j,n+1} f(t_j,y_j) \right]<br>$$<br>校正权重：<br>$$<br>a_{j,n+1} =<br>\begin{cases}<br>n^{\alpha+1} - (n-\alpha)(n+1)^\alpha, &amp; j=0 \<br>(n-j+2)^{\alpha+1} + (n-j)^{\alpha+1} - 2(n-j+1)^{\alpha+1}, &amp; 1 \leq j \leq n \<br>1, &amp; j=n+1<br>\end{cases}<br>$$</p></li></ol><h3 id="3-2-Python实现代码">3.2 Python实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> gamma</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frac_pc_solver</span>(<span class="params">f, alpha, y0, t_span, h</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Predictor-Corrector方法求解分数阶微分方程</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        f: 右端函数 f(t,y)</span></span><br><span class="line"><span class="string">        alpha: 分数阶次 (0 &lt; alpha &lt; 1)</span></span><br><span class="line"><span class="string">        y0: 初始条件</span></span><br><span class="line"><span class="string">        t_span: 时间区间 [t0, tf]</span></span><br><span class="line"><span class="string">        h: 步长</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">        t: 时间节点数组</span></span><br><span class="line"><span class="string">        y: 解向量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t0, tf = t_span</span><br><span class="line">    t = np.arange(t0, tf + h, h)</span><br><span class="line">    n = <span class="built_in">len</span>(t) - <span class="number">1</span></span><br><span class="line">    y = np.zeros(n + <span class="number">1</span>)</span><br><span class="line">    y[<span class="number">0</span>] = y0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预计算权重</span></span><br><span class="line">    b_weights = [(k+<span class="number">1</span>)**alpha - k**alpha <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">    a_weights = np.zeros((n+<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">            a_weights[:,j] = np.arange(n+<span class="number">1</span>)**(alpha+<span class="number">1</span>) - \</span><br><span class="line">                            (np.arange(n+<span class="number">1</span>)-alpha)*(np.arange(n+<span class="number">1</span>)+<span class="number">1</span>)**alpha</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a_weights[j:,j] = (np.arange(n+<span class="number">1</span>-j)+<span class="number">2</span>)**(alpha+<span class="number">1</span>) + \</span><br><span class="line">                             (np.arange(n+<span class="number">1</span>-j))**(alpha+<span class="number">1</span>) - \</span><br><span class="line">                             <span class="number">2</span>*(np.arange(n+<span class="number">1</span>-j)+<span class="number">1</span>)**(alpha+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n_step <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># Predictor</span></span><br><span class="line">        y_p = y0 + (h**alpha/gamma(alpha+<span class="number">1</span>)) * \</span><br><span class="line">              <span class="built_in">sum</span>(b_weights[n_step - k] * f(t[k], y[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n_step+<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Corrector</span></span><br><span class="line">        sum_c = <span class="built_in">sum</span>(a_weights[n_step+<span class="number">1</span>, k] * f(t[k], y[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n_step+<span class="number">1</span>))</span><br><span class="line">        y[n_step+<span class="number">1</span>] = y0 + (h**alpha/gamma(alpha+<span class="number">2</span>)) * \</span><br><span class="line">                      (f(t[n_step+<span class="number">1</span>], y_p) + sum_c)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t, y</span><br></pre></td></tr></table></figure><h3 id="3-3-收敛性分析">3.3 收敛性分析</h3><h4 id="理论误差界">理论误差界</h4><p>对于分数阶微分方程：</p><p>$$<br>{}^C D^\alpha y(t) = f(t, y(t)), \quad y(0) = y_0<br>$$</p><p>Predictor-Corrector 方法的全局误差为：</p><p>$$<br>\max_{0 \leq t_n \leq T} |y(t_n) - y_n| \leq C \cdot h^{\min{2,1+\alpha}}<br>$$</p><p>其中：</p><ul><li>$C$ 依赖于 $\alpha$、$f$ 的 Lipschitz 常数和终态时间 $T$。</li><li>当 $\alpha \to 1^-$，收敛阶趋近于 2（与经典 ODE 一致）。</li></ul><hr><h4 id="数值验证实验">数值验证实验</h4><h5 id="测试方程：">测试方程：</h5><p>$$<br>{}^C D^{0.6} y(t) = \frac{\Gamma(4)}{\Gamma(3.4)} t^{2.4} - y(t), \quad y(0) = 0<br>$$</p><h5 id="解析解：">解析解：</h5><p>$$<br>y(t) = t^3 - \frac{\Gamma(4)}{\Gamma(3.4)} \int_0^t (t - \tau)^{2.4} \tau^3 , d\tau<br>$$<br><strong>python误差计算代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> gamma</span><br><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> quad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exact_solution</span>(<span class="params">t, alpha=<span class="number">0.6</span></span>):</span><br><span class="line">    <span class="comment"># 解析解计算（需数值积分）</span></span><br><span class="line">    integral = quad(<span class="keyword">lambda</span> tau: (t - tau)**(alpha - <span class="number">1</span>) * tau**<span class="number">3</span>, <span class="number">0</span>, t)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> t**<span class="number">3</span> - gamma(<span class="number">4</span>)/gamma(<span class="number">3.4</span>) * integral / gamma(alpha)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_errors</span>(<span class="params">alpha=<span class="number">0.6</span>, T=<span class="number">1</span>, steps=[<span class="number">0.1</span>, <span class="number">0.05</span>, <span class="number">0.025</span>, <span class="number">0.0125</span>]</span>):</span><br><span class="line">    errors = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> steps:</span><br><span class="line">        t, y = frac_pc_solver(<span class="keyword">lambda</span> t, y: gamma(<span class="number">4</span>)/gamma(<span class="number">3.4</span>) * t**<span class="number">2.4</span> - y,</span><br><span class="line">                             alpha, <span class="number">0</span>, [<span class="number">0</span>, T], h)</span><br><span class="line">        y_exact = np.array([exact_solution(ti) <span class="keyword">for</span> ti <span class="keyword">in</span> t])</span><br><span class="line">        errors[h] = np.<span class="built_in">max</span>(np.<span class="built_in">abs</span>(y - y_exact))</span><br><span class="line">    <span class="keyword">return</span> errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出误差表</span></span><br><span class="line">errors = compute_errors()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;| 步长 h | 最大误差 E_inf | 收敛阶 p |&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|--------|----------------|----------|&quot;</span>)</span><br><span class="line">h_list = <span class="built_in">sorted</span>(errors.keys())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h_list)):</span><br><span class="line">    h = h_list[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        p = <span class="string">&quot;--&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = np.log(errors[h_list[i-<span class="number">1</span>]] / errors[h]) / np.log(h_list[i-<span class="number">1</span>] / h)</span><br><span class="line">        p = <span class="string">f&quot;<span class="subst">&#123;p:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;| <span class="subst">&#123;h:<span class="number">.4</span>f&#125;</span> | <span class="subst">&#123;errors[h]:<span class="number">.4</span>e&#125;</span> | <span class="subst">&#123;p&#125;</span> |&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="高阶方法扩展（Adams-型）">高阶方法扩展（Adams 型）</h4><p>对于更高精度需求，可采用 <strong>分数阶 Adams-Bashforth-Moulton (ABM)</strong> 方法：</p><p><strong>Predictor:</strong></p><p>$$<br>y_{n+1}^P = y_0 + \frac{h^\alpha}{\Gamma(\alpha)} \sum_{j=0}^{n} b_{j,n+1} f(t_j, y_j)<br>$$</p><p><strong>Corrector:</strong></p><p>$$<br>y_{n+1} = y_0 + \frac{h^\alpha}{\Gamma(\alpha + 2)} \left[ f(t_{n+1}, y_{n+1}^P) + \sum_{j=0}^{n} a_{j,n+1} f(t_j, y_j) \right]<br>$$</p><p>其中权重系数：</p><p>$$<br>b_{j,n+1} = \frac{(n+1 - j)^\alpha - (n - j)^\alpha}{\alpha}<br>$$</p><p>$$<br>a_{j,n+1} = \frac{(n - j + 2)^{\alpha + 1} - 2(n - j + 1)^{\alpha + 1} + (n - j)^{\alpha + 1}}{\alpha + 1}<br>$$<br><strong>python实现代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">frac_abm_solver</span>(<span class="params">f, alpha, y0, t_span, h, corrector_steps=<span class="number">2</span></span>):</span><br><span class="line">    t = np.arange(t_span[<span class="number">0</span>], t_span[<span class="number">1</span>] + h, h)</span><br><span class="line">    n = <span class="built_in">len</span>(t) - <span class="number">1</span></span><br><span class="line">    y = np.zeros(n + <span class="number">1</span>)</span><br><span class="line">    y[<span class="number">0</span>] = y0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算权重</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b_weight</span>(<span class="params">k, alpha</span>):</span><br><span class="line">        <span class="keyword">return</span> ((k+<span class="number">1</span>)**alpha - k**alpha) / alpha</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a_weight</span>(<span class="params">k, alpha</span>):</span><br><span class="line">        <span class="keyword">return</span> ((k+<span class="number">2</span>)**(alpha+<span class="number">1</span>) - <span class="number">2</span>*(k+<span class="number">1</span>)**(alpha+<span class="number">1</span>) + k**(alpha+<span class="number">1</span>)) / (alpha+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># Predictor</span></span><br><span class="line">        y_p = y0 + (h**alpha / gamma(alpha)) * <span class="built_in">sum</span>(</span><br><span class="line">            b_weight(i - j, alpha) * f(t[j], y[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 多步校正</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(corrector_steps):</span><br><span class="line">            sum_c = <span class="built_in">sum</span>(a_weight(i - j, alpha) * f(t[j], y[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>))</span><br><span class="line">            y[i+<span class="number">1</span>] = y0 + (h**alpha / gamma(alpha+<span class="number">2</span>)) * (</span><br><span class="line">                f(t[i+<span class="number">1</span>], y_p) + sum_c)</span><br><span class="line">            y_p = y[i+<span class="number">1</span>]  <span class="comment"># 迭代校正</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t, y</span><br></pre></td></tr></table></figure><h3 id="3-4-改进算法变体">3.4 改进算法变体</h3><h4 id="自适应步长控制">自适应步长控制</h4><p>通过局部误差估计：</p><p>$$<br>\epsilon_{n+1} \approx \frac{\Gamma(\alpha + 2)}{h^\alpha} \left| y_{n+1} - y_{n+1}^P \right|<br>$$</p><p>步长调整策略：</p><p>$$<br>h_{\text{new}} = 0.9 h_{\text{old}} \left( \frac{\tau}{\epsilon_{n+1}} \right)^{\frac{1}{1 + \alpha}}<br>$$</p><hr><h4 id="高阶修正格式">高阶修正格式</h4><p>采用加权 Grünwald 近似：</p><p>$$<br>D^\alpha y(t_n) \approx \frac{1}{h^\alpha} \sum_{k=0}^n w_k^{(\alpha)} y_{n-k} + \frac{1}{h^\alpha} \sum_{k=1}^p c_k \Delta^k y_n<br>$$</p><p>其中 $c_k$ 为修正系数，$\Delta^k$ 为阶差分算子。</p><p><strong>差分算子 $\Delta^k$</strong><br>$$<br>\Delta^k y_n = \sum_{i = 0}^{k} (-1)^i \binom{k}{i} y_{n - i}<br>$$</p><p><strong>修正系数 $c_k$</strong><br>$$<br>c_k = \frac{(-1)^k}{k!} \prod_{j = 1}^{k} (\alpha - j + 1)<br>$$</p><p><strong>MATLAB高阶实现</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[t, y]</span> = <span class="title">high_order_frac_solver</span><span class="params">(f, alpha, y0, t_span, h, p)</span></span></span><br><span class="line">    t = t_span(<span class="number">1</span>):h:t_span(<span class="number">2</span>);</span><br><span class="line">    n = <span class="built_in">length</span>(t);</span><br><span class="line">    y = <span class="built_in">zeros</span>(<span class="number">1</span>, n);</span><br><span class="line">    y(<span class="number">1</span>) = y0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算 Grünwald 权重</span></span><br><span class="line">    w = <span class="built_in">zeros</span>(<span class="number">1</span>, n);</span><br><span class="line">    w(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">        w(k+<span class="number">1</span>) = (<span class="number">1</span> - (alpha + <span class="number">1</span>)/k) * w(k);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算差分修正系数</span></span><br><span class="line">    c = <span class="built_in">zeros</span>(<span class="number">1</span>, p);</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:p</span><br><span class="line">        c(k) = (<span class="number">-1</span>)^k / <span class="built_in">factorial</span>(k) * prod(alpha - (<span class="number">0</span>:k<span class="number">-1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>:n</span><br><span class="line">        <span class="comment">% 基础 Grünwald 近似</span></span><br><span class="line">        D_alpha = sum(w(<span class="number">1</span>:<span class="built_in">i</span>) .* y(<span class="built_in">i</span>:<span class="number">-1</span>:<span class="number">1</span>)) / h^alpha;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 高阶修正项</span></span><br><span class="line">        correction = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:p</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">i</span> &gt; k</span><br><span class="line">                delta_k = sum((<span class="number">-1</span>).^(<span class="number">0</span>:k) .* <span class="built_in">nchoosek</span>(k, <span class="number">0</span>:k) .* y(<span class="built_in">i</span>:<span class="number">-1</span>:<span class="built_in">i</span>-k));</span><br><span class="line">                correction = correction + c(k) * delta_k / h^alpha;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 更新解</span></span><br><span class="line">        y(<span class="built_in">i</span>) = y(<span class="built_in">i</span><span class="number">-1</span>) + h * f(t(<span class="built_in">i</span><span class="number">-1</span>), D_alpha + correction);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-5-刚性系统处理">3.5 刚性系统处理</h3><h4 id="隐式格式的牛顿迭代法">隐式格式的牛顿迭代法</h4><ol><li><strong>隐式方程</strong><br>$$<br>y_{n + 1} = y_0 + \frac{h^{\alpha}}{\Gamma(\alpha + 2)} \left[ f(t_{n + 1}, y_{n + 1}) + \sum_{j = 0}^{n} a_{j, n + 1} f(t_j, y_j) \right]<br>$$</li><li><strong>牛顿迭代步骤</strong><br>$$<br>y_{n + 1}^{(k + 1)} = y_{n + 1}^{(k)} - \left[ I - \frac{h^{\alpha}}{\Gamma(\alpha + 2)} J_f(t_{n + 1}, y_{n + 1}^{(k)}) \right]^{-1} \cdot \text{Residual}<br>$$<br>其中 $J_f$ 为 Jacobi 矩阵。</li></ol><p><strong>python刚性系统求解</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">implicit_frac_solver</span>(<span class="params">f, jacobian, alpha, y0, t_span, h, max_iter=<span class="number">10</span>, tol=<span class="number">1e-8</span></span>):</span><br><span class="line">    t = np.arange(t_span[<span class="number">0</span>], t_span[<span class="number">1</span>] + h, h)</span><br><span class="line">    n = <span class="built_in">len</span>(t)</span><br><span class="line">    y = np.zeros((n, <span class="built_in">len</span>(y0)))</span><br><span class="line">    y[<span class="number">0</span>] = y0</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 显式预测</span></span><br><span class="line">        y_pred = y[<span class="number">0</span>] + (h**alpha / gamma(alpha + <span class="number">1</span>)) * <span class="built_in">sum</span>(</span><br><span class="line">            ((i - j + <span class="number">1</span>)**alpha - (i - j)**alpha) * f(t[j], y[j]) </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐式校正（牛顿迭代）</span></span><br><span class="line">        y_current = y_pred.copy()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_iter):</span><br><span class="line">            residual = y_current - y[<span class="number">0</span>] - (h**alpha / gamma(alpha + <span class="number">2</span>)) * (</span><br><span class="line">                f(t[i], y_current) + </span><br><span class="line">                <span class="built_in">sum</span>(a_weight(i - j - <span class="number">1</span>, alpha) * f(t[j], y[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i)))</span><br><span class="line">            </span><br><span class="line">            J = np.eye(<span class="built_in">len</span>(y0)) - (h**alpha / gamma(alpha + <span class="number">2</span>)) * jacobian(t[i], y_current)</span><br><span class="line">            delta = np.linalg.solve(J, -residual)</span><br><span class="line">            y_current += delta</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> np.linalg.norm(delta) &lt; tol:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        y[i] = y_current</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 辅助函数：计算隐式权重</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_weight</span>(<span class="params">k, alpha</span>):</span><br><span class="line">    <span class="keyword">return</span> ((k + <span class="number">2</span>)**(alpha + <span class="number">1</span>) - <span class="number">2</span> * (k + <span class="number">1</span>)**(alpha + <span class="number">1</span>) + k**(alpha + <span class="number">1</span>)) / (alpha + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="理论分析">理论分析</h4><h5 id="1-稳定性">1. 稳定性</h5><ul><li>隐式格式对刚性系统的稳定性优于显式格式，稳定区域覆盖整个负半平面。</li></ul><h5 id="2-计算复杂度">2. 计算复杂度</h5><table><thead><tr><th>方法</th><th>每步计算量</th><th>适用场景</th></tr></thead><tbody><tr><td>自适应步长</td><td>$O(n)$</td><td>非光滑解</td></tr><tr><td>高阶修正</td><td>$O(n + p^2)$</td><td>高精度需求</td></tr><tr><td>隐式迭代</td><td>$O(n \cdot d^3)$</td><td>刚性系统 ($d$ 为维数)</td></tr></tbody></table><h5 id="3-收敛性">3. 收敛性</h5><p>$$<br>| y(t_n) - y_n | \leq C \cdot \left( h^{\min{2, 1 + \alpha}} + \tau \right)<br>$$<br>其中 $\tau$ 为牛顿迭代容差。</p><h1>五、典型应用案例</h1><h2 id="1-异常扩散建模">1. 异常扩散建模</h2><p><strong>时间分数阶扩散方程</strong>：<br>$$<br>\frac{\partial^\gamma u}{\partial t^\gamma} = K_\gamma \frac{\partial^2 u}{\partial x^2}, \quad 0&lt;\gamma&lt;1<br>$$</p><p><strong>解析解</strong>：<br>$$<br>u(x,t) = \frac{1}{2\sqrt{K_\gamma t^\gamma}} M_{1-\gamma/2}\left(\frac{|x|}{\sqrt{K_\gamma t^\gamma}}\right)<br>$$<br>其中$M_\beta(z)$是Wright函数。</p><h2 id="2-粘弹性材料本构关系">2. 粘弹性材料本构关系</h2><p><strong>分数阶Kelvin-Voigt模型</strong>：<br>$$<br>\sigma(t) = E_\infty \epsilon(t) + E_\alpha D^\alpha \epsilon(t)<br>$$</p><h2 id="3-锂电池状态估计">3. 锂电池状态估计</h2><p><strong>分数阶等效电路模型</strong>：<br>$$<br>D^\alpha U_{oc}(t) = \frac{I(t)}{C} + R D^\beta I(t)<br>$$</p><p><strong>参数辨识算法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fode_identify</span>(<span class="params">data, alpha_range, beta_range</span>):</span><br><span class="line">    <span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">params</span>):</span><br><span class="line">        alpha, beta, C, R = params</span><br><span class="line">        <span class="comment"># 实现分数阶数值求解</span></span><br><span class="line">        <span class="keyword">return</span> error</span><br><span class="line">    res = minimize(cost, x0=[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>], </span><br><span class="line">                  bounds=[alpha_range, beta_range, (<span class="number">0</span>,<span class="literal">None</span>), (<span class="number">0</span>,<span class="literal">None</span>)])</span><br><span class="line">    <span class="keyword">return</span> res.x</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伽马函数与贝塔函数</title>
      <link href="/2025/05/11/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E4%B8%8E%E8%B4%9D%E5%A1%94%E5%87%BD%E6%95%B0/"/>
      <url>/2025/05/11/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E4%B8%8E%E8%B4%9D%E5%A1%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1>伽马函数</h1><h2 id="定义">定义</h2><p>伽马函数（Gamma Function）是阶乘函数在实数与复数域上的扩展。对于正实数 $$ x $$（$$ x &gt; 0 $$），伽马函数的定义如下：</p><p>$$<br>\Gamma(x) = \int_{0}^{\infty} t^{x-1} e^{-t} , dt<br>$$</p><p>对于正整数 $$ n $$，伽马函数满足：<br>$$<br>\Gamma(n) = (n-1)!<br>$$</p><h2 id="性质">性质</h2><ol><li><p><strong>递推关系</strong>：$$\displaystyle \Gamma(x+1) = x \Gamma(x) $$</p></li><li><p><strong>特殊值</strong>：</p><ul><li>$$ \Gamma(1) = 1 $$</li><li>$$ \Gamma\left(\frac{1}{2}\right) = \sqrt{\pi} $$</li></ul></li><li><p><strong>欧拉反射公式</strong>：<br>$$<br>\Gamma(x) \Gamma(1-x) = \frac{\pi}{\sin(\pi x)}<br>$$</p></li></ol><hr><h2 id="例题">例题</h2><h3 id="例题1：计算-displaystyle-Gamma-left-frac-5-2-right">例题1：计算  $$\displaystyle  \Gamma\left(\frac{5}{2}\right) $$</h3><p><strong>解</strong>：<br>利用递推关系：<br>$$<br>\Gamma\left(\frac{5}{2}\right) = \frac{3}{2} \Gamma\left(\frac{3}{2}\right) = \frac{3}{2} \cdot \frac{1}{2} \Gamma\left(\frac{1}{2}\right)<br>$$<br>已知 $$\displaystyle  \Gamma\left(\frac{1}{2}\right) = \sqrt{\pi} $$，因此：<br>$$<br>\Gamma\left(\frac{5}{2}\right) = \frac{3}{4} \sqrt{\pi}<br>$$</p><hr><h3 id="例题2：验证-displaystyle-int-0-infty-x-2-e-x-dx-Gamma-3">例题2：验证  $$\displaystyle  \int_{0}^{\infty} x^{2} e^{-x} , dx = \Gamma(3) $$</h3><p><strong>解</strong>：<br>根据伽马函数定义：<br>$$<br>\int_{0}^{\infty} x^{2} e^{-x} , dx = \Gamma(3)<br>$$<br>计算得：<br>$$<br>\Gamma(3) = 2! = 2<br>$$<br>因此积分值为 $$ 2 $$</p><hr><h2 id="伽马函数的推广形式">伽马函数的推广形式</h2><h2 id="指数部分为-a-x-的广义积分">指数部分为 $$-a x$$ 的广义积分</h2><p>当积分中的指数函数形式为 $$\displaystyle e^{-a x}$$（$$a &gt; 0$$）时，伽马函数的定义可推广为：</p><p>$$<br>\int_{0}^{\infty} x^{k-1} e^{-a x} , dx = \frac{\Gamma(k)}{a^k}, \quad k &gt; 0, , a &gt; 0<br>$$</p><h3 id="推导过程">推导过程</h3><p>通过变量替换 $$\displaystyle  t = a x $$（即 $$\displaystyle  x = \frac{t}{a} $$，$$\displaystyle  dx = \frac{dt}{a} $$），原积分变为：<br>$$<br>\int_{0}^{\infty} \left(\frac{t}{a}\right)^{k-1} e^{-t} \cdot \frac{dt}{a} = \frac{1}{a^k} \int_{0}^{\infty} t^{k-1} e^{-t} , dt = \frac{\Gamma(k)}{a^k}<br>$$</p><hr><h2 id="例题-2">例题</h2><h3 id="例题3：计算-displaystyle-int-0-infty-x-3-e-2x-dx">例题3：计算  $$\displaystyle  \int_{0}^{\infty} x^{3} e^{-2x} , dx $$</h3><p><strong>解</strong>：<br>对应形式为 $$ k = 4 $$，$$ a = 2 $$：<br>$$<br>\int_{0}^{\infty} x^{3} e^{-2x} , dx = \frac{\Gamma(4)}{2^4} = \frac{3!}{16} = \frac{6}{16} = \frac{3}{8}<br>$$</p><hr><h3 id="例题4：计算-displaystyle-int-0-infty-sqrt-x-e-3x-dx">例题4：计算  $$\displaystyle  \int_{0}^{\infty} \sqrt{x} e^{-3x} , dx $$</h3><p><strong>解</strong>：<br>对应形式为 $$ k = \frac{3}{2} $$，$$ a = 3 $$：<br>$$<br>\int_{0}^{\infty} x^{\frac{1}{2}} e^{-3x} , dx = \frac{\Gamma\left(\frac{3}{2}\right)}{3^{\frac{3}{2}}} = \frac{\frac{1}{2} \Gamma\left(\frac{1}{2}\right)}{3 \sqrt{3}} = \frac{\frac{1}{2} \sqrt{\pi}}{3 \sqrt{3}} = \frac{\sqrt{\pi}}{6 \sqrt{3}}<br>$$</p><hr><h3 id="例题5：验证-displaystyle-int-0-infty-x-e-5x-dx-frac-1-25">例题5：验证  $$\displaystyle  \int_{0}^{\infty} x e^{-5x} , dx = \frac{1}{25} $$</h3><p><strong>解</strong>：<br>对应形式为 $$ k = 2 $$，$$ a = 5 $$：<br>$$<br>\int_{0}^{\infty} x e^{-5x} , dx = \frac{\Gamma(2)}{5^2} = \frac{1!}{25} = \frac{1}{25}<br>$$</p><hr><h2 id="伽马函数在指数为二次时的推广">伽马函数在指数为二次时的推广</h2><h2 id="高斯积分（指数为-a-x-2-的情形）">高斯积分（指数为 $$-a x^2$$ 的情形）</h2><p>对于形如 $$\displaystyle e^{-a x^2}$$ 的指数函数，积分可以表示为：</p><p>$$<br>\int_{0}^{\infty} e^{-a x^2} dx = \frac{1}{2}\sqrt{\frac{\pi}{a}}, \quad a &gt; 0<br>$$</p><h2 id="一般形式">一般形式</h2><p>对于积分：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^2} dx, \quad n \geq 0, a &gt; 0<br>$$</p><p>结果为：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^2} dx = \frac{1}{2}a^{-\frac{n+1}{2}}\Gamma\left(\frac{n+1}{2}\right)<br>$$</p><h3 id="推导过程-2">推导过程</h3><p>令 $$u = a x^2$$，则：</p><p>$$<br>\begin{aligned}<br>\int_{0}^{\infty} x^n e^{-a x^2} dx &amp;= \frac{1}{2}a^{-\frac{n+1}{2}}\int_{0}^{\infty} u^{\frac{n-1}{2}} e^{-u} du \<br>&amp;= \frac{1}{2}a^{-\frac{n+1}{2}}\Gamma\left(\frac{n+1}{2}\right)<br>\end{aligned}<br>$$</p><hr><h2 id="例题-3">例题</h2><h3 id="例题6：计算-displaystyle-int-0-infty-e-3x-2-dx">例题6：计算  $$\displaystyle \int_{0}^{\infty} e^{-3x^2} dx$$</h3><p>$$<br>\int_{0}^{\infty} e^{-3x^2} dx = \frac{1}{2}\sqrt{\frac{\pi}{3}} = \frac{\sqrt{3\pi}}{6}<br>$$</p><hr><h3 id="例题7：计算-displaystyle-int-0-infty-x-2-e-2x-2-dx">例题7：计算  $$\displaystyle \int_{0}^{\infty} x^2 e^{-2x^2} dx$$</h3><p>$$<br>\begin{aligned}<br>\int_{0}^{\infty} x^2 e^{-2x^2} dx &amp;= \frac{1}{2} \cdot 2^{-\frac{3}{2}} \Gamma\left(\frac{3}{2}\right) \<br>&amp;= \frac{1}{2^{5/2}} \cdot \frac{1}{2}\sqrt{\pi} \<br>&amp;= \frac{\sqrt{\pi}}{8\sqrt{2}}<br>\end{aligned}<br>$$</p><hr><h3 id="例题8：计算-displaystyle-int-0-infty-x-4-e-x-2-dx">例题8：计算  $$\displaystyle \int_{0}^{\infty} x^4 e^{-x^2} dx$$</h3><p>$$<br>\begin{aligned}<br>\int_{0}^{\infty} x^4 e^{-x^2} dx &amp;= \frac{1}{2}\Gamma\left(\frac{5}{2}\right) \<br>&amp;= \frac{1}{2} \cdot \frac{3}{2} \cdot \frac{1}{2}\sqrt{\pi} \<br>&amp;= \frac{3\sqrt{\pi}}{8}<br>\end{aligned}<br>$$</p><hr><h2 id="更一般情形">更一般情形</h2><p>对于积分：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^m} dx, \quad n \geq 0, a &gt; 0, m &gt; 0<br>$$</p><p>结果为：</p><p>$$<br>\int_{0}^{\infty} x^n e^{-a x^m} dx = \frac{1}{m}a^{-\frac{n+1}{m}}\Gamma\left(\frac{n+1}{m}\right)<br>$$</p><h3 id="示例：计算-displaystyle-int-0-infty-x-3-e-x-4-dx">示例：计算  $$\displaystyle \int_{0}^{\infty} x^3 e^{-x^4} dx$$</h3><h2 id="int-0-infty-x-3-e-x-4-dx-frac-1-4-Gamma-1-frac-1-4">$$<br>\int_{0}^{\infty} x^3 e^{-x^4} dx = \frac{1}{4}\Gamma(1) = \frac{1}{4}<br>$$</h2><h2 id="伽马函数速记">伽马函数速记</h2><p>规定：$\displaystyle (-\frac{1}{2})!=\sqrt{\pi}$ ，$\displaystyle (\frac{1}{2})!=\frac{1}{2}\sqrt{\pi}$，$\displaystyle (\frac{3}{2})!=\frac{3}{2}\frac{1}{2}\sqrt{\pi}$</p><table><thead><tr><th style="text-align:left">$\displaystyle \int_{0}^{\infty} x^a e^{-x} dx = a!$</th><th style="text-align:left">$\displaystyle \int_{0}^{\infty} x^a e^{-x^2} dx = \frac{1}{2}(\frac{a-1}{2})!$</th></tr></thead><tbody><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} \quad e^{-x} dx = 0!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} \quad e^{-x^2} dx = \frac{1}{2}(\frac{0-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^1 e^{-x} dx = 1!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^1 e^{-x^2} dx = \frac{1}{2}(\frac{1-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^2 e^{-x} dx = 2!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^2 e^{-x^2} dx = \frac{1}{2}(\frac{2-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^3 e^{-x} dx = 3!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^3 e^{-x^2} dx = \frac{1}{2}(\frac{3-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^4 e^{-x} dx = 4!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^4 e^{-x^2} dx = \frac{1}{2}(\frac{4-1}{2})!$</td></tr><tr><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^5 e^{-x} dx = 5!$</td><td style="text-align:left">$\displaystyle \int_{0}^{\infty} x^5 e^{-x^2} dx = \frac{1}{2}(\frac{5-1}{2})!$</td></tr></tbody></table><h1>贝塔函数</h1><h2 id="定义-2">定义</h2><h3 id="积分定义">积分定义</h3><p>贝塔函数（Beta Function）是两类特殊函数之一，定义为以下含参积分：<br>$$<br>B(x, y) = \int_{0}^{1} t^{x-1} (1-t)^{y-1} dt \quad (x &gt; 0, y &gt; 0)<br>$$</p><ul><li><strong>收敛性</strong>：当且仅当 $x&gt;0$ 且 $y&gt;0$ 时积分收敛</li><li><strong>对称性</strong>：$\displaystyle B(x,y) = B(y,x)$</li></ul><h3 id="1-2-伽马函数关系">1.2 伽马函数关系</h3><p>贝塔函数与伽马函数（Gamma Function）存在如下关系：<br>$$<br>B(x, y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)}<br>$$<br>其中伽马函数定义为：<br>$$<br>\Gamma(z) = \int_{0}^{\infty} t^{z-1} e^{-t} dt<br>$$</p><h2 id="重要性质">重要性质</h2><table><thead><tr><th>性质</th><th>数学表达式</th></tr></thead><tbody><tr><td>递推关系</td><td>$\displaystyle B(x+1,y) = \frac{x}{x+y} B(x,y)$</td></tr><tr><td>三角函数形式</td><td>$\displaystyle B(x,y) = 2 \int_{0}^{\pi/2} \sin^{2x-1}\theta \cos^{2y-1}\theta d\theta$</td></tr><tr><td>与组合数关系</td><td>$\displaystyle B(n, m) = \frac{(n-1)!(m-1)!}{(n+m-1)!}$ （$n,m \in \mathbb{Z}^+$）</td></tr></tbody></table><h2 id="典型例题">典型例题</h2><h3 id="例题1：基础积分计算">例题1：基础积分计算</h3><p>计算 $B(3, 2)$</p><p><strong>分步解析：</strong></p><ol><li><p>根据积分定义：<br>$$<br>B(3, 2) = \int_{0}^{1} t^{2} (1-t)^{1} dt<br>$$</p></li><li><p>展开被积函数：<br>$$<br>= \int_{0}^{1} (t^2 - t^3) dt<br>$$</p></li><li><p>逐项积分：<br>$$<br>= \left[ \frac{t^3}{3} - \frac{t^4}{4} \right]_{0}^{1}<br>$$</p></li><li><p>代入上下限：<br>$$<br>= \frac{1}{3} - \frac{1}{4} = \frac{1}{12}<br>$$</p></li></ol><p><strong>验证</strong>：通过伽马函数验证：<br>$$<br>B(3,2) = \frac{\Gamma(3)\Gamma(2)}{\Gamma(5)} = \frac{2! \cdot 1!}{4!} = \frac{2}{24} = \frac{1}{12}<br>$$</p><h3 id="例题2：三角函数形式">例题2：三角函数形式</h3><p>证明：<br>$$<br>\int_{0}^{\pi/2} \sin^5 x \cos^3 x dx = \frac{1}{24}<br>$$</p><p><strong>分步解析：</strong></p><ol><li><p>转换为贝塔函数形式：<br>$$<br>\text{原式} = \frac{1}{2} B(3, 2)<br>$$</p></li><li><p>计算贝塔函数值：<br>$$<br>B(3,2) = \frac{\Gamma(3)\Gamma(2)}{\Gamma(5)} = \frac{1}{12}<br>$$</p></li><li><p>最终结果：<br>$$<br>\frac{1}{2} \times \frac{1}{12} = \frac{1}{24}<br>$$</p></li></ol><h2 id="扩展公式">扩展公式</h2><p>不完全贝塔函数：<br>$$<br>B_z(a,b) = \int_{0}^{z} t^{a-1} (1-t)^{b-1} dt \quad (0 \leq z \leq 1)<br>$$</p><p>正则化贝塔函数：<br>$$<br>I_z(a,b) = \frac{B_z(a,b)}{B(a,b)}<br>$$</p><h1>贝塔函数的三角形式详解</h1><h2 id="基本三角形式定义">基本三角形式定义</h2><p>贝塔函数可以通过三角函数表示为：<br>$$<br>B(x, y) = 2 \int_{0}^{\pi/2} \sin^{2x-1}\theta \cdot \cos^{2y-1}\theta , d\theta \quad (x&gt;0, y&gt;0)<br>$$</p><h2 id="推导过程-3">推导过程</h2><h3 id="变量代换">变量代换</h3><p>从标准积分定义出发：<br>$$<br>B(x, y) = \int_{0}^{1} t^{x-1} (1-t)^{y-1} dt<br>$$</p><p>作变量替换：<br>$$<br>t = \sin^2 \theta, \quad 1-t = \cos^2 \theta<br>$$</p><p>微分变换：<br>$$<br>dt = 2 \sin \theta \cos \theta , d\theta<br>$$</p><h3 id="积分限变化">积分限变化</h3><p>当 $t=0$ 时 $\theta=0$，当 $t=1$ 时 $\theta=\pi/2$，因此：<br>$$<br>\begin{aligned}<br>B(x, y) &amp;= \int_{0}^{\pi/2} (\sin^2 \theta)^{x-1} (\cos^2 \theta)^{y-1} \cdot 2 \sin \theta \cos \theta , d\theta \<br>&amp;= 2 \int_{0}^{\pi/2} \sin^{2x-1}\theta \cdot \cos^{2y-1}\theta , d\theta<br>\end{aligned}<br>$$</p><h2 id="特殊情形">特殊情形</h2><h3 id="对称性体现">对称性体现</h3><p>当 $\displaystyle x = y = \frac{1}{2}$ 时：<br>$$<br>B\left(\frac{1}{2}, \frac{1}{2}\right) = 2 \int_{0}^{\pi/2} d\theta = \pi<br>$$</p><h3 id="整数参数情形">整数参数情形</h3><p>对于 $\displaystyle m, n \in \mathbb{Z}^+$：<br>$$<br>B(m, n) = 2 \int_{0}^{\pi/2} \sin^{2m-1}\theta \cos^{2n-1}\theta , d\theta<br>$$</p><h2 id="典型例题-2">典型例题</h2><h3 id="例题1：计算-displaystyle-int-0-pi-2-sin-5-theta-cos-3-theta-d-theta">例题1：计算  $\displaystyle \int_{0}^{\pi/2} \sin^5 \theta \cos^3 \theta , d\theta$</h3><p><strong>解：</strong></p><ol><li><p>识别贝塔函数形式：<br>$$<br>\text{积分} = \frac{1}{2} B(3, 2)<br>$$</p></li><li><p>计算贝塔函数值：<br>$$<br>B(3, 2) = \frac{\Gamma(3)\Gamma(2)}{\Gamma(5)} = \frac{2! \cdot 1!}{4!} = \frac{1}{12}<br>$$</p></li><li><p>最终结果：<br>$$<br>\int_{0}^{\pi/2} \sin^5 \theta \cos^3 \theta , d\theta = \frac{1}{2} \times \frac{1}{12} = \frac{1}{24}<br>$$</p></li></ol><h3 id="例题2：证明-displaystyle-int-0-pi-2-sqrt-tan-theta-d-theta-frac-pi-sqrt-2">例题2：证明  $\displaystyle \int_{0}^{\pi/2} \sqrt{\tan \theta} , d\theta = \frac{\pi}{\sqrt{2}}$</h3><p><strong>分步解析：</strong></p><ol><li><p>令 $t = \tan \theta$，则：<br>$$<br>\int_{0}^{\pi/2} \tan^{1/2} \theta , d\theta = \int_{0}^{\infty} \frac{t^{1/2}}{1+t^2} dt<br>$$</p></li><li><p>转换为贝塔函数：<br>$$<br>= \frac{1}{2} \int_{0}^{\infty} \frac{u^{1/4}}{1+u} du \quad (u=t^2) \<br>= \frac{1}{2} B\left(\frac{5}{4}, \frac{3}{4}\right)<br>$$</p></li><li><p>利用伽马函数性质：<br>$$<br>= \frac{1}{2} \cdot \frac{\Gamma(5/4)\Gamma(3/4)}{\Gamma(2)} = \frac{\pi}{2 \sin(\pi/4)} = \frac{\pi}{\sqrt{2}}<br>$$</p></li></ol><h2 id="扩展形式">扩展形式</h2><h3 id="广义三角形式">广义三角形式</h3><p>对于任意积分限 $[0, \phi]$：<br>$$<br>B_{\phi}(x, y) = 2 \int_{0}^{\phi} \sin^{2x-1}\theta \cos^{2y-1}\theta , d\theta<br>$$</p><h3 id="双参数形式">双参数形式</h3><p>$$<br>B(x, y) = \int_{0}^{\infty} \frac{t^{x-1}}{(1+t)^{x+y}} dt<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记之栈与队列</title>
      <link href="/2025/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2025/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1>栈</h1><h2 id="栈的定义">栈的定义</h2><p><strong>栈</strong> 在百度百科中是这样定义的：</p><p>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。</p><p>它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><p><strong>栈顶、栈底</strong>：允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)。栈底固定，而栈顶浮动。</p><p><strong>空栈</strong>：栈中元素个数为零时称为空栈。</p><p><strong>进栈</strong>：插入一般称为进栈（PUSH）。</p><p><strong>出栈</strong>：删除则称为退栈（POP）。</p><p><img src="https://s21.ax1x.com/2025/04/24/pEo36gJ.png" alt=" "></p><h2 id="顺序栈">顺序栈</h2><h3 id="顺序栈的存储结构">顺序栈的存储结构</h3><p>顺序栈，即用顺序表实现栈存储结构。</p><p>通过前面的学习我们知道，使用栈存储结构操作数据元素必须遵守 “先进后出” 的原则，<br>如果你仔细观察顺序表（底层实现是数组）和栈结构就会发现，它们存储数据的方式高度相似，只不过栈对数据的存取过程有特殊的限制，而顺序表没有。</p><p>例如，我们先使用顺序栈（a 数组）存储 {1,2,3,4}，存储状态如下图所示：<br><img src="https://s21.ax1x.com/2025/04/24/pEo8sdP.png" alt=" "></p><p>于是我们可以很清楚的得到，顺序栈的存储结构就是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> top = <span class="number">-1</span>; <span class="comment">//top指向栈顶</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h3 id="栈空">栈空</h3><p>很自然的，我们将top初始化为-1，代表栈空的状态 top == -1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(SqStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/04/24/pEo8ci8.png" alt=" "></p><h3 id="栈满">栈满</h3><p>因为MaxSize代表的是最大存储个数，所以我们top最大的下标只能到MaxSize-1，</p><p>所以当 top == MaxSize - 1 时即为栈满的状态<br><img src="https://s21.ax1x.com/2025/04/24/pEo82Rg.png" alt=" "></p><p>下面我们将数组“竖着”放置来看，进行出栈、入栈的学习<br><img src="https://s21.ax1x.com/2025/04/24/pEo8RzQ.png" alt=" "></p><h3 id="入栈">入栈</h3><p>首先我们需要明确，因为栈限制在一端进行数据的输入输出，所以我们只需要对top进行移动即可实现。</p><p>对于入栈(栈不满的情况下)，设想一下，我们应该先找到“空出位置的编号”，再将其“对号入座”，而top是栈顶元素的下标，所以我们要先将top++，再将数组对应top位置赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(SqStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == MAXSIZE - <span class="number">1</span>)&#123; <span class="comment">// 栈满的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data[++s-&gt;top] = e; <span class="comment">//按照优先级，先取s-&gt;top 然后自增1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈">出栈</h3><p>同样的，出栈我们应该先得到栈顶元素的数据，然后在将其栈顶位置下标减1即可</p><p>(实际上原来top下标的数据仍然存在于数组中，但是并不在栈中，因为它不在top范围内)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(SqStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)&#123; <span class="comment">// 栈空的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序栈基本操作完整代码">顺序栈基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//顺序栈的实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> top = <span class="number">-1</span>; <span class="comment">//top指向栈顶</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(SqStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(SqStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == MAXSIZE - <span class="number">1</span>)&#123; <span class="comment">// 栈满的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data[++s-&gt;top] = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(SqStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)&#123; <span class="comment">// 栈空的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(SqStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(! <span class="built_in">IsEmpty</span>(s))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">Pop</span>(&amp;s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int i = 0; i &lt;= s.top; i++)&#123; //方式二</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;,s.data[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqStack s;</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">6</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">9</span>);</span><br><span class="line"><span class="built_in">Print</span>(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链栈">链栈</h2><p>栈的链式存储结构，简称为链栈，就和链表一样，用指针实现的就是单链表</p><p>想想看，栈知识栈顶来做插入和删除操作，栈顶放在链表的头部还是尾部呢？</p><p>由于单链表有头指针，而栈顶指针也是必需的，那直接让它俩合二为一不就好了！</p><p>所以比较好的方法是把栈顶放在单链表的头部。</p><p>另外，都已经有了栈顶在头部了，单链表中比较常用的头结点也就失去了意义，通常对于链栈来说，是不需要头结点的。</p><h3 id="链栈的存储结构">链栈的存储结构</h3><p>Node结构体和单链表的一样，用于存储数据和下一个指针</p><p>LinkStack相当于定义了一个“栈”结构体，里面记录cnt(结点数量)，以及栈顶top指针</p><p>链栈的操作绝大部分都和单链表类似，只是在插入和删除上特殊一些。<br><img src="https://s21.ax1x.com/2025/04/24/pEo8hss.png" alt=" "><br><strong>注意：在链栈中注意指针的方向是从栈顶指向栈底</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">//结点的数据</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; <span class="comment">//栈的数据</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">Node* top;</span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure><p><strong>栈空</strong><br>因为top指针即为指向栈顶的指针，如果top == NULL则代表栈空</p><p><strong>栈满</strong><br>对于链栈来说，基本不存在栈满的情况，除非内存已经没有可以使用的空间，</p><p>如果真的发生，那此时的计算机操作系统已经面临死机崩溃的情况， 而不是这个链表是否溢出问题。</p><p><strong>初始化</strong><br>这里采用 LinkStack 非指针的方式定义栈 s，将其初始化后返回给main中定义的s即可</p><p>而在调用基本操作的函数时，因为我们只需要修改s里面的top指针，所以函数形参使用指针类型(地址)，函数实参 &amp;s 传入地址</p><p>(当然也可以像链表一样直接定义为 LinkStack * 类型，实参传入 s即可，效果是一样的)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">LinkStack <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkStack s;</span><br><span class="line">s.cnt = <span class="number">0</span>;</span><br><span class="line">s.top = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">s.top = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入栈-2">入栈</h3><p>将链表头部作为栈顶的一端，可以避免在实现数据 “入栈” 和 “出栈” 操作时做大量遍历链表的耗时操作。</p><p>链表的头部作为栈顶，意味着：<br>在实现数据&quot;入栈&quot;操作时，需要将数据从链表的头部插入；<br>在实现数据&quot;出栈&quot;操作时，需要删除链表头部的首元节点；</p><p><strong>链栈实际上就是一个只能采用头插法插入或删除数据的链表</strong></p><p>入栈时类似头插法，用一个指针指向top，然后将top指针的指向和该指针指向一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(LinkStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = p;</span><br><span class="line">s-&gt;cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈-2">出栈</h3><p>出栈时用p指针指向栈顶(方便free栈顶元素)，然后把栈顶的指向 指向下一个结点即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(LinkStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s-&gt;top-&gt;data);</span><br><span class="line">p = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">s-&gt;cnt--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS：入栈、出栈别忘记更新cnt的值</strong></p><h3 id="链栈基本操作完整代码">链栈基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//链栈的实现</span></span><br><span class="line"><span class="comment">//链栈的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">//结点的数据</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; <span class="comment">//栈的数据</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">Node* top;</span><br><span class="line">&#125;LinkStack;</span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">LinkStack <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkStack s;</span><br><span class="line">s.cnt = <span class="number">0</span>;</span><br><span class="line">s.top = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">s.top = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(LinkStack s)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.cnt == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(LinkStack *s,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = p;</span><br><span class="line">s-&gt;cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(LinkStack *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s-&gt;top == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈空~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s-&gt;top-&gt;data);</span><br><span class="line">p = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">s-&gt;cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkStack s = <span class="built_in">Init</span>();</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;s,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的应用">栈的应用</h2><h3 id="括号匹配">括号匹配</h3><p><strong>算法思想</strong>：在遍历存放字符数组中，如果遇到（、{、[ 等左括号，就将其压入栈中，在遇到 ）、}、] 等右括号之后，就需要从栈中出栈判断是否有对应的左括号与之匹配，如果存在，则将其出栈，后继续遍历字符数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sequence_stack</span></span><br><span class="line">&#123;</span><br><span class="line">    datatype a[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; seq_stack;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(seq_stack* st)</span>        <span class="comment">//初始化栈，生成一个初始栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">empty</span><span class="params">(seq_stack st)</span>           <span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>( st.top ? <span class="number">0</span>:<span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">datatype <span class="title">top</span><span class="params">(seq_stack st)</span>        <span class="comment">//取栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(st))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n栈是空的!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> st.a[st.top<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(seq_stack* st, datatype x)</span>    <span class="comment">//进行压栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top == MAXSIZE)            <span class="comment">//判断栈是否已经满了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nThe sequence stack is full!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    st-&gt;a[st-&gt;top]=x;</span><br><span class="line">    st-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(seq_stack* st)</span>        <span class="comment">//进行出栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top==<span class="number">0</span>)            <span class="comment">//判断栈是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nThe sequence stack is empty!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    st-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">match_kuohao</span><span class="params">(<span class="type">char</span> c[])</span>        <span class="comment">//括号匹配算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    sequence_stack s;            <span class="comment">//新建一个栈</span></span><br><span class="line">    <span class="built_in">init</span>(&amp;s);</span><br><span class="line">    <span class="keyword">while</span>(c[i]!=<span class="string">&#x27;#&#x27;</span>)            <span class="comment">//进行输入括号</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">switch</span>(c[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:     <span class="built_in">push</span>(&amp;s,c[i]); <span class="keyword">break</span>;                <span class="comment">// 开括号全部入栈</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:     <span class="keyword">if</span>( !<span class="built_in">empty</span>(s) &amp;&amp; <span class="built_in">top</span>(s)==<span class="string">&#x27;&#123;&#x27;</span>  )   <span class="comment">// 假如 &#123;和&#125;匹配</span></span><br><span class="line">                          &#123;<span class="built_in">pop</span>(&amp;s); <span class="keyword">break</span>;&#125;</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:     <span class="keyword">if</span>( !<span class="built_in">empty</span>(s) &amp;&amp; <span class="built_in">top</span>(s) == <span class="string">&#x27;[&#x27;</span> )      <span class="comment">// 假如 [和]匹配</span></span><br><span class="line">                          &#123;<span class="built_in">pop</span>(&amp;s); <span class="keyword">break</span>;&#125;</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:     <span class="keyword">if</span>( !<span class="built_in">empty</span>(s)&amp;&amp; <span class="built_in">top</span>(s)==<span class="string">&#x27;(&#x27;</span>  )      <span class="comment">// 假如 (和)匹配</span></span><br><span class="line">                          &#123;<span class="built_in">pop</span>(&amp;s); <span class="keyword">break</span>;&#125;</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">empty</span>(s));        <span class="comment">//栈为空则匹配,否则不匹配</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> szKuohao[] = <span class="string">&quot;(([()&#123;&#125;]))#&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">match_kuohao</span>(szKuohao);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配不成功！\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换">进制转换</h3><p><strong>算法思想</strong>：十进制数 和其他 进制数的转换是计算机实现计算的基本问题，其解决方法很 多，其中一个简单算法基千下列原理：</p><blockquote><p>N=(N div d)Xd+N mod d (其中： div 为整除运算， mod 为求余运算）</p></blockquote><p><img src="https://s21.ax1x.com/2025/04/24/pEoYIeA.png" alt=" "><br>假设现要编制一个满足下列要求的程序：对于输入的任意一个非负十进制整数，打印 输出与其等值的八进制数。由千上述计算过程是从低位到高位顺序产生八进制数的各个数位，而打印输出，一般来说应从高位到低位进行，恰好和计算过程相反。因此，若将计算 过程中得到的八进制数的各位顺序进栈，则按出栈序列打印输出的即为与输人对应的八进制数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m)</span><br><span class="line">&#123;</span><br><span class="line">a[top++]=m%n;</span><br><span class="line">m=m/n;</span><br><span class="line">&#125;</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[top]&gt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[top]+<span class="string">&#x27;A&#x27;</span><span class="number">-10</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[top]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入要转换的十进制数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要转换的进制：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">change</span>(m,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h1>队列</h1><h2 id="队列的定义">队列的定义</h2><p>队列是一种特殊的线性表，特殊之处在于<strong>它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作</strong>，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h2 id="顺序队列">顺序队列</h2><h3 id="顺序队列的存储方式">顺序队列的存储方式</h3><p>顺序队列通常采用一维数组存储队列中的元素，另外增加两个指针分别指示数组中存放的队首元素和队尾元素。其中指向队首元素的指针称为队头指针front，指向队尾元素下一个位置的指针称为队尾指针rear。<br>初始化时，队头指针front和队尾指针rear都指向下标为0的存储单元<br><img src="https://s21.ax1x.com/2025/04/24/pEo8bJU.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h3 id="初始化">初始化</h3><p>初始化就是将front rear的值初始化为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列空">队列空</h3><p>当front == rear 的时候就代表队列为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.front == q.rear) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入队">入队</h3><p>因为rear是最后一个元素的下一个位置下标，所以我们直接将元素存到rear下标处即可<br><img src="https://s21.ax1x.com/2025/04/24/pEo8bJU.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;rear + <span class="number">1</span> &lt;= MAXSIZE)&#123;</span><br><span class="line">q-&gt;data[q-&gt;rear++] = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队">出队</h3><p>入队更改rear，出队则更改front</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(Queue* q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q-&gt;data[q-&gt;front++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历队列">遍历队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = q.front ; i &lt; q.rear ; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="假溢出">假溢出</h3><p>但是按照前面介绍的顺序存储方式，容易出现“假溢出”。</p><p>所谓“假溢出”，就是经过多次插入和删除操作后，实际队列还有存储空间，但是又无法向队列中插入元素。简单来说就是数组下标越界的错误</p><p>例如在图中队列删除a和b，然后依次插入h、i和j，当插入j后，就会出现队尾指针rear越出数组的下界造成“假溢出”，如图：<br><img src="https://s21.ax1x.com/2025/04/24/pEo8XQJ.png" alt=" "></p><h3 id="顺序队列基本操作完整代码">顺序队列基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//顺序队列的实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.front == q.rear) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;rear + <span class="number">1</span> &lt;= MAXSIZE)&#123;</span><br><span class="line">q-&gt;data[q-&gt;rear++] = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(Queue* q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q-&gt;data[q-&gt;front++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = q.front ; i &lt; q.rear ; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"><span class="built_in">Init</span>(&amp;q);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环队列">循环队列</h2><p>解决假溢出的办法就是后面满了，再从头开始，也就是“头尾相接”的循环结构</p><p>我们把队列的这种头尾相接的顺序存储结构成为循环队列。</p><p>当队尾指针rear或队头指针front到达存储空间的最大值时（假定队列的存储空间为QueueSize），让队尾指针或者队头指针转化为0，这样就可以将元素插入到队列的空闲存储单元中，有效的利用存储空间，消除“假溢出”。<br><img src="https://s21.ax1x.com/2025/04/24/pEoGCFK.png" alt=" "></p><h3 id="循环队列的存储结构">循环队列的存储结构</h3><p>其实循环队列也是用数组存储，只不过为了形象表现出来，我们将图做成一个“环”状，实际上还是线性的数组结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h3 id="初始化-2">初始化</h3><p>初始化将其头尾指针都赋值为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">    q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列空-2">队列空</h3><p>显然，当front == rear 表示没有元素，此时队空<br><img src="https://s21.ax1x.com/2025/04/24/pEoYTot.jpg" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.front == q.rear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列满">队列满</h3><p>那队列满呢？为了和队列空区分</p><p>我们不妨让队列多添加一个位置，这个位置不放任何元素，仅仅是为了区别空与满：</p><p>由于rear可能比front大或者小，所以它们相差一个位置的时候就是队满，</p><p>但也可能相差整整一圈</p><p>所以如果最大尺寸为MAXSIZE，</p><p>那么当 (rear + 1) % MAXSIZE == front 时就代表队列满了！<br><img src="https://s21.ax1x.com/2025/04/24/pEoYXQg.jpg" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列满</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsFull</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear<span class="number">+1</span>) % MAXSIZE == q.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取循环队列长度">获取循环队列长度</h3><p>统一rear&gt;front 和 rear&lt;front后的情况，</p><p>通用的计算队列长度的公式为：</p><p>(rear - front + MAXSIZE) % MAXSIZE</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取队列长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q.rear - q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入队-2">入队</h3><p>很简单，因为rear指向末尾元素的下一个位置，</p><p>所以先将元素存储到rear下标处，再将rear下标往“后”移动一个位置即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsFull</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列满 入队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;data[q-&gt;rear] = e;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-2">出队</h3><p>出队则是更改front指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d出队\n&quot;</span>,q-&gt;data[q-&gt;front]);</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印队列">打印队列</h3><p>只要队列不为空，就一直“出队”，这里只是假出队，因为我们传递的是q 根据值传递，只是一个“复制品” 所以并不会真的修改队列q的指针值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印队列元素:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(! <span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[q.front]);</span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列完整代码">循环队列完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//循环队列的实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//顺序队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.front == q.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队列满</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsFull</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear<span class="number">+1</span>) % MAXSIZE == q.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear - q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsFull</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列满 入队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;data[q-&gt;rear] = e;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d出队\n&quot;</span>,q-&gt;data[q-&gt;front]);</span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印队列元素:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(! <span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q.data[q.front]);</span><br><span class="line">q.front = (q.front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"><span class="built_in">Init</span>(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列长度为：%d\n&quot;</span>,<span class="built_in">Length</span>(q));</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指针值：%d %d\n&quot;</span>,q.front,q.rear);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印前指针值：%d %d\n&quot;</span>,q.front,q.rear);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印后指针值：%d %d\n&quot;</span>,q.front,q.rear);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链队列">链队列</h2><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，</p><p>我们把它简称为链队列。</p><p>为了操作上的方便，我们将对头指针指向链队列的头结点，而队尾指针指向终端节点<br><img src="https://s21.ax1x.com/2025/04/24/pEotdtP.png" alt=" "></p><h3 id="链队列的存储结构">链队列的存储结构</h3><p>将整个结构分为结点的存储和队列的存储，</p><p>结点存储data数据和next指针</p><p>队列存储头结点和尾指针以及队列长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结点的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *Next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//链队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">Node *front,*rear;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/04/24/pEotwff.png" alt=" "></p><h3 id="初始化-3">初始化</h3><p>将队列的front、rear指针指向同一块地址区域作为头结点，不存储值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">q-&gt;rear = q-&gt;front;</span><br><span class="line">q-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列空-3">队列空</h3><p>判断队列空有两种方法，一种是直接由长度得出，另一种是判断rear和front指针是否重合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列满-2">队列满</h3><p>链队列不考虑队列满的情况</p><h3 id="获取长度">获取长度</h3><p>直接返回队列的length属性即可</p><h3 id="入队-3">入队</h3><p>因为带有尾结点，所以很方便就能操作队尾元素了，直接将队尾的next指针指向新结点即可<br><img src="https://s21.ax1x.com/2025/04/24/pEotD1S.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;rear-&gt;Next = p;</span><br><span class="line">q-&gt;rear = p;</span><br><span class="line">q-&gt;length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-3">出队</h3><p>由于带有头结点，所以直接将头结点的next指针指向队首元素的下一个结点即可<br><img src="https://s21.ax1x.com/2025/04/24/pEot4pT.png" alt=" "></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q-&gt;front-&gt;Next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d出队成功\n&quot;</span>,p-&gt;data);</span><br><span class="line">q-&gt;front-&gt;Next = p-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">q-&gt;length--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列的遍历">链队列的遍历</h3><p>和单链表的情况一样，只需判断是否为空，然后依次取data的值，再进行next的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q.front-&gt;Next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列基本操作完整代码">链队列基本操作完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//链队列的实现</span></span><br><span class="line"><span class="comment">//结点的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *Next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//链队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">Node *front,*rear;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line">q-&gt;front = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">q-&gt;rear = q-&gt;front;</span><br><span class="line">q-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Queue *q,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">Node *p = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;rear-&gt;Next = p;</span><br><span class="line">q-&gt;rear = p;</span><br><span class="line">q-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(Queue *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(*q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空 出队失败~\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q-&gt;front-&gt;Next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d出队成功\n&quot;</span>,p-&gt;data);</span><br><span class="line">q-&gt;front-&gt;Next = p-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">q-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Length</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前队列长度为：%d\n&quot;</span>,q.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Queue q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(q))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *p = q.front-&gt;Next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"><span class="built_in">Init</span>(&amp;q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Push</span>(&amp;q,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Length</span>(q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="built_in">Pop</span>(&amp;q);</span><br><span class="line"><span class="built_in">Print</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>栈与队列内容总结</h1><p>栈(stack)是限定仅在表尾进行插入和删除的线性表</p><p>队列(queue)是仅允许在一端进行插入操作，在另一端进行删除操作的线性表</p><p>它们均可以用线性表的顺序村粗结构来实现，但都存在着顺序存储的一些弊端</p><p>同时也都可以通过链式存储结构来实现，实现原则上与线性表基本相同</p><p>关于栈和队列还有独特的用处，例如利用栈来实现前中后缀表达式的转换和计算、以及括号匹配问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm的配置与使用</title>
      <link href="/2025/04/16/nvm%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/04/16/nvm%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上文<a href="https://www.vendre.top/2025/04/14/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E6%8F%92%E4%BB%B6/">在Hexo博客中添加豆瓣插件</a>中提到Hexo中豆瓣插件的安装对nodejs的版本号有要求，在网上搜索的过程中发现有这样一款工具能够轻松实现对nodejs多个版本的下载与切换，成功解决了我的需求，于是便有了本篇文章的出现。</p></blockquote><h1>1.nvm介绍</h1><p>Node Version Manager（NVM） 是一种用于管理多个主动节点.js版本的工具。<br><img src="https://s21.ax1x.com/2025/04/16/pEfyVXD.png" alt=" "><br><a href="https://gitcode.com/open-source-toolkit/adb88?utm_source=highlight_word_gitcode&amp;word=node.js">Node.js</a>平台，Node.js工具社区和Node.js库是快速移动的目标 - 在一个Node.js版本下可能有效的方法不能保证适用于另一个版本的Node.js。因此，用户需要一些方法在 Node 的多个版本之间切换.js</p><h2 id="为什么使用nvm？">为什么使用nvm？</h2><p>nvm 允许用户：</p><ul><li>使用简单的命令在本地下载任何远程长期支持 （LTS） 版本的 Node.js。</li><li>直接从命令行在 Node.js 的多个版本之间轻松切换。</li><li>设置别名以轻松在不同下载版本的 Node.js之间切换。</li></ul><h1>2.nvm下载与安装</h1><h2 id="下载">下载</h2><p>nvm同时支持Linux和macOS</p><p>我们这里是在Windows上操作，也是将来工作用的最多的操作系统</p><p>下载链接：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a><br><img src="https://s21.ax1x.com/2025/04/16/pEfyB90.md.png" alt="下载这两个均可"></p><h2 id="安装">安装</h2><p><strong>如果电脑上之前已经单独安装了node，先卸载（可以在控制面板里面卸载），然后再安装nvm</strong></p><p>找到上一步下载的软件，双击安装包，一直点击下一步即可安装。</p><p>安装完成后，可以打开cmd命令行窗口。执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm -v</span><br></pre></td></tr></table></figure><p>若能若下图所示 显示版本号 则代表安装成功<br><img src="https://s21.ax1x.com/2025/04/16/pEfyD3V.png" alt=" "></p><h1>3.nvm环境配置</h1><p>安装完毕后，需要找到安装的路径，一些简单配置，</p><h2 id="配置环境变量">配置环境变量</h2><blockquote><p>注意事项：<br>如果是默认安装在c盘的。就可以跳过下面的步骤<br>如果电脑用户名是中文不建议默认安装，可以选择其它盘安装，安装路径不要有中文出现</p></blockquote><p>如果是安装在其他盘的、则需要配置相应的环境变量</p><p>怎样打开环境变量？</p><p>打开我的电脑&gt;右键&gt;属性&gt;高级系统设置&gt;环境变量</p><p>在环境变量里就可以看见nvm的路径。如果是安装在其他盘的。就去找到对应的安装路径修改即可。</p><p><strong>如果安装nvm的文件夹里没有nodejs这个文件夹的话，可以自己手动新建一个空的nodejs文件夹即可。</strong></p><h2 id="配置国内镜像">配置国内镜像</h2><p>使用npm的同学应该都知道，使用国内的淘宝镜像安装比较快。</p><p>我们先找到nvm所在文件位置，点开setting里面的配置。</p><p>原本只有2行代码。我们只需要在最后面追加2行代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node_mirror: <span class="title">http</span>://<span class="title">npmmirror.com</span>/<span class="title">mirrors</span>/<span class="title">node</span>/</span></span><br><span class="line"><span class="function"><span class="title">npm_mirror</span>: <span class="title">http</span>://<span class="title">registry.npmmirror.com</span>/<span class="title">mirrors</span>/<span class="title">npm</span>/</span></span><br></pre></td></tr></table></figure><p>然后保存关闭即可</p><h1>4.nvm使用</h1><p>打开cmd(最好以管理员身份运行)，执行以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls                      // 看安装的所有node.js的版本</span><br><span class="line"></span><br><span class="line">nvm list available          // 查显示可以安装的所有node.js的版本</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/04/16/pEfyrcT.png" alt=" "><br>可以在可选列表里。选择任意版本安装，比如安装18.18.0</p><p>执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install <span class="number">18</span>.<span class="number">18</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>安装好了之后。可以执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><p>可以在列表里看到这个版本代表安装成功</p><p>如果想使用18.18.0这个版本的话。就执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use <span class="number">18</span>.<span class="number">18</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>就可以看到当前版本已经是18.18.0了</p><h1>5.nvm常用命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nvm off                     // 禁用node.js版本管理(不卸载任何东西)</span><br><span class="line">nvm on                      // 启用node.js版本管理</span><br><span class="line">nvm install &lt;version&gt;       // 安装node.js的命名 version是版本号 例如：nvm install <span class="number">8</span>.<span class="number">12</span>.<span class="number">0</span></span><br><span class="line">nvm uninstall &lt;version&gt;     // 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用</span><br><span class="line">nvm ls                      // 显示所有安装的node.js版本</span><br><span class="line">nvm list available          // 显示可以安装的所有node.js的版本</span><br><span class="line">nvm use &lt;version&gt;           // 切换到使用指定的nodejs版本</span><br><span class="line">nvm v                       // 显示nvm版本</span><br><span class="line">nvm install stable          // 安装最新稳定版</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">nvm命令行操作命令</span><br><span class="line"><span class="number">1</span>,nvm nvm list 是查找本电脑上所有的node版本</span><br><span class="line"> </span><br><span class="line">- nvm list 查看已经安装的版本</span><br><span class="line">- nvm list installed 查看已经安装的版本</span><br><span class="line">- nvm list available 查看网络可以安装的版本</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>,nvm install 安装最新版本nvm</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>,nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line"> </span><br><span class="line"><span class="number">4</span>,nvm ls 列出所有版本</span><br><span class="line"> </span><br><span class="line"><span class="number">5</span>,nvm current显示当前版本</span><br><span class="line"> </span><br><span class="line"><span class="number">6</span>,nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line"> </span><br><span class="line"><span class="number">7</span>,nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line"> </span><br><span class="line"><span class="number">8</span>,nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line"> </span><br><span class="line"><span class="number">9</span>,nvm on 打开nodejs控制</span><br><span class="line"> </span><br><span class="line"><span class="number">10</span>,nvm off 关闭nodejs控制</span><br><span class="line"> </span><br><span class="line"><span class="number">11</span>,nvm proxy 查看设置与代理</span><br><span class="line"> </span><br><span class="line"><span class="number">12</span>,nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">　　nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line"> </span><br><span class="line"><span class="number">13</span>,nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line"> </span><br><span class="line"><span class="number">14</span>,nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line"> </span><br><span class="line"><span class="number">15</span>,nvm root [<span class="built_in">path</span>] 设置和查看root路径</span><br><span class="line"> </span><br><span class="line"><span class="number">16</span>,nvm version 查看当前的版本</span><br></pre></td></tr></table></figure><p>在做项目的时候。不同的项目使用的nodejs版本可能不一样。我们可以在配置文件里看见：</p><p>由于nodejs版本和npm版本的不同。导致项目无法运行。所以我们就需要用到nvm这个工具了！</p><h1>6.结论</h1><p>nvm对于任何Node.js开发人员来说都是一个很棒的工具。它可以实现无忧安装，并在不同版本之间轻松切换，从而节省了真正重要的事情的时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo博客中添加豆瓣插件</title>
      <link href="/2025/04/14/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E6%8F%92%E4%BB%B6/"/>
      <url>/2025/04/14/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>若此方法不适用：node 版本过低导致，可以下个 nvm 来控制 node 版本，建议安装较新的 node 版本(要求大于v18)</p></blockquote><h1>在Hexo博客中添加豆瓣插件</h1><h2 id="1-安装豆瓣插件">1. 安装豆瓣插件</h2><h3 id="前往博客根目录，打开cmd命令窗口执行-span-style-background-color-rgb-126-110-228-color-white-npm-install-hexo-douban-save-span">前往博客根目录，打开cmd命令窗口执行<span style="background-color:rgb(126, 110, 228); color: white;">npm install hexo-douban --save</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h2 id="2-注入豆瓣内容">2.注入豆瓣内容</h2><h3 id="修改站点配置文件-span-style-background-color-rgb-126-110-228-color-white-config-yml-span-，添加如下代码：">修改站点配置文件<span style="background-color: rgb(126, 110, 228); color: white;">_config.yml</span> ，添加如下代码：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">228172215</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item_per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">books/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">movies/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">games/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">song:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">songs/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my song title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my song quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><ul><li>id: 你的豆瓣ID(纯数字格式，不是自定义的域名)。获取方法可以参考 怎样获取豆瓣的数字 ID ？</li><li>builtin: 是否将 hexo douban 命令默认嵌入进 hexo g、hexo s，使其自动执行 hexo douban 命令。默认关闭。当你的豆瓣条目较多时，也建议关闭。</li><li>item_per_page: 每页展示的条目数，默认 10 。</li><li>path: 生成页面后的路径，默认生成在 movies/index.html 等下面。如需自定义路径，则可以修改这里。</li><li>title: 该页面的标题。</li><li>quote: 写在页面开头的一段话,支持 html 语法。</li><li>option: 该页面额外的 Front-matter 配置，参考 Hexo 文档。无特别需要，留空即可。</li><li>timeout: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><h2 id="3-主题中注入豆瓣">3.主题中注入豆瓣</h2><h3 id="在主题配置文件-span-style-background-color-rgb-126-110-228-color-white-config-butterfly-yml-span-中配置以下内容：">在主题配置文件<span style="background-color: rgb(126, 110, 228); color: white;">_config.butterfly.yml</span>中配置以下内容：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你有使用hexo-douban，可配置這個</span></span><br><span class="line"><span class="attr">douban:</span></span><br><span class="line">   <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">movies_img:</span> <span class="string">https://fastly.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/movie.jpg</span></span><br><span class="line">   <span class="attr">books_img:</span> <span class="string">https://fastly.jsdelivr.net/npm/blog-gallery@1.0.0/1/20200206161657.webp</span></span><br><span class="line"><span class="comment">#   games_img:</span></span><br></pre></td></tr></table></figure><h2 id="4-执行Docs命令">4.执行Docs命令</h2><h3 id="前往博客根目录，打开cmd命令窗口执行-span-style-background-color-rgb-126-110-228-color-white-hexo-douban-span">前往博客根目录，打开cmd命令窗口执行<span style="background-color: rgb(126, 110, 228); color: white;">hexo douban</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo douban</span><br></pre></td></tr></table></figure><p>等待命令执行完毕，出现下图所示内容即为成功。<br><img src="https://s21.ax1x.com/2025/04/14/pEWsK9f.png" alt=" "></p><blockquote><p>我的博客只添加了电影页面</p></blockquote><ul><li>collect代表看过</li><li>wish代表想看</li><li>do代表在看</li><li>括号中的数字代表影片数量，与你豆瓣档案里的一致</li></ul><h2 id="5-添加相关导航">5.添加相关导航</h2><h3 id="如下图：">如下图：</h3><p><img src="https://s21.ax1x.com/2025/04/14/pEWsW8K.png" alt=" "></p><h2 id="效果展示">效果展示</h2><p><img src="https://s21.ax1x.com/2025/04/16/pEfycB4.png" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
